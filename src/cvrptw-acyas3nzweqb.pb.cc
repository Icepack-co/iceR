// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cvrptw-acyas3nzweqb.proto

#include "cvrptw-acyas3nzweqb.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CVRPTW {
        template <typename>
PROTOBUF_CONSTEXPR Geocode::Geocode(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.quantity_)*/ 0,
      /*decltype(_impl_.windowstart_)*/ 0,
      /*decltype(_impl_.windowend_)*/ 0,
    } {}
struct GeocodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeocodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeocodeDefaultTypeInternal() {}
  union {
    Geocode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeocodeDefaultTypeInternal _Geocode_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CVRPTW::CVRPTW(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.points_)*/ {},
      /*decltype(_impl_.depot_)*/ nullptr,
      /*decltype(_impl_.numberofvehicles_)*/ 0,
      /*decltype(_impl_.vehiclecapacity_)*/ 0,
      /*decltype(_impl_.distancetype_)*/ 1,
    } {}
struct CVRPTWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CVRPTWDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CVRPTWDefaultTypeInternal() {}
  union {
    CVRPTW _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CVRPTWDefaultTypeInternal _CVRPTW_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SolveRequest::SolveRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.visitsequence_)*/ {},
      /*decltype(_impl_.modelid_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_)*/ nullptr,
      /*decltype(_impl_.solvetype_)*/ 0,
    } {}
struct SolveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolveRequestDefaultTypeInternal() {}
  union {
    SolveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolveRequestDefaultTypeInternal _SolveRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Edge_Geometry::Edge_Geometry(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
    } {}
struct Edge_GeometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Edge_GeometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Edge_GeometryDefaultTypeInternal() {}
  union {
    Edge_Geometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Edge_GeometryDefaultTypeInternal _Edge_Geometry_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Edge::Edge(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.geometry_)*/ {},
      /*decltype(_impl_.from_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.to_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.distance_)*/ 0,
    } {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SolutionResponse_Route::SolutionResponse_Route(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.sequence_)*/ {},
      /*decltype(_impl_.edges_)*/ {},
      /*decltype(_impl_.visitcapacities_)*/ {},
      /*decltype(_impl_.arrivaltimes_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SolutionResponse_RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolutionResponse_RouteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolutionResponse_RouteDefaultTypeInternal() {}
  union {
    SolutionResponse_Route _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolutionResponse_RouteDefaultTypeInternal _SolutionResponse_Route_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SolutionResponse::SolutionResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.routes_)*/ {},
      /*decltype(_impl_.objective_)*/ 0,
    } {}
struct SolutionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolutionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolutionResponseDefaultTypeInternal() {}
  union {
    SolutionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolutionResponseDefaultTypeInternal _SolutionResponse_default_instance_;
}  // namespace CVRPTW
static ::_pb::Metadata file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cvrptw_2dacyas3nzweqb_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cvrptw_2dacyas3nzweqb_2eproto = nullptr;
const ::uint32_t TableStruct_cvrptw_2dacyas3nzweqb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _impl_.windowstart_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Geocode, _impl_.windowend_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::CVRPTW::CVRPTW, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::CVRPTW, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CVRPTW::CVRPTW, _impl_.points_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::CVRPTW, _impl_.depot_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::CVRPTW, _impl_.numberofvehicles_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::CVRPTW, _impl_.vehiclecapacity_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::CVRPTW, _impl_.distancetype_),
    ~0u,
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolveRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolveRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolveRequest, _impl_.model_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolveRequest, _impl_.modelid_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolveRequest, _impl_.visitsequence_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolveRequest, _impl_.solvetype_),
    1,
    0,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge_Geometry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge_Geometry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge_Geometry, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge_Geometry, _impl_.y_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge, _impl_.distance_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::Edge, _impl_.geometry_),
    0,
    1,
    2,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse_Route, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse_Route, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse_Route, _impl_.edges_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse_Route, _impl_.visitcapacities_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse_Route, _impl_.arrivaltimes_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse, _impl_.routes_),
    PROTOBUF_FIELD_OFFSET(::CVRPTW::SolutionResponse, _impl_.objective_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::CVRPTW::Geocode)},
        {20, 33, -1, sizeof(::CVRPTW::CVRPTW)},
        {38, 50, -1, sizeof(::CVRPTW::SolveRequest)},
        {54, 64, -1, sizeof(::CVRPTW::Edge_Geometry)},
        {66, 78, -1, sizeof(::CVRPTW::Edge)},
        {82, -1, -1, sizeof(::CVRPTW::SolutionResponse_Route)},
        {94, 104, -1, sizeof(::CVRPTW::SolutionResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CVRPTW::_Geocode_default_instance_._instance,
    &::CVRPTW::_CVRPTW_default_instance_._instance,
    &::CVRPTW::_SolveRequest_default_instance_._instance,
    &::CVRPTW::_Edge_Geometry_default_instance_._instance,
    &::CVRPTW::_Edge_default_instance_._instance,
    &::CVRPTW::_SolutionResponse_Route_default_instance_._instance,
    &::CVRPTW::_SolutionResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cvrptw_2dacyas3nzweqb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031cvrptw-acyas3nzweqb.proto\022\006CVRPTW\"h\n\007G"
    "eocode\022\n\n\002id\030\001 \002(\t\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002"
    "\022\023\n\010quantity\030\004 \002(\002:\0010\022\023\n\013windowStart\030\005 \001"
    "(\002\022\021\n\twindowEnd\030\006 \001(\002\"\375\001\n\006CVRPTW\022\037\n\006poin"
    "ts\030\001 \003(\0132\017.CVRPTW.Geocode\022\036\n\005depot\030\002 \002(\013"
    "2\017.CVRPTW.Geocode\022\030\n\020NumberOfVehicles\030\003 "
    "\002(\005\022\027\n\017VehicleCapacity\030\004 \002(\002\022\?\n\014distance"
    "type\030\005 \001(\0162\034.CVRPTW.CVRPTW.eDistanceType"
    ":\013RoadNetwork\">\n\reDistanceType\022\017\n\013RoadNe"
    "twork\020\001\022\r\n\tEuclidean\020\002\022\r\n\tHaversine\020\003\"\313\001"
    "\n\014SolveRequest\022\035\n\005model\030\001 \001(\0132\016.CVRPTW.C"
    "VRPTW\022\017\n\007modelID\030\002 \001(\t\022\025\n\rvisitSequence\030"
    "\003 \003(\t\022;\n\tsolveType\030\004 \001(\0162\036.CVRPTW.SolveR"
    "equest.SolveType:\010Optimise\"7\n\tSolveType\022"
    "\014\n\010Optimise\020\000\022\014\n\010Evaluate\020\001\022\016\n\nReOptimis"
    "e\020\002\"}\n\004Edge\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \002(\t\022\020\n"
    "\010distance\030\003 \001(\002\022\'\n\010geometry\030\005 \003(\0132\025.CVRP"
    "TW.Edge.Geometry\032 \n\010Geometry\022\t\n\001x\030\001 \002(\002\022"
    "\t\n\001y\030\002 \002(\002\"\274\001\n\020SolutionResponse\022.\n\006route"
    "s\030\001 \003(\0132\036.CVRPTW.SolutionResponse.Route\022"
    "\021\n\tobjective\030\002 \002(\002\032e\n\005Route\022\020\n\010sequence\030"
    "\001 \003(\t\022\033\n\005edges\030\002 \003(\0132\014.CVRPTW.Edge\022\027\n\017vi"
    "sitCapacities\030\003 \003(\002\022\024\n\014arrivalTimes\030\004 \003("
    "\002"
};
static ::absl::once_flag descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cvrptw_2dacyas3nzweqb_2eproto = {
    false,
    false,
    921,
    descriptor_table_protodef_cvrptw_2dacyas3nzweqb_2eproto,
    "cvrptw-acyas3nzweqb.proto",
    &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_cvrptw_2dacyas3nzweqb_2eproto::offsets,
    file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto,
    file_level_enum_descriptors_cvrptw_2dacyas3nzweqb_2eproto,
    file_level_service_descriptors_cvrptw_2dacyas3nzweqb_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter() {
  return &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cvrptw_2dacyas3nzweqb_2eproto(&descriptor_table_cvrptw_2dacyas3nzweqb_2eproto);
namespace CVRPTW {
const ::google::protobuf::EnumDescriptor* CVRPTW_eDistanceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_cvrptw_2dacyas3nzweqb_2eproto);
  return file_level_enum_descriptors_cvrptw_2dacyas3nzweqb_2eproto[0];
}
bool CVRPTW_eDistanceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CVRPTW_eDistanceType CVRPTW::RoadNetwork;
constexpr CVRPTW_eDistanceType CVRPTW::Euclidean;
constexpr CVRPTW_eDistanceType CVRPTW::Haversine;
constexpr CVRPTW_eDistanceType CVRPTW::eDistanceType_MIN;
constexpr CVRPTW_eDistanceType CVRPTW::eDistanceType_MAX;
constexpr int CVRPTW::eDistanceType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SolveRequest_SolveType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_cvrptw_2dacyas3nzweqb_2eproto);
  return file_level_enum_descriptors_cvrptw_2dacyas3nzweqb_2eproto[1];
}
bool SolveRequest_SolveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SolveRequest_SolveType SolveRequest::Optimise;
constexpr SolveRequest_SolveType SolveRequest::Evaluate;
constexpr SolveRequest_SolveType SolveRequest::ReOptimise;
constexpr SolveRequest_SolveType SolveRequest::SolveType_MIN;
constexpr SolveRequest_SolveType SolveRequest::SolveType_MAX;
constexpr int SolveRequest::SolveType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Geocode::_Internal {
 public:
  using HasBits = decltype(std::declval<Geocode>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Geocode, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_windowstart(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_windowend(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Geocode::Geocode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVRPTW.Geocode)
}
Geocode::Geocode(const Geocode& from) : ::google::protobuf::Message() {
  Geocode* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.x_){},
      decltype(_impl_.y_){},
      decltype(_impl_.quantity_){},
      decltype(_impl_.windowstart_){},
      decltype(_impl_.windowend_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.windowend_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.windowend_));

  // @@protoc_insertion_point(copy_constructor:CVRPTW.Geocode)
}
inline void Geocode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.quantity_){0},
      decltype(_impl_.windowstart_){0},
      decltype(_impl_.windowend_){0},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Geocode::~Geocode() {
  // @@protoc_insertion_point(destructor:CVRPTW.Geocode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Geocode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}
void Geocode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Geocode::Clear() {
// @@protoc_insertion_point(message_clear_start:CVRPTW.Geocode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.windowend_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.windowend_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Geocode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 25, 2> Geocode::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Geocode, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Geocode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string id = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Geocode, _impl_.id_)}},
    // required float x = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Geocode, _impl_.x_)}},
    // required float y = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Geocode, _impl_.y_)}},
    // required float quantity = 4 [default = 0];
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(Geocode, _impl_.quantity_)}},
    // optional float windowStart = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(Geocode, _impl_.windowstart_)}},
    // optional float windowEnd = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(Geocode, _impl_.windowend_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required string id = 1;
    {PROTOBUF_FIELD_OFFSET(Geocode, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required float x = 2;
    {PROTOBUF_FIELD_OFFSET(Geocode, _impl_.x_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 3;
    {PROTOBUF_FIELD_OFFSET(Geocode, _impl_.y_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float quantity = 4 [default = 0];
    {PROTOBUF_FIELD_OFFSET(Geocode, _impl_.quantity_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float windowStart = 5;
    {PROTOBUF_FIELD_OFFSET(Geocode, _impl_.windowstart_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float windowEnd = 6;
    {PROTOBUF_FIELD_OFFSET(Geocode, _impl_.windowend_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\16\2\0\0\0\0\0\0"
    "CVRPTW.Geocode"
    "id"
  }},
};

::uint8_t* Geocode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVRPTW.Geocode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CVRPTW.Geocode.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_x(), target);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_y(), target);
  }

  // required float quantity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_quantity(), target);
  }

  // optional float windowStart = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_windowstart(), target);
  }

  // optional float windowEnd = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_windowend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVRPTW.Geocode)
  return target;
}

::size_t Geocode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVRPTW.Geocode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // required string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // required float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // required float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // required float quantity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional float windowStart = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional float windowEnd = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Geocode::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Geocode::MergeImpl
};
const ::google::protobuf::Message::ClassData*Geocode::GetClassData() const { return &_class_data_; }


void Geocode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Geocode*>(&to_msg);
  auto& from = static_cast<const Geocode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVRPTW.Geocode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.windowstart_ = from._impl_.windowstart_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.windowend_ = from._impl_.windowend_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Geocode::CopyFrom(const Geocode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVRPTW.Geocode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Geocode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Geocode::InternalSwap(Geocode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geocode, _impl_.windowend_)
      + sizeof(Geocode::_impl_.windowend_)
      - PROTOBUF_FIELD_OFFSET(Geocode, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Geocode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter, &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
      file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[0]);
}
// ===================================================================

class CVRPTW::_Internal {
 public:
  using HasBits = decltype(std::declval<CVRPTW>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_._has_bits_);
  static const ::CVRPTW::Geocode& depot(const CVRPTW* msg);
  static void set_has_depot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numberofvehicles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vehiclecapacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distancetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::CVRPTW::Geocode& CVRPTW::_Internal::depot(const CVRPTW* msg) {
  return *msg->_impl_.depot_;
}
CVRPTW::CVRPTW(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVRPTW.CVRPTW)
}
CVRPTW::CVRPTW(const CVRPTW& from) : ::google::protobuf::Message() {
  CVRPTW* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.points_){from._impl_.points_},
      decltype(_impl_.depot_){nullptr},
      decltype(_impl_.numberofvehicles_){},
      decltype(_impl_.vehiclecapacity_){},
      decltype(_impl_.distancetype_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.depot_ = new ::CVRPTW::Geocode(*from._impl_.depot_);
  }
  ::memcpy(&_impl_.numberofvehicles_, &from._impl_.numberofvehicles_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.distancetype_) -
    reinterpret_cast<char*>(&_impl_.numberofvehicles_)) + sizeof(_impl_.distancetype_));

  // @@protoc_insertion_point(copy_constructor:CVRPTW.CVRPTW)
}
inline void CVRPTW::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.points_){arena},
      decltype(_impl_.depot_){nullptr},
      decltype(_impl_.numberofvehicles_){0},
      decltype(_impl_.vehiclecapacity_){0},
      decltype(_impl_.distancetype_){1},
  };
}
CVRPTW::~CVRPTW() {
  // @@protoc_insertion_point(destructor:CVRPTW.CVRPTW)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CVRPTW::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.depot_;
}
void CVRPTW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CVRPTW::Clear() {
// @@protoc_insertion_point(message_clear_start:CVRPTW.CVRPTW)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_points()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.depot_ != nullptr);
    _impl_.depot_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.numberofvehicles_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vehiclecapacity_) -
        reinterpret_cast<char*>(&_impl_.numberofvehicles_)) + sizeof(_impl_.vehiclecapacity_));
    _impl_.distancetype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CVRPTW::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> CVRPTW::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CVRPTW_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .CVRPTW.Geocode points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.points_)}},
    // required .CVRPTW.Geocode depot = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.depot_)}},
    // required int32 NumberOfVehicles = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CVRPTW, _impl_.numberofvehicles_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.numberofvehicles_)}},
    // required float VehicleCapacity = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 2, 0, PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.vehiclecapacity_)}},
    // optional .CVRPTW.CVRPTW.eDistanceType distancetype = 5 [default = RoadNetwork];
    {::_pbi::TcParser::FastEr1S1,
     {40, 3, 3, PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.distancetype_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CVRPTW.Geocode points = 1;
    {PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.points_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // required .CVRPTW.Geocode depot = 2;
    {PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.depot_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required int32 NumberOfVehicles = 3;
    {PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.numberofvehicles_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required float VehicleCapacity = 4;
    {PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.vehiclecapacity_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .CVRPTW.CVRPTW.eDistanceType distancetype = 5 [default = RoadNetwork];
    {PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.distancetype_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CVRPTW::Geocode>()},
    {::_pbi::TcParser::GetTable<::CVRPTW::Geocode>()},
    {1, 3},
  }}, {{
  }},
};

::uint8_t* CVRPTW::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVRPTW.CVRPTW)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CVRPTW.Geocode points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .CVRPTW.Geocode depot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::depot(this),
        _Internal::depot(this).GetCachedSize(), target, stream);
  }

  // required int32 NumberOfVehicles = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_numberofvehicles(), target);
  }

  // required float VehicleCapacity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_vehiclecapacity(), target);
  }

  // optional .CVRPTW.CVRPTW.eDistanceType distancetype = 5 [default = RoadNetwork];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_distancetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVRPTW.CVRPTW)
  return target;
}

::size_t CVRPTW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVRPTW.CVRPTW)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVRPTW.Geocode points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // required .CVRPTW.Geocode depot = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.depot_);
    }

    // required int32 NumberOfVehicles = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_numberofvehicles());
    }

    // required float VehicleCapacity = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

  }
  // optional .CVRPTW.CVRPTW.eDistanceType distancetype = 5 [default = RoadNetwork];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_distancetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CVRPTW::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CVRPTW::MergeImpl
};
const ::google::protobuf::Message::ClassData*CVRPTW::GetClassData() const { return &_class_data_; }


void CVRPTW::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CVRPTW*>(&to_msg);
  auto& from = static_cast<const CVRPTW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVRPTW.CVRPTW)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(from._internal_points());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_depot()->::CVRPTW::Geocode::MergeFrom(
          from._internal_depot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.numberofvehicles_ = from._impl_.numberofvehicles_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.vehiclecapacity_ = from._impl_.vehiclecapacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distancetype_ = from._impl_.distancetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CVRPTW::CopyFrom(const CVRPTW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVRPTW.CVRPTW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CVRPTW::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_points()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.depot_->IsInitialized()) return false;
  }
  return true;
}

void CVRPTW::InternalSwap(CVRPTW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.distancetype_)
      + sizeof(CVRPTW::_impl_.distancetype_)
      - PROTOBUF_FIELD_OFFSET(CVRPTW, _impl_.depot_)>(
          reinterpret_cast<char*>(&_impl_.depot_),
          reinterpret_cast<char*>(&other->_impl_.depot_));
}

::google::protobuf::Metadata CVRPTW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter, &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
      file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[1]);
}
// ===================================================================

class SolveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SolveRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_._has_bits_);
  static const ::CVRPTW::CVRPTW& model(const SolveRequest* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modelid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solvetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CVRPTW::CVRPTW& SolveRequest::_Internal::model(const SolveRequest* msg) {
  return *msg->_impl_.model_;
}
SolveRequest::SolveRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVRPTW.SolveRequest)
}
SolveRequest::SolveRequest(const SolveRequest& from) : ::google::protobuf::Message() {
  SolveRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.visitsequence_){from._impl_.visitsequence_},
      decltype(_impl_.modelid_){},
      decltype(_impl_.model_){nullptr},
      decltype(_impl_.solvetype_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.modelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modelid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.modelid_.Set(from._internal_modelid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.model_ = new ::CVRPTW::CVRPTW(*from._impl_.model_);
  }
  _this->_impl_.solvetype_ = from._impl_.solvetype_;

  // @@protoc_insertion_point(copy_constructor:CVRPTW.SolveRequest)
}
inline void SolveRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.visitsequence_){arena},
      decltype(_impl_.modelid_){},
      decltype(_impl_.model_){nullptr},
      decltype(_impl_.solvetype_){0},
  };
  _impl_.modelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modelid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SolveRequest::~SolveRequest() {
  // @@protoc_insertion_point(destructor:CVRPTW.SolveRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SolveRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_visitsequence()->~RepeatedPtrField();
  _impl_.modelid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_;
}
void SolveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SolveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CVRPTW.SolveRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_visitsequence()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.modelid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.model_ != nullptr);
      _impl_.model_->Clear();
    }
  }
  _impl_.solvetype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SolveRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 48, 2> SolveRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SolveRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .CVRPTW.SolveRequest.SolveType solveType = 4 [default = Optimise];
    {::_pbi::TcParser::FastEr0S1,
     {32, 2, 2, PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.solvetype_)}},
    // optional .CVRPTW.CVRPTW model = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.model_)}},
    // optional string modelID = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.modelid_)}},
    // repeated string visitSequence = 3;
    {::_pbi::TcParser::FastSR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.visitsequence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CVRPTW.CVRPTW model = 1;
    {PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.model_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string modelID = 2;
    {PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.modelid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated string visitSequence = 3;
    {PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.visitsequence_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // optional .CVRPTW.SolveRequest.SolveType solveType = 4 [default = Optimise];
    {PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.solvetype_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CVRPTW::CVRPTW>()},
    {0, 3},
  }}, {{
    "\23\0\7\15\0\0\0\0"
    "CVRPTW.SolveRequest"
    "modelID"
    "visitSequence"
  }},
};

::uint8_t* SolveRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVRPTW.SolveRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CVRPTW.CVRPTW model = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  // optional string modelID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_modelid();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CVRPTW.SolveRequest.modelID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string visitSequence = 3;
  for (int i = 0, n = this->_internal_visitsequence_size(); i < n; ++i) {
    const auto& s = this->_internal_visitsequence().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CVRPTW.SolveRequest.visitSequence");
    target = stream->WriteString(3, s, target);
  }

  // optional .CVRPTW.SolveRequest.SolveType solveType = 4 [default = Optimise];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_solvetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVRPTW.SolveRequest)
  return target;
}

::size_t SolveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVRPTW.SolveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string visitSequence = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_visitsequence().size());
  for (int i = 0, n = _internal_visitsequence().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_visitsequence().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string modelID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_modelid());
    }

    // optional .CVRPTW.CVRPTW model = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.model_);
    }

    // optional .CVRPTW.SolveRequest.SolveType solveType = 4 [default = Optimise];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_solvetype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SolveRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SolveRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*SolveRequest::GetClassData() const { return &_class_data_; }


void SolveRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SolveRequest*>(&to_msg);
  auto& from = static_cast<const SolveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVRPTW.SolveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_visitsequence()->MergeFrom(from._internal_visitsequence());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_modelid(from._internal_modelid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_model()->::CVRPTW::CVRPTW::MergeFrom(
          from._internal_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.solvetype_ = from._impl_.solvetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolveRequest::CopyFrom(const SolveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVRPTW.SolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SolveRequest::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.model_->IsInitialized()) return false;
  }
  return true;
}

void SolveRequest::InternalSwap(SolveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.visitsequence_.InternalSwap(&other->_impl_.visitsequence_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modelid_, lhs_arena,
                                       &other->_impl_.modelid_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.solvetype_)
      + sizeof(SolveRequest::_impl_.solvetype_)
      - PROTOBUF_FIELD_OFFSET(SolveRequest, _impl_.model_)>(
          reinterpret_cast<char*>(&_impl_.model_),
          reinterpret_cast<char*>(&other->_impl_.model_));
}

::google::protobuf::Metadata SolveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter, &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
      file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[2]);
}
// ===================================================================

class Edge_Geometry::_Internal {
 public:
  using HasBits = decltype(std::declval<Edge_Geometry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Edge_Geometry::Edge_Geometry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVRPTW.Edge.Geometry)
}
Edge_Geometry::Edge_Geometry(const Edge_Geometry& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVRPTW.Edge.Geometry)
}
inline void Edge_Geometry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
  };
}
Edge_Geometry::~Edge_Geometry() {
  // @@protoc_insertion_point(destructor:CVRPTW.Edge.Geometry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Edge_Geometry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Edge_Geometry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Edge_Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:CVRPTW.Edge.Geometry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Edge_Geometry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Edge_Geometry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Edge_Geometry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_.y_)}},
    // required float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float x = 1;
    {PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 2;
    {PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Edge_Geometry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVRPTW.Edge.Geometry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVRPTW.Edge.Geometry)
  return target;
}

::size_t Edge_Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVRPTW.Edge.Geometry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Edge_Geometry::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Edge_Geometry::MergeImpl
};
const ::google::protobuf::Message::ClassData*Edge_Geometry::GetClassData() const { return &_class_data_; }


void Edge_Geometry::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Edge_Geometry*>(&to_msg);
  auto& from = static_cast<const Edge_Geometry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVRPTW.Edge.Geometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Edge_Geometry::CopyFrom(const Edge_Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVRPTW.Edge.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Edge_Geometry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Edge_Geometry::InternalSwap(Edge_Geometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_.y_)
      + sizeof(Edge_Geometry::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Edge_Geometry, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Edge_Geometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter, &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
      file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[3]);
}
// ===================================================================

class Edge::_Internal {
 public:
  using HasBits = decltype(std::declval<Edge>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Edge, _impl_._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Edge::Edge(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVRPTW.Edge)
}
Edge::Edge(const Edge& from) : ::google::protobuf::Message() {
  Edge* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.geometry_){from._impl_.geometry_},
      decltype(_impl_.from_){},
      decltype(_impl_.to_){},
      decltype(_impl_.distance_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.from_.Set(from._internal_from(), _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.to_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.to_.Set(from._internal_to(), _this->GetArenaForAllocation());
  }
  _this->_impl_.distance_ = from._impl_.distance_;

  // @@protoc_insertion_point(copy_constructor:CVRPTW.Edge)
}
inline void Edge::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.geometry_){arena},
      decltype(_impl_.from_){},
      decltype(_impl_.to_){},
      decltype(_impl_.distance_){0},
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.to_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Edge::~Edge() {
  // @@protoc_insertion_point(destructor:CVRPTW.Edge)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Edge::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.geometry_.~RepeatedPtrField();
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
}
void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:CVRPTW.Edge)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_geometry()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.to_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.distance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Edge::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 1, 26, 2> Edge::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Edge, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Edge_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string from = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Edge, _impl_.from_)}},
    // required string to = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Edge, _impl_.to_)}},
    // optional float distance = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Edge, _impl_.distance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .CVRPTW.Edge.Geometry geometry = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Edge, _impl_.geometry_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required string from = 1;
    {PROTOBUF_FIELD_OFFSET(Edge, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required string to = 2;
    {PROTOBUF_FIELD_OFFSET(Edge, _impl_.to_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional float distance = 3;
    {PROTOBUF_FIELD_OFFSET(Edge, _impl_.distance_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // repeated .CVRPTW.Edge.Geometry geometry = 5;
    {PROTOBUF_FIELD_OFFSET(Edge, _impl_.geometry_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CVRPTW::Edge_Geometry>()},
  }}, {{
    "\13\4\2\0\0\0\0\0"
    "CVRPTW.Edge"
    "from"
    "to"
  }},
};

::uint8_t* Edge::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVRPTW.Edge)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string from = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_from();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CVRPTW.Edge.from");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required string to = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_to();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CVRPTW.Edge.to");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional float distance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_distance(), target);
  }

  // repeated .CVRPTW.Edge.Geometry geometry = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geometry_size()); i < n; i++) {
    const auto& repfield = this->_internal_geometry().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVRPTW.Edge)
  return target;
}

::size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVRPTW.Edge)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVRPTW.Edge.Geometry geometry = 5;
  total_size += 1UL * this->_internal_geometry_size();
  for (const auto& msg : this->_internal_geometry()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required string from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_from());
    }

    // required string to = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_to());
    }

  }
  // optional float distance = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Edge::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::google::protobuf::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVRPTW.Edge)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_geometry()->MergeFrom(from._internal_geometry());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_from(from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_to(from._internal_to());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVRPTW.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Edge::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_geometry()))
    return false;
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.geometry_.InternalSwap(&other->_impl_.geometry_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_, lhs_arena,
                                       &other->_impl_.from_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.to_, lhs_arena,
                                       &other->_impl_.to_, rhs_arena);
        swap(_impl_.distance_, other->_impl_.distance_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter, &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
      file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[4]);
}
// ===================================================================

class SolutionResponse_Route::_Internal {
 public:
};

SolutionResponse_Route::SolutionResponse_Route(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVRPTW.SolutionResponse.Route)
}
SolutionResponse_Route::SolutionResponse_Route(const SolutionResponse_Route& from) : ::google::protobuf::Message() {
  SolutionResponse_Route* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sequence_){from._impl_.sequence_},
      decltype(_impl_.edges_){from._impl_.edges_},
      decltype(_impl_.visitcapacities_){from._impl_.visitcapacities_},
      decltype(_impl_.arrivaltimes_){from._impl_.arrivaltimes_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:CVRPTW.SolutionResponse.Route)
}
inline void SolutionResponse_Route::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sequence_){arena},
      decltype(_impl_.edges_){arena},
      decltype(_impl_.visitcapacities_){arena},
      decltype(_impl_.arrivaltimes_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SolutionResponse_Route::~SolutionResponse_Route() {
  // @@protoc_insertion_point(destructor:CVRPTW.SolutionResponse.Route)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SolutionResponse_Route::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_sequence()->~RepeatedPtrField();
  _impl_.edges_.~RepeatedPtrField();
  _impl_.visitcapacities_.~RepeatedField();
  _impl_.arrivaltimes_.~RepeatedField();
}
void SolutionResponse_Route::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SolutionResponse_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:CVRPTW.SolutionResponse.Route)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sequence()->Clear();
  _internal_mutable_edges()->Clear();
  _internal_mutable_visitcapacities()->Clear();
  _internal_mutable_arrivaltimes()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SolutionResponse_Route::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 46, 2> SolutionResponse_Route::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SolutionResponse_Route_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float arrivalTimes = 4;
    {::_pbi::TcParser::FastF32R1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.arrivaltimes_)}},
    // repeated string sequence = 1;
    {::_pbi::TcParser::FastSR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.sequence_)}},
    // repeated .CVRPTW.Edge edges = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.edges_)}},
    // repeated float visitCapacities = 3;
    {::_pbi::TcParser::FastF32R1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.visitcapacities_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string sequence = 1;
    {PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.sequence_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // repeated .CVRPTW.Edge edges = 2;
    {PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.edges_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated float visitCapacities = 3;
    {PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.visitcapacities_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
    // repeated float arrivalTimes = 4;
    {PROTOBUF_FIELD_OFFSET(SolutionResponse_Route, _impl_.arrivaltimes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CVRPTW::Edge>()},
  }}, {{
    "\35\10\0\0\0\0\0\0"
    "CVRPTW.SolutionResponse.Route"
    "sequence"
  }},
};

::uint8_t* SolutionResponse_Route::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVRPTW.SolutionResponse.Route)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string sequence = 1;
  for (int i = 0, n = this->_internal_sequence_size(); i < n; ++i) {
    const auto& s = this->_internal_sequence().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CVRPTW.SolutionResponse.Route.sequence");
    target = stream->WriteString(1, s, target);
  }

  // repeated .CVRPTW.Edge edges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float visitCapacities = 3;
  for (int i = 0, n = this->_internal_visitcapacities_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_visitcapacities().Get(i), target);
  }

  // repeated float arrivalTimes = 4;
  for (int i = 0, n = this->_internal_arrivaltimes_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_arrivaltimes().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVRPTW.SolutionResponse.Route)
  return target;
}

::size_t SolutionResponse_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVRPTW.SolutionResponse.Route)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sequence = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_sequence().size());
  for (int i = 0, n = _internal_sequence().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_sequence().Get(i));
  }
  // repeated .CVRPTW.Edge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_internal_edges()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated float visitCapacities = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_visitcapacities_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_visitcapacities_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated float arrivalTimes = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_arrivaltimes_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_arrivaltimes_size());
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SolutionResponse_Route::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SolutionResponse_Route::MergeImpl
};
const ::google::protobuf::Message::ClassData*SolutionResponse_Route::GetClassData() const { return &_class_data_; }


void SolutionResponse_Route::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SolutionResponse_Route*>(&to_msg);
  auto& from = static_cast<const SolutionResponse_Route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVRPTW.SolutionResponse.Route)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sequence()->MergeFrom(from._internal_sequence());
  _this->_internal_mutable_edges()->MergeFrom(from._internal_edges());
  _this->_internal_mutable_visitcapacities()->MergeFrom(from._internal_visitcapacities());
  _this->_internal_mutable_arrivaltimes()->MergeFrom(from._internal_arrivaltimes());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolutionResponse_Route::CopyFrom(const SolutionResponse_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVRPTW.SolutionResponse.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SolutionResponse_Route::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(_internal_edges()))
    return false;
  return true;
}

void SolutionResponse_Route::InternalSwap(SolutionResponse_Route* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sequence_.InternalSwap(&other->_impl_.sequence_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
  _impl_.visitcapacities_.InternalSwap(&other->_impl_.visitcapacities_);
  _impl_.arrivaltimes_.InternalSwap(&other->_impl_.arrivaltimes_);
}

::google::protobuf::Metadata SolutionResponse_Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter, &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
      file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[5]);
}
// ===================================================================

class SolutionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SolutionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SolutionResponse, _impl_._has_bits_);
  static void set_has_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SolutionResponse::SolutionResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVRPTW.SolutionResponse)
}
SolutionResponse::SolutionResponse(const SolutionResponse& from) : ::google::protobuf::Message() {
  SolutionResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.routes_){from._impl_.routes_},
      decltype(_impl_.objective_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.objective_ = from._impl_.objective_;

  // @@protoc_insertion_point(copy_constructor:CVRPTW.SolutionResponse)
}
inline void SolutionResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.routes_){arena},
      decltype(_impl_.objective_){0},
  };
}
SolutionResponse::~SolutionResponse() {
  // @@protoc_insertion_point(destructor:CVRPTW.SolutionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SolutionResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_.~RepeatedPtrField();
}
void SolutionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SolutionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CVRPTW.SolutionResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_routes()->Clear();
  _impl_.objective_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SolutionResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SolutionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SolutionResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SolutionResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required float objective = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 0, 0, PROTOBUF_FIELD_OFFSET(SolutionResponse, _impl_.objective_)}},
    // repeated .CVRPTW.SolutionResponse.Route routes = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SolutionResponse, _impl_.routes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CVRPTW.SolutionResponse.Route routes = 1;
    {PROTOBUF_FIELD_OFFSET(SolutionResponse, _impl_.routes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // required float objective = 2;
    {PROTOBUF_FIELD_OFFSET(SolutionResponse, _impl_.objective_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CVRPTW::SolutionResponse_Route>()},
  }}, {{
  }},
};

::uint8_t* SolutionResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVRPTW.SolutionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CVRPTW.SolutionResponse.Route routes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required float objective = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_objective(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVRPTW.SolutionResponse)
  return target;
}

::size_t SolutionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVRPTW.SolutionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVRPTW.SolutionResponse.Route routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_internal_routes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // required float objective = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SolutionResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SolutionResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*SolutionResponse::GetClassData() const { return &_class_data_; }


void SolutionResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SolutionResponse*>(&to_msg);
  auto& from = static_cast<const SolutionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVRPTW.SolutionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_routes()->MergeFrom(from._internal_routes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_objective(from._internal_objective());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SolutionResponse::CopyFrom(const SolutionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVRPTW.SolutionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SolutionResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_routes()))
    return false;
  return true;
}

void SolutionResponse::InternalSwap(SolutionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
        swap(_impl_.objective_, other->_impl_.objective_);
}

::google::protobuf::Metadata SolutionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_getter, &descriptor_table_cvrptw_2dacyas3nzweqb_2eproto_once,
      file_level_metadata_cvrptw_2dacyas3nzweqb_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace CVRPTW
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
