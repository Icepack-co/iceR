// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns3-tbfvuwtge2iq.proto

#include "ns3-tbfvuwtge2iq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ns3_2dtbfvuwtge2iq_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DimensionRange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FixedDimensionCost;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowDimensionalConstraint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Geocode;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InternalDimension;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProductGroup_ProductSpecification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_Assignment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_GeometrySequence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_NodeFlow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_NodeProductFlow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_Route;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnitDimensionCost;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserDimension;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Node_ProductTransform;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProductGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CostModel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DimensionConfiguration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LaneRate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Node_Flow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Node_ProductFlow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Node_ProductTransform_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Model;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ns3_2dtbfvuwtge2iq_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Node;
}  // namespace protobuf_ns3_2dtbfvuwtge2iq_2eproto
namespace NS3 {
class InternalDimensionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalDimension>
      _instance;
} _InternalDimension_default_instance_;
class UserDimensionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDimension>
      _instance;
} _UserDimension_default_instance_;
class DimensionConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionConfiguration>
      _instance;
} _DimensionConfiguration_default_instance_;
class GeocodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Geocode>
      _instance;
} _Geocode_default_instance_;
class UnitDimensionCostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnitDimensionCost>
      _instance;
} _UnitDimensionCost_default_instance_;
class FixedDimensionCostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedDimensionCost>
      _instance;
} _FixedDimensionCost_default_instance_;
class FlowDimensionalConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowDimensionalConstraint>
      _instance;
} _FlowDimensionalConstraint_default_instance_;
class DimensionRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionRange>
      _instance;
} _DimensionRange_default_instance_;
class Node_ProductFlowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node_ProductFlow>
      _instance;
} _Node_ProductFlow_default_instance_;
class Node_FlowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node_Flow>
      _instance;
} _Node_Flow_default_instance_;
class Node_ProductTransform_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node_ProductTransform_Item>
      _instance;
} _Node_ProductTransform_Item_default_instance_;
class Node_ProductTransformDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node_ProductTransform>
      _instance;
} _Node_ProductTransform_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node>
      _instance;
} _Node_default_instance_;
class ProductGroup_ProductSpecificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProductGroup_ProductSpecification>
      _instance;
} _ProductGroup_ProductSpecification_default_instance_;
class ProductGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProductGroup>
      _instance;
} _ProductGroup_default_instance_;
class LaneRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneRate>
      _instance;
} _LaneRate_default_instance_;
class CostModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CostModel>
      _instance;
} _CostModel_default_instance_;
class ModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Model>
      _instance;
} _Model_default_instance_;
class SolveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolveRequest>
      _instance;
} _SolveRequest_default_instance_;
class SolutionResponse_AssignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolutionResponse_Assignment>
      _instance;
} _SolutionResponse_Assignment_default_instance_;
class SolutionResponse_NodeProductFlowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolutionResponse_NodeProductFlow>
      _instance;
} _SolutionResponse_NodeProductFlow_default_instance_;
class SolutionResponse_NodeFlowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolutionResponse_NodeFlow>
      _instance;
} _SolutionResponse_NodeFlow_default_instance_;
class SolutionResponse_GeometrySequenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolutionResponse_GeometrySequence>
      _instance;
} _SolutionResponse_GeometrySequence_default_instance_;
class SolutionResponse_RouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolutionResponse_Route>
      _instance;
} _SolutionResponse_Route_default_instance_;
class SolutionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SolutionResponse>
      _instance;
} _SolutionResponse_default_instance_;
}  // namespace NS3
namespace protobuf_ns3_2dtbfvuwtge2iq_2eproto {
static void InitDefaultsInternalDimension() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_InternalDimension_default_instance_;
    new (ptr) ::NS3::InternalDimension();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::InternalDimension::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InternalDimension =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInternalDimension}, {}};

static void InitDefaultsUserDimension() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_UserDimension_default_instance_;
    new (ptr) ::NS3::UserDimension();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::UserDimension::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserDimension =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserDimension}, {}};

static void InitDefaultsDimensionConfiguration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_DimensionConfiguration_default_instance_;
    new (ptr) ::NS3::DimensionConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::DimensionConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DimensionConfiguration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDimensionConfiguration}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_InternalDimension.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UserDimension.base,}};

static void InitDefaultsGeocode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_Geocode_default_instance_;
    new (ptr) ::NS3::Geocode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::Geocode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Geocode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeocode}, {}};

static void InitDefaultsUnitDimensionCost() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_UnitDimensionCost_default_instance_;
    new (ptr) ::NS3::UnitDimensionCost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::UnitDimensionCost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnitDimensionCost =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnitDimensionCost}, {}};

static void InitDefaultsFixedDimensionCost() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_FixedDimensionCost_default_instance_;
    new (ptr) ::NS3::FixedDimensionCost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::FixedDimensionCost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FixedDimensionCost =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFixedDimensionCost}, {}};

static void InitDefaultsFlowDimensionalConstraint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_FlowDimensionalConstraint_default_instance_;
    new (ptr) ::NS3::FlowDimensionalConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::FlowDimensionalConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowDimensionalConstraint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowDimensionalConstraint}, {}};

static void InitDefaultsDimensionRange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_DimensionRange_default_instance_;
    new (ptr) ::NS3::DimensionRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::DimensionRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DimensionRange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDimensionRange}, {}};

static void InitDefaultsNode_ProductFlow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_Node_ProductFlow_default_instance_;
    new (ptr) ::NS3::Node_ProductFlow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::Node_ProductFlow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Node_ProductFlow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNode_ProductFlow}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionRange.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FixedDimensionCost.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UnitDimensionCost.base,}};

static void InitDefaultsNode_Flow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_Node_Flow_default_instance_;
    new (ptr) ::NS3::Node_Flow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::Node_Flow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Node_Flow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNode_Flow}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionRange.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FixedDimensionCost.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UnitDimensionCost.base,}};

static void InitDefaultsNode_ProductTransform_Item() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_Node_ProductTransform_Item_default_instance_;
    new (ptr) ::NS3::Node_ProductTransform_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::Node_ProductTransform_Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Node_ProductTransform_Item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNode_ProductTransform_Item}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionRange.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FixedDimensionCost.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UnitDimensionCost.base,}};

static void InitDefaultsNode_ProductTransform() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_Node_ProductTransform_default_instance_;
    new (ptr) ::NS3::Node_ProductTransform();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::Node_ProductTransform::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Node_ProductTransform =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNode_ProductTransform}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductTransform_Item.base,}};

static void InitDefaultsNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_Node_default_instance_;
    new (ptr) ::NS3::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Node =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsNode}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Geocode.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductFlow.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_Flow.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FlowDimensionalConstraint.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductTransform.base,}};

static void InitDefaultsProductGroup_ProductSpecification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_ProductGroup_ProductSpecification_default_instance_;
    new (ptr) ::NS3::ProductGroup_ProductSpecification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::ProductGroup_ProductSpecification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProductGroup_ProductSpecification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProductGroup_ProductSpecification}, {}};

static void InitDefaultsProductGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_ProductGroup_default_instance_;
    new (ptr) ::NS3::ProductGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::ProductGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProductGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProductGroup}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_ProductGroup_ProductSpecification.base,}};

static void InitDefaultsLaneRate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_LaneRate_default_instance_;
    new (ptr) ::NS3::LaneRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::LaneRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaneRate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaneRate}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UnitDimensionCost.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FlowDimensionalConstraint.base,}};

static void InitDefaultsCostModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_CostModel_default_instance_;
    new (ptr) ::NS3::CostModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::CostModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CostModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCostModel}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UnitDimensionCost.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FlowDimensionalConstraint.base,}};

static void InitDefaultsModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_Model_default_instance_;
    new (ptr) ::NS3::Model();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::Model::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Model =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsModel}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionConfiguration.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_LaneRate.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_CostModel.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_ProductGroup.base,}};

static void InitDefaultsSolveRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_SolveRequest_default_instance_;
    new (ptr) ::NS3::SolveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::SolveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SolveRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSolveRequest}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Model.base,}};

static void InitDefaultsSolutionResponse_Assignment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_SolutionResponse_Assignment_default_instance_;
    new (ptr) ::NS3::SolutionResponse_Assignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::SolutionResponse_Assignment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_Assignment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSolutionResponse_Assignment}, {}};

static void InitDefaultsSolutionResponse_NodeProductFlow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_SolutionResponse_NodeProductFlow_default_instance_;
    new (ptr) ::NS3::SolutionResponse_NodeProductFlow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::SolutionResponse_NodeProductFlow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_NodeProductFlow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSolutionResponse_NodeProductFlow}, {}};

static void InitDefaultsSolutionResponse_NodeFlow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_SolutionResponse_NodeFlow_default_instance_;
    new (ptr) ::NS3::SolutionResponse_NodeFlow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::SolutionResponse_NodeFlow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_NodeFlow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSolutionResponse_NodeFlow}, {}};

static void InitDefaultsSolutionResponse_GeometrySequence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_SolutionResponse_GeometrySequence_default_instance_;
    new (ptr) ::NS3::SolutionResponse_GeometrySequence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::SolutionResponse_GeometrySequence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_GeometrySequence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSolutionResponse_GeometrySequence}, {}};

static void InitDefaultsSolutionResponse_Route() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_SolutionResponse_Route_default_instance_;
    new (ptr) ::NS3::SolutionResponse_Route();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::SolutionResponse_Route::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SolutionResponse_Route =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSolutionResponse_Route}, {}};

static void InitDefaultsSolutionResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NS3::_SolutionResponse_default_instance_;
    new (ptr) ::NS3::SolutionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NS3::SolutionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SolutionResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSolutionResponse}, {
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_Assignment.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_NodeFlow.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_NodeProductFlow.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_GeometrySequence.base,
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_Route.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_InternalDimension.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDimension.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionConfiguration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Geocode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnitDimensionCost.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FixedDimensionCost.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowDimensionalConstraint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionRange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node_ProductFlow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node_Flow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node_ProductTransform_Item.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node_ProductTransform.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProductGroup_ProductSpecification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProductGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneRate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CostModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Model.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SolveRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SolutionResponse_Assignment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SolutionResponse_NodeProductFlow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SolutionResponse_NodeFlow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SolutionResponse_GeometrySequence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SolutionResponse_Route.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SolutionResponse.base);
}

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::InternalDimension, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::InternalDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::InternalDimension, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::InternalDimension, measurementunit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UserDimension, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UserDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UserDimension, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UserDimension, units_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionConfiguration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionConfiguration, timeconfig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionConfiguration, distanceconfig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionConfiguration, userdimensions_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Geocode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Geocode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Geocode, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Geocode, latitude_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UnitDimensionCost, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UnitDimensionCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UnitDimensionCost, dimensionids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UnitDimensionCost, dimensioncoefficients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::UnitDimensionCost, costperunit_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FixedDimensionCost, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FixedDimensionCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FixedDimensionCost, dimensionids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FixedDimensionCost, fixedcost_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FlowDimensionalConstraint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FlowDimensionalConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FlowDimensionalConstraint, dimensionids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FlowDimensionalConstraint, dimensioncoefficients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FlowDimensionalConstraint, flowmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::FlowDimensionalConstraint, flowmax_),
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionRange, dimensionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionRange, minrange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionRange, maxrange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::DimensionRange, flowpenalty_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductFlow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductFlow, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductFlow, dimensionranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductFlow, fixeddimensioncosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductFlow, unitdimensioncosts_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_Flow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_Flow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_Flow, dimensionranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_Flow, fixeddimensioncosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_Flow, unitdimensioncosts_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform_Item, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform_Item, productratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform_Item, dimensionranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform_Item, fixeddimensioncosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform_Item, unitdimensioncosts_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform, inputitems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node_ProductTransform, outputitems_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, geocode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, production_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, consumption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, flow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, productflows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, allowablesources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, maximumsources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, flowconstraints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Node, producttransforms_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup_ProductSpecification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup_ProductSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup_ProductSpecification, basedimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup_ProductSpecification, targetdimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup_ProductSpecification, targetperbase_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup, productgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::ProductGroup, productspecification_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, productids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, productgroupids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, unitdimensioncosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::LaneRate, flowconstraints_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::CostModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::CostModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::CostModel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::CostModel, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::CostModel, productgroupids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::CostModel, unitdimensioncosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::CostModel, flowconstraints_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Model, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Model, dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Model, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Model, lanerates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Model, costmodels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::Model, productgroups_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolveRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolveRequest, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolveRequest, modelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolveRequest, solvetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolveRequest, geometryoutput_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, lanerateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, costmodelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Assignment, duration_),
  0,
  1,
  2,
  5,
  6,
  3,
  4,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, inflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, outflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, flowcost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, fixedcost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, productionamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, productionpenalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, productioncost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, consumptionamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, consumptionpenalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeProductFlow, consumptioncost_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, inflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, outflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, flowcost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, fixedcost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, productflowcost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, productfixedcost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, productionamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, productionpenalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, productioncost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, consumptionamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, consumptionpenalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_NodeFlow, consumptioncost_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_GeometrySequence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_GeometrySequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_GeometrySequence, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_GeometrySequence, y_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Route, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Route, fromid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Route, toid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse_Route, geometrysequence_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, objective_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, lowerbound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, optimalitygap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, assignments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, nodeflows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, nodeproductflows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, geometrysequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NS3::SolutionResponse, routes_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::NS3::InternalDimension)},
  { 9, 16, sizeof(::NS3::UserDimension)},
  { 18, 26, sizeof(::NS3::DimensionConfiguration)},
  { 29, 36, sizeof(::NS3::Geocode)},
  { 38, 46, sizeof(::NS3::UnitDimensionCost)},
  { 49, 56, sizeof(::NS3::FixedDimensionCost)},
  { 58, 67, sizeof(::NS3::FlowDimensionalConstraint)},
  { 71, 80, sizeof(::NS3::DimensionRange)},
  { 84, 93, sizeof(::NS3::Node_ProductFlow)},
  { 97, 105, sizeof(::NS3::Node_Flow)},
  { 108, 118, sizeof(::NS3::Node_ProductTransform_Item)},
  { 123, 130, sizeof(::NS3::Node_ProductTransform)},
  { 132, 147, sizeof(::NS3::Node)},
  { 157, 165, sizeof(::NS3::ProductGroup_ProductSpecification)},
  { 168, 176, sizeof(::NS3::ProductGroup)},
  { 179, 191, sizeof(::NS3::LaneRate)},
  { 198, 208, sizeof(::NS3::CostModel)},
  { 213, 223, sizeof(::NS3::Model)},
  { 228, 237, sizeof(::NS3::SolveRequest)},
  { 241, 255, sizeof(::NS3::SolutionResponse_Assignment)},
  { 264, 281, sizeof(::NS3::SolutionResponse_NodeProductFlow)},
  { 293, 311, sizeof(::NS3::SolutionResponse_NodeFlow)},
  { 324, 331, sizeof(::NS3::SolutionResponse_GeometrySequence)},
  { 333, 341, sizeof(::NS3::SolutionResponse_Route)},
  { 344, 357, sizeof(::NS3::SolutionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_InternalDimension_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_UserDimension_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_DimensionConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_Geocode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_UnitDimensionCost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_FixedDimensionCost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_FlowDimensionalConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_DimensionRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_Node_ProductFlow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_Node_Flow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_Node_ProductTransform_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_Node_ProductTransform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_ProductGroup_ProductSpecification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_ProductGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_LaneRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_CostModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_Model_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_SolveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_SolutionResponse_Assignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_SolutionResponse_NodeProductFlow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_SolutionResponse_NodeFlow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_SolutionResponse_GeometrySequence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_SolutionResponse_Route_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NS3::_SolutionResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ns3-tbfvuwtge2iq.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026ns3-tbfvuwtge2iq.proto\022\003NS3\"\277\001\n\021Intern"
      "alDimension\022\n\n\002id\030\001 \002(\t\022@\n\017measurementUn"
      "it\030\002 \002(\0162\'.NS3.InternalDimension.eMeasur"
      "ementUnit\"\\\n\020eMeasurementUnit\022\013\n\007SECONDS"
      "\020\000\022\013\n\007MINUTES\020\001\022\t\n\005HOURS\020\002\022\010\n\004DAYS\020\003\022\016\n\n"
      "KILOMETRES\020\004\022\t\n\005MILES\020\005\"*\n\rUserDimension"
      "\022\n\n\002id\030\001 \002(\t\022\r\n\005units\030\002 \002(\t\"\240\001\n\026Dimensio"
      "nConfiguration\022*\n\ntimeConfig\030\001 \001(\0132\026.NS3"
      ".InternalDimension\022.\n\016distanceConfig\030\002 \001"
      "(\0132\026.NS3.InternalDimension\022*\n\016userDimens"
      "ions\030\003 \003(\0132\022.NS3.UserDimension\".\n\007Geocod"
      "e\022\021\n\tlongitude\030\001 \002(\002\022\020\n\010latitude\030\002 \002(\002\"]"
      "\n\021UnitDimensionCost\022\024\n\014dimensionIds\030\001 \003("
      "\t\022\035\n\025dimensionCoefficients\030\002 \003(\002\022\023\n\013cost"
      "PerUnit\030\003 \002(\002\"=\n\022FixedDimensionCost\022\024\n\014d"
      "imensionIds\030\001 \003(\t\022\021\n\tfixedCost\030\002 \002(\002\"r\n\031"
      "FlowDimensionalConstraint\022\024\n\014dimensionId"
      "s\030\001 \003(\t\022\035\n\025dimensionCoefficients\030\002 \003(\002\022\017"
      "\n\007flowMin\030\003 \002(\002\022\017\n\007flowMax\030\004 \002(\002\"d\n\016Dime"
      "nsionRange\022\023\n\013dimensionId\030\001 \002(\t\022\023\n\010minRa"
      "nge\030\002 \002(\002:\0010\022\020\n\010maxRange\030\003 \002(\002\022\026\n\013flowPe"
      "nalty\030\004 \002(\002:\0010\"\237\010\n\004Node\022\n\n\002id\030\001 \002(\t\022\035\n\007g"
      "eocode\030\002 \002(\0132\014.NS3.Geocode\022)\n\nproduction"
      "\030\003 \003(\0132\025.NS3.Node.ProductFlow\022*\n\013consump"
      "tion\030\004 \003(\0132\025.NS3.Node.ProductFlow\022\034\n\004flo"
      "w\030\005 \001(\0132\016.NS3.Node.Flow\022+\n\014productFlows\030"
      "\006 \003(\0132\025.NS3.Node.ProductFlow\022\030\n\020allowabl"
      "eSources\030\007 \003(\t\022\032\n\016maximumSources\030\010 \001(\005:\002"
      "-1\0227\n\017flowConstraints\030\t \003(\0132\036.NS3.FlowDi"
      "mensionalConstraint\0225\n\021productTransforms"
      "\030\n \003(\0132\032.NS3.Node.ProductTransform\032\270\001\n\013P"
      "roductFlow\022\021\n\tproductId\030\001 \002(\t\022,\n\017dimensi"
      "onRanges\030\002 \003(\0132\023.NS3.DimensionRange\0224\n\023F"
      "ixedDimensionCosts\030\003 \003(\0132\027.NS3.FixedDime"
      "nsionCost\0222\n\022unitDimensionCosts\030\004 \003(\0132\026."
      "NS3.UnitDimensionCost\032\236\001\n\004Flow\022,\n\017dimens"
      "ionRanges\030\001 \003(\0132\023.NS3.DimensionRange\0224\n\023"
      "FixedDimensionCosts\030\002 \003(\0132\027.NS3.FixedDim"
      "ensionCost\0222\n\022unitDimensionCosts\030\003 \003(\0132\026"
      ".NS3.UnitDimensionCost\032\307\002\n\020ProductTransf"
      "orm\0223\n\ninputItems\030\001 \003(\0132\037.NS3.Node.Produ"
      "ctTransform.Item\0224\n\013outputItems\030\002 \003(\0132\037."
      "NS3.Node.ProductTransform.Item\032\307\001\n\004Item\022"
      "\021\n\tproductId\030\001 \002(\t\022\024\n\014productRatio\030\002 \002(\005"
      "\022,\n\017dimensionRanges\030\003 \003(\0132\023.NS3.Dimensio"
      "nRange\0224\n\023fixedDimensionCosts\030\004 \003(\0132\027.NS"
      "3.FixedDimensionCost\0222\n\022unitDimensionCos"
      "ts\030\005 \003(\0132\026.NS3.UnitDimensionCost\"\336\001\n\014Pro"
      "ductGroup\022\021\n\tproductId\030\001 \002(\t\022\026\n\016productG"
      "roupId\030\002 \002(\t\022D\n\024productSpecification\030\003 \003"
      "(\0132&.NS3.ProductGroup.ProductSpecificati"
      "on\032]\n\024ProductSpecification\022\025\n\rbaseDimens"
      "ion\030\001 \002(\t\022\027\n\017targetDimension\030\002 \003(\t\022\025\n\rta"
      "rgetPerBase\030\003 \003(\002\"\325\001\n\010LaneRate\022\n\n\002id\030\001 \002"
      "(\t\022\016\n\006source\030\003 \002(\t\022\023\n\013destination\030\004 \002(\t\022"
      "\022\n\nproductIds\030\005 \003(\t\022\027\n\017productGroupIds\030\006"
      " \003(\t\0222\n\022unitDimensionCosts\030\007 \003(\0132\026.NS3.U"
      "nitDimensionCost\0227\n\017flowConstraints\030\010 \003("
      "\0132\036.NS3.FlowDimensionalConstraint\"\255\001\n\tCo"
      "stModel\022\n\n\002id\030\001 \002(\t\022\016\n\006source\030\002 \002(\t\022\027\n\017p"
      "roductGroupIds\030\003 \003(\t\0222\n\022unitDimensionCos"
      "ts\030\004 \003(\0132\026.NS3.UnitDimensionCost\0227\n\017flow"
      "Constraints\030\005 \003(\0132\036.NS3.FlowDimensionalC"
      "onstraint\"\302\001\n\005Model\022/\n\ndimensions\030\001 \002(\0132"
      "\033.NS3.DimensionConfiguration\022\030\n\005nodes\030\002 "
      "\003(\0132\t.NS3.Node\022 \n\tlaneRates\030\003 \003(\0132\r.NS3."
      "LaneRate\022\"\n\ncostModels\030\004 \003(\0132\016.NS3.CostM"
      "odel\022(\n\rproductGroups\030\005 \003(\0132\021.NS3.Produc"
      "tGroup\"\372\001\n\014SolveRequest\022\031\n\005model\030\001 \001(\0132\n"
      ".NS3.Model\022\017\n\007modelID\030\002 \001(\t\0228\n\tsolveType"
      "\030\004 \001(\0162\033.NS3.SolveRequest.SolveType:\010Opt"
      "imise\022>\n\016geometryOutput\030\005 \001(\0162 .NS3.Solv"
      "eRequest.GeometryOutput:\004None\"\031\n\tSolveTy"
      "pe\022\014\n\010Optimise\020\000\")\n\016GeometryOutput\022\010\n\004No"
      "ne\020\000\022\r\n\tAggregate\020\001\"\324\t\n\020SolutionResponse"
      "\022\021\n\tobjective\030\001 \002(\002\022\022\n\nlowerBound\030\002 \001(\002\022"
      "\025\n\roptimalityGap\030\003 \001(\002\0225\n\013assignments\030\004 "
      "\003(\0132 .NS3.SolutionResponse.Assignment\0221\n"
      "\tnodeFlows\030\005 \003(\0132\036.NS3.SolutionResponse."
      "NodeFlow\022\?\n\020nodeProductFlows\030\006 \003(\0132%.NS3"
      ".SolutionResponse.NodeProductFlow\022@\n\020geo"
      "metrySequence\030\007 \003(\0132&.NS3.SolutionRespon"
      "se.GeometrySequence\022+\n\006routes\030\010 \003(\0132\033.NS"
      "3.SolutionResponse.Route\032\257\001\n\nAssignment\022"
      "\016\n\006source\030\001 \002(\t\022\023\n\013destination\030\002 \002(\t\022\021\n\t"
      "productId\030\003 \002(\t\022\016\n\006amount\030\004 \002(\002\022\014\n\004cost\030"
      "\005 \002(\002\022\022\n\nlaneRateId\030\006 \001(\t\022\023\n\013costModelId"
      "\030\007 \001(\t\022\020\n\010distance\030\010 \002(\002\022\020\n\010duration\030\t \002"
      "(\002\032\227\002\n\017NodeProductFlow\022\016\n\006nodeId\030\001 \002(\t\022\021"
      "\n\tproductId\030\002 \002(\t\022\016\n\006inFlow\030\003 \002(\002\022\017\n\007out"
      "Flow\030\004 \002(\002\022\020\n\010flowCost\030\005 \002(\002\022\021\n\tfixedCos"
      "t\030\006 \002(\002\022\030\n\020productionAmount\030\007 \002(\002\022\031\n\021pro"
      "ductionPenalty\030\010 \002(\002\022\026\n\016productionCost\030\t"
      " \002(\002\022\031\n\021consumptionAmount\030\n \002(\002\022\032\n\022consu"
      "mptionPenalty\030\013 \002(\002\022\027\n\017consumptionCost\030\014"
      " \002(\002\032\260\002\n\010NodeFlow\022\016\n\006nodeId\030\001 \002(\t\022\016\n\006inF"
      "low\030\002 \002(\002\022\017\n\007outFlow\030\003 \002(\002\022\020\n\010flowCost\030\004"
      " \002(\002\022\021\n\tfixedCost\030\005 \002(\002\022\027\n\017productFlowCo"
      "st\030\006 \002(\002\022\030\n\020productFixedCost\030\007 \002(\002\022\030\n\020pr"
      "oductionAmount\030\010 \002(\002\022\031\n\021productionPenalt"
      "y\030\t \002(\002\022\026\n\016productionCost\030\n \002(\002\022\031\n\021consu"
      "mptionAmount\030\013 \002(\002\022\032\n\022consumptionPenalty"
      "\030\014 \002(\002\022\027\n\017consumptionCost\030\r \002(\002\032(\n\020Geome"
      "trySequence\022\t\n\001x\030\001 \003(\002\022\t\n\001y\030\002 \003(\002\032\?\n\005Rou"
      "te\022\016\n\006fromId\030\001 \002(\t\022\014\n\004toId\030\002 \002(\t\022\030\n\020geom"
      "etrySequence\030\003 \003(\005B\017\n\ricepackai.NS3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ns3-tbfvuwtge2iq.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ns3_2dtbfvuwtge2iq_2eproto
namespace NS3 {
const ::google::protobuf::EnumDescriptor* InternalDimension_eMeasurementUnit_descriptor() {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_enum_descriptors[0];
}
bool InternalDimension_eMeasurementUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InternalDimension_eMeasurementUnit InternalDimension::SECONDS;
const InternalDimension_eMeasurementUnit InternalDimension::MINUTES;
const InternalDimension_eMeasurementUnit InternalDimension::HOURS;
const InternalDimension_eMeasurementUnit InternalDimension::DAYS;
const InternalDimension_eMeasurementUnit InternalDimension::KILOMETRES;
const InternalDimension_eMeasurementUnit InternalDimension::MILES;
const InternalDimension_eMeasurementUnit InternalDimension::eMeasurementUnit_MIN;
const InternalDimension_eMeasurementUnit InternalDimension::eMeasurementUnit_MAX;
const int InternalDimension::eMeasurementUnit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolveRequest_SolveType_descriptor() {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_enum_descriptors[1];
}
bool SolveRequest_SolveType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolveRequest_SolveType SolveRequest::Optimise;
const SolveRequest_SolveType SolveRequest::SolveType_MIN;
const SolveRequest_SolveType SolveRequest::SolveType_MAX;
const int SolveRequest::SolveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolveRequest_GeometryOutput_descriptor() {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_enum_descriptors[2];
}
bool SolveRequest_GeometryOutput_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolveRequest_GeometryOutput SolveRequest::None;
const SolveRequest_GeometryOutput SolveRequest::Aggregate;
const SolveRequest_GeometryOutput SolveRequest::GeometryOutput_MIN;
const SolveRequest_GeometryOutput SolveRequest::GeometryOutput_MAX;
const int SolveRequest::GeometryOutput_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void InternalDimension::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalDimension::kIdFieldNumber;
const int InternalDimension::kMeasurementUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalDimension::InternalDimension()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_InternalDimension.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.InternalDimension)
}
InternalDimension::InternalDimension(const InternalDimension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  measurementunit_ = from.measurementunit_;
  // @@protoc_insertion_point(copy_constructor:NS3.InternalDimension)
}

void InternalDimension::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurementunit_ = 0;
}

InternalDimension::~InternalDimension() {
  // @@protoc_insertion_point(destructor:NS3.InternalDimension)
  SharedDtor();
}

void InternalDimension::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InternalDimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InternalDimension::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InternalDimension& InternalDimension::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_InternalDimension.base);
  return *internal_default_instance();
}


void InternalDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.InternalDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  measurementunit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InternalDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.InternalDimension)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.InternalDimension.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NS3.InternalDimension.eMeasurementUnit measurementUnit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NS3::InternalDimension_eMeasurementUnit_IsValid(value)) {
            set_measurementunit(static_cast< ::NS3::InternalDimension_eMeasurementUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.InternalDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.InternalDimension)
  return false;
#undef DO_
}

void InternalDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.InternalDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.InternalDimension.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .NS3.InternalDimension.eMeasurementUnit measurementUnit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->measurementunit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.InternalDimension)
}

::google::protobuf::uint8* InternalDimension::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.InternalDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.InternalDimension.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .NS3.InternalDimension.eMeasurementUnit measurementUnit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->measurementunit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.InternalDimension)
  return target;
}

size_t InternalDimension::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.InternalDimension)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_measurementunit()) {
    // required .NS3.InternalDimension.eMeasurementUnit measurementUnit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measurementunit());
  }

  return total_size;
}
size_t InternalDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.InternalDimension)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .NS3.InternalDimension.eMeasurementUnit measurementUnit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measurementunit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalDimension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.InternalDimension)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalDimension* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalDimension>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.InternalDimension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.InternalDimension)
    MergeFrom(*source);
  }
}

void InternalDimension::MergeFrom(const InternalDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.InternalDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      measurementunit_ = from.measurementunit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InternalDimension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.InternalDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalDimension::CopyFrom(const InternalDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.InternalDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalDimension::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InternalDimension::Swap(InternalDimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalDimension::InternalSwap(InternalDimension* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(measurementunit_, other->measurementunit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InternalDimension::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDimension::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDimension::kIdFieldNumber;
const int UserDimension::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDimension::UserDimension()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UserDimension.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.UserDimension)
}
UserDimension::UserDimension(const UserDimension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_units()) {
    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  // @@protoc_insertion_point(copy_constructor:NS3.UserDimension)
}

void UserDimension::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserDimension::~UserDimension() {
  // @@protoc_insertion_point(destructor:NS3.UserDimension)
  SharedDtor();
}

void UserDimension::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserDimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDimension::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDimension& UserDimension::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UserDimension.base);
  return *internal_default_instance();
}


void UserDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.UserDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      units_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.UserDimension)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.UserDimension.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string units = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->units().data(), static_cast<int>(this->units().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.UserDimension.units");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.UserDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.UserDimension)
  return false;
#undef DO_
}

void UserDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.UserDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.UserDimension.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string units = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.UserDimension.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->units(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.UserDimension)
}

::google::protobuf::uint8* UserDimension::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.UserDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.UserDimension.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string units = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.UserDimension.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->units(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.UserDimension)
  return target;
}

size_t UserDimension::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.UserDimension)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_units()) {
    // required string units = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->units());
  }

  return total_size;
}
size_t UserDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.UserDimension)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string units = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->units());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDimension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.UserDimension)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDimension* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDimension>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.UserDimension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.UserDimension)
    MergeFrom(*source);
  }
}

void UserDimension::MergeFrom(const UserDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.UserDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_units();
      units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
    }
  }
}

void UserDimension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.UserDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDimension::CopyFrom(const UserDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.UserDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDimension::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserDimension::Swap(UserDimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDimension::InternalSwap(UserDimension* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  units_.Swap(&other->units_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDimension::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DimensionConfiguration::InitAsDefaultInstance() {
  ::NS3::_DimensionConfiguration_default_instance_._instance.get_mutable()->timeconfig_ = const_cast< ::NS3::InternalDimension*>(
      ::NS3::InternalDimension::internal_default_instance());
  ::NS3::_DimensionConfiguration_default_instance_._instance.get_mutable()->distanceconfig_ = const_cast< ::NS3::InternalDimension*>(
      ::NS3::InternalDimension::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionConfiguration::kTimeConfigFieldNumber;
const int DimensionConfiguration::kDistanceConfigFieldNumber;
const int DimensionConfiguration::kUserDimensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionConfiguration::DimensionConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionConfiguration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.DimensionConfiguration)
}
DimensionConfiguration::DimensionConfiguration(const DimensionConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      userdimensions_(from.userdimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timeconfig()) {
    timeconfig_ = new ::NS3::InternalDimension(*from.timeconfig_);
  } else {
    timeconfig_ = NULL;
  }
  if (from.has_distanceconfig()) {
    distanceconfig_ = new ::NS3::InternalDimension(*from.distanceconfig_);
  } else {
    distanceconfig_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NS3.DimensionConfiguration)
}

void DimensionConfiguration::SharedCtor() {
  ::memset(&timeconfig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distanceconfig_) -
      reinterpret_cast<char*>(&timeconfig_)) + sizeof(distanceconfig_));
}

DimensionConfiguration::~DimensionConfiguration() {
  // @@protoc_insertion_point(destructor:NS3.DimensionConfiguration)
  SharedDtor();
}

void DimensionConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete timeconfig_;
  if (this != internal_default_instance()) delete distanceconfig_;
}

void DimensionConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DimensionConfiguration::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DimensionConfiguration& DimensionConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionConfiguration.base);
  return *internal_default_instance();
}


void DimensionConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.DimensionConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userdimensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timeconfig_ != NULL);
      timeconfig_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(distanceconfig_ != NULL);
      distanceconfig_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DimensionConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.DimensionConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NS3.InternalDimension timeConfig = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NS3.InternalDimension distanceConfig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distanceconfig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.UserDimension userDimensions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_userdimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.DimensionConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.DimensionConfiguration)
  return false;
#undef DO_
}

void DimensionConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.DimensionConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NS3.InternalDimension timeConfig = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_timeconfig(), output);
  }

  // optional .NS3.InternalDimension distanceConfig = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_distanceconfig(), output);
  }

  // repeated .NS3.UserDimension userDimensions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->userdimensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->userdimensions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.DimensionConfiguration)
}

::google::protobuf::uint8* DimensionConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.DimensionConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NS3.InternalDimension timeConfig = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_timeconfig(), deterministic, target);
  }

  // optional .NS3.InternalDimension distanceConfig = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_distanceconfig(), deterministic, target);
  }

  // repeated .NS3.UserDimension userDimensions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->userdimensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->userdimensions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.DimensionConfiguration)
  return target;
}

size_t DimensionConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.DimensionConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NS3.UserDimension userDimensions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->userdimensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->userdimensions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .NS3.InternalDimension timeConfig = 1;
    if (has_timeconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timeconfig_);
    }

    // optional .NS3.InternalDimension distanceConfig = 2;
    if (has_distanceconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *distanceconfig_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.DimensionConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DimensionConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.DimensionConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.DimensionConfiguration)
    MergeFrom(*source);
  }
}

void DimensionConfiguration::MergeFrom(const DimensionConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.DimensionConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userdimensions_.MergeFrom(from.userdimensions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timeconfig()->::NS3::InternalDimension::MergeFrom(from.timeconfig());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_distanceconfig()->::NS3::InternalDimension::MergeFrom(from.distanceconfig());
    }
  }
}

void DimensionConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.DimensionConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionConfiguration::CopyFrom(const DimensionConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.DimensionConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionConfiguration::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->userdimensions())) return false;
  if (has_timeconfig()) {
    if (!this->timeconfig_->IsInitialized()) return false;
  }
  if (has_distanceconfig()) {
    if (!this->distanceconfig_->IsInitialized()) return false;
  }
  return true;
}

void DimensionConfiguration::Swap(DimensionConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionConfiguration::InternalSwap(DimensionConfiguration* other) {
  using std::swap;
  CastToBase(&userdimensions_)->InternalSwap(CastToBase(&other->userdimensions_));
  swap(timeconfig_, other->timeconfig_);
  swap(distanceconfig_, other->distanceconfig_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DimensionConfiguration::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Geocode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geocode::kLongitudeFieldNumber;
const int Geocode::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geocode::Geocode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Geocode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.Geocode)
}
Geocode::Geocode(const Geocode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:NS3.Geocode)
}

void Geocode::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

Geocode::~Geocode() {
  // @@protoc_insertion_point(destructor:NS3.Geocode)
  SharedDtor();
}

void Geocode::SharedDtor() {
}

void Geocode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Geocode::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geocode& Geocode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Geocode.base);
  return *internal_default_instance();
}


void Geocode::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.Geocode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Geocode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.Geocode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.Geocode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.Geocode)
  return false;
#undef DO_
}

void Geocode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.Geocode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->longitude(), output);
  }

  // required float latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.Geocode)
}

::google::protobuf::uint8* Geocode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.Geocode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->longitude(), target);
  }

  // required float latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.Geocode)
  return target;
}

size_t Geocode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.Geocode)
  size_t total_size = 0;

  if (has_longitude()) {
    // required float longitude = 1;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float latitude = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Geocode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.Geocode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float longitude = 1;
    total_size += 1 + 4;

    // required float latitude = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geocode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.Geocode)
  GOOGLE_DCHECK_NE(&from, this);
  const Geocode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geocode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.Geocode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.Geocode)
    MergeFrom(*source);
  }
}

void Geocode::MergeFrom(const Geocode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.Geocode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Geocode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.Geocode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geocode::CopyFrom(const Geocode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.Geocode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geocode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Geocode::Swap(Geocode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geocode::InternalSwap(Geocode* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Geocode::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnitDimensionCost::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitDimensionCost::kDimensionIdsFieldNumber;
const int UnitDimensionCost::kDimensionCoefficientsFieldNumber;
const int UnitDimensionCost::kCostPerUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitDimensionCost::UnitDimensionCost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UnitDimensionCost.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.UnitDimensionCost)
}
UnitDimensionCost::UnitDimensionCost(const UnitDimensionCost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dimensionids_(from.dimensionids_),
      dimensioncoefficients_(from.dimensioncoefficients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  costperunit_ = from.costperunit_;
  // @@protoc_insertion_point(copy_constructor:NS3.UnitDimensionCost)
}

void UnitDimensionCost::SharedCtor() {
  costperunit_ = 0;
}

UnitDimensionCost::~UnitDimensionCost() {
  // @@protoc_insertion_point(destructor:NS3.UnitDimensionCost)
  SharedDtor();
}

void UnitDimensionCost::SharedDtor() {
}

void UnitDimensionCost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnitDimensionCost::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnitDimensionCost& UnitDimensionCost::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_UnitDimensionCost.base);
  return *internal_default_instance();
}


void UnitDimensionCost::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.UnitDimensionCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensionids_.Clear();
  dimensioncoefficients_.Clear();
  costperunit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnitDimensionCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.UnitDimensionCost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dimensionIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dimensionids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dimensionids(this->dimensionids_size() - 1).data(),
            static_cast<int>(this->dimensionids(this->dimensionids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.UnitDimensionCost.dimensionIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float dimensionCoefficients = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_dimensioncoefficients())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dimensioncoefficients())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float costPerUnit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_costperunit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &costperunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.UnitDimensionCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.UnitDimensionCost)
  return false;
#undef DO_
}

void UnitDimensionCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.UnitDimensionCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimensionIds = 1;
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionids(i).data(), static_cast<int>(this->dimensionids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.UnitDimensionCost.dimensionIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dimensionids(i), output);
  }

  // repeated float dimensionCoefficients = 2;
  for (int i = 0, n = this->dimensioncoefficients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->dimensioncoefficients(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required float costPerUnit = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->costperunit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.UnitDimensionCost)
}

::google::protobuf::uint8* UnitDimensionCost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.UnitDimensionCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimensionIds = 1;
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionids(i).data(), static_cast<int>(this->dimensionids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.UnitDimensionCost.dimensionIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dimensionids(i), target);
  }

  // repeated float dimensionCoefficients = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->dimensioncoefficients_, target);

  cached_has_bits = _has_bits_[0];
  // required float costPerUnit = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->costperunit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.UnitDimensionCost)
  return target;
}

size_t UnitDimensionCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.UnitDimensionCost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float costPerUnit = 3;
  if (has_costperunit()) {
    total_size += 1 + 4;
  }
  // repeated string dimensionIds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dimensionids_size());
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dimensionids(i));
  }

  // repeated float dimensionCoefficients = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensioncoefficients_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dimensioncoefficients_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitDimensionCost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.UnitDimensionCost)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitDimensionCost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitDimensionCost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.UnitDimensionCost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.UnitDimensionCost)
    MergeFrom(*source);
  }
}

void UnitDimensionCost::MergeFrom(const UnitDimensionCost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.UnitDimensionCost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensionids_.MergeFrom(from.dimensionids_);
  dimensioncoefficients_.MergeFrom(from.dimensioncoefficients_);
  if (from.has_costperunit()) {
    set_costperunit(from.costperunit());
  }
}

void UnitDimensionCost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.UnitDimensionCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitDimensionCost::CopyFrom(const UnitDimensionCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.UnitDimensionCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitDimensionCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UnitDimensionCost::Swap(UnitDimensionCost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitDimensionCost::InternalSwap(UnitDimensionCost* other) {
  using std::swap;
  dimensionids_.InternalSwap(CastToBase(&other->dimensionids_));
  dimensioncoefficients_.InternalSwap(&other->dimensioncoefficients_);
  swap(costperunit_, other->costperunit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnitDimensionCost::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FixedDimensionCost::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedDimensionCost::kDimensionIdsFieldNumber;
const int FixedDimensionCost::kFixedCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedDimensionCost::FixedDimensionCost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FixedDimensionCost.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.FixedDimensionCost)
}
FixedDimensionCost::FixedDimensionCost(const FixedDimensionCost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dimensionids_(from.dimensionids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fixedcost_ = from.fixedcost_;
  // @@protoc_insertion_point(copy_constructor:NS3.FixedDimensionCost)
}

void FixedDimensionCost::SharedCtor() {
  fixedcost_ = 0;
}

FixedDimensionCost::~FixedDimensionCost() {
  // @@protoc_insertion_point(destructor:NS3.FixedDimensionCost)
  SharedDtor();
}

void FixedDimensionCost::SharedDtor() {
}

void FixedDimensionCost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FixedDimensionCost::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedDimensionCost& FixedDimensionCost::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FixedDimensionCost.base);
  return *internal_default_instance();
}


void FixedDimensionCost::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.FixedDimensionCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensionids_.Clear();
  fixedcost_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FixedDimensionCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.FixedDimensionCost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dimensionIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dimensionids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dimensionids(this->dimensionids_size() - 1).data(),
            static_cast<int>(this->dimensionids(this->dimensionids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.FixedDimensionCost.dimensionIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float fixedCost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_fixedcost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fixedcost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.FixedDimensionCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.FixedDimensionCost)
  return false;
#undef DO_
}

void FixedDimensionCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.FixedDimensionCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimensionIds = 1;
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionids(i).data(), static_cast<int>(this->dimensionids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.FixedDimensionCost.dimensionIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dimensionids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required float fixedCost = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fixedcost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.FixedDimensionCost)
}

::google::protobuf::uint8* FixedDimensionCost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.FixedDimensionCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimensionIds = 1;
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionids(i).data(), static_cast<int>(this->dimensionids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.FixedDimensionCost.dimensionIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dimensionids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required float fixedCost = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fixedcost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.FixedDimensionCost)
  return target;
}

size_t FixedDimensionCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.FixedDimensionCost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float fixedCost = 2;
  if (has_fixedcost()) {
    total_size += 1 + 4;
  }
  // repeated string dimensionIds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dimensionids_size());
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dimensionids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedDimensionCost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.FixedDimensionCost)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedDimensionCost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedDimensionCost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.FixedDimensionCost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.FixedDimensionCost)
    MergeFrom(*source);
  }
}

void FixedDimensionCost::MergeFrom(const FixedDimensionCost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.FixedDimensionCost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensionids_.MergeFrom(from.dimensionids_);
  if (from.has_fixedcost()) {
    set_fixedcost(from.fixedcost());
  }
}

void FixedDimensionCost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.FixedDimensionCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedDimensionCost::CopyFrom(const FixedDimensionCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.FixedDimensionCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedDimensionCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FixedDimensionCost::Swap(FixedDimensionCost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedDimensionCost::InternalSwap(FixedDimensionCost* other) {
  using std::swap;
  dimensionids_.InternalSwap(CastToBase(&other->dimensionids_));
  swap(fixedcost_, other->fixedcost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FixedDimensionCost::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowDimensionalConstraint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowDimensionalConstraint::kDimensionIdsFieldNumber;
const int FlowDimensionalConstraint::kDimensionCoefficientsFieldNumber;
const int FlowDimensionalConstraint::kFlowMinFieldNumber;
const int FlowDimensionalConstraint::kFlowMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowDimensionalConstraint::FlowDimensionalConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FlowDimensionalConstraint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.FlowDimensionalConstraint)
}
FlowDimensionalConstraint::FlowDimensionalConstraint(const FlowDimensionalConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dimensionids_(from.dimensionids_),
      dimensioncoefficients_(from.dimensioncoefficients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flowmin_, &from.flowmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&flowmax_) -
    reinterpret_cast<char*>(&flowmin_)) + sizeof(flowmax_));
  // @@protoc_insertion_point(copy_constructor:NS3.FlowDimensionalConstraint)
}

void FlowDimensionalConstraint::SharedCtor() {
  ::memset(&flowmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flowmax_) -
      reinterpret_cast<char*>(&flowmin_)) + sizeof(flowmax_));
}

FlowDimensionalConstraint::~FlowDimensionalConstraint() {
  // @@protoc_insertion_point(destructor:NS3.FlowDimensionalConstraint)
  SharedDtor();
}

void FlowDimensionalConstraint::SharedDtor() {
}

void FlowDimensionalConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowDimensionalConstraint::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowDimensionalConstraint& FlowDimensionalConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_FlowDimensionalConstraint.base);
  return *internal_default_instance();
}


void FlowDimensionalConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.FlowDimensionalConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensionids_.Clear();
  dimensioncoefficients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&flowmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flowmax_) -
        reinterpret_cast<char*>(&flowmin_)) + sizeof(flowmax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowDimensionalConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.FlowDimensionalConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dimensionIds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dimensionids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dimensionids(this->dimensionids_size() - 1).data(),
            static_cast<int>(this->dimensionids(this->dimensionids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.FlowDimensionalConstraint.dimensionIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float dimensionCoefficients = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_dimensioncoefficients())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dimensioncoefficients())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float flowMin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_flowmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flowmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float flowMax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_flowmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flowmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.FlowDimensionalConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.FlowDimensionalConstraint)
  return false;
#undef DO_
}

void FlowDimensionalConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.FlowDimensionalConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimensionIds = 1;
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionids(i).data(), static_cast<int>(this->dimensionids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.FlowDimensionalConstraint.dimensionIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dimensionids(i), output);
  }

  // repeated float dimensionCoefficients = 2;
  for (int i = 0, n = this->dimensioncoefficients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->dimensioncoefficients(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required float flowMin = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->flowmin(), output);
  }

  // required float flowMax = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->flowmax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.FlowDimensionalConstraint)
}

::google::protobuf::uint8* FlowDimensionalConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.FlowDimensionalConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimensionIds = 1;
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionids(i).data(), static_cast<int>(this->dimensionids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.FlowDimensionalConstraint.dimensionIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dimensionids(i), target);
  }

  // repeated float dimensionCoefficients = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->dimensioncoefficients_, target);

  cached_has_bits = _has_bits_[0];
  // required float flowMin = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->flowmin(), target);
  }

  // required float flowMax = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->flowmax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.FlowDimensionalConstraint)
  return target;
}

size_t FlowDimensionalConstraint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.FlowDimensionalConstraint)
  size_t total_size = 0;

  if (has_flowmin()) {
    // required float flowMin = 3;
    total_size += 1 + 4;
  }

  if (has_flowmax()) {
    // required float flowMax = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FlowDimensionalConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.FlowDimensionalConstraint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float flowMin = 3;
    total_size += 1 + 4;

    // required float flowMax = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string dimensionIds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dimensionids_size());
  for (int i = 0, n = this->dimensionids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dimensionids(i));
  }

  // repeated float dimensionCoefficients = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensioncoefficients_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dimensioncoefficients_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowDimensionalConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.FlowDimensionalConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowDimensionalConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowDimensionalConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.FlowDimensionalConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.FlowDimensionalConstraint)
    MergeFrom(*source);
  }
}

void FlowDimensionalConstraint::MergeFrom(const FlowDimensionalConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.FlowDimensionalConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensionids_.MergeFrom(from.dimensionids_);
  dimensioncoefficients_.MergeFrom(from.dimensioncoefficients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      flowmin_ = from.flowmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      flowmax_ = from.flowmax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowDimensionalConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.FlowDimensionalConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowDimensionalConstraint::CopyFrom(const FlowDimensionalConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.FlowDimensionalConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowDimensionalConstraint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FlowDimensionalConstraint::Swap(FlowDimensionalConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowDimensionalConstraint::InternalSwap(FlowDimensionalConstraint* other) {
  using std::swap;
  dimensionids_.InternalSwap(CastToBase(&other->dimensionids_));
  dimensioncoefficients_.InternalSwap(&other->dimensioncoefficients_);
  swap(flowmin_, other->flowmin_);
  swap(flowmax_, other->flowmax_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowDimensionalConstraint::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DimensionRange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionRange::kDimensionIdFieldNumber;
const int DimensionRange::kMinRangeFieldNumber;
const int DimensionRange::kMaxRangeFieldNumber;
const int DimensionRange::kFlowPenaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionRange::DimensionRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionRange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.DimensionRange)
}
DimensionRange::DimensionRange(const DimensionRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimensionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dimensionid()) {
    dimensionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimensionid_);
  }
  ::memcpy(&minrange_, &from.minrange_,
    static_cast<size_t>(reinterpret_cast<char*>(&flowpenalty_) -
    reinterpret_cast<char*>(&minrange_)) + sizeof(flowpenalty_));
  // @@protoc_insertion_point(copy_constructor:NS3.DimensionRange)
}

void DimensionRange::SharedCtor() {
  dimensionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&minrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flowpenalty_) -
      reinterpret_cast<char*>(&minrange_)) + sizeof(flowpenalty_));
}

DimensionRange::~DimensionRange() {
  // @@protoc_insertion_point(destructor:NS3.DimensionRange)
  SharedDtor();
}

void DimensionRange::SharedDtor() {
  dimensionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DimensionRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DimensionRange::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DimensionRange& DimensionRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_DimensionRange.base);
  return *internal_default_instance();
}


void DimensionRange::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.DimensionRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dimensionid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&minrange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flowpenalty_) -
        reinterpret_cast<char*>(&minrange_)) + sizeof(flowpenalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DimensionRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.DimensionRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dimensionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dimensionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dimensionid().data(), static_cast<int>(this->dimensionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.DimensionRange.dimensionId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float minRange = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_minrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxRange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_maxrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float flowPenalty = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_flowpenalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flowpenalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.DimensionRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.DimensionRange)
  return false;
#undef DO_
}

void DimensionRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.DimensionRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string dimensionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionid().data(), static_cast<int>(this->dimensionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.DimensionRange.dimensionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dimensionid(), output);
  }

  // required float minRange = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->minrange(), output);
  }

  // required float maxRange = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxrange(), output);
  }

  // required float flowPenalty = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->flowpenalty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.DimensionRange)
}

::google::protobuf::uint8* DimensionRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.DimensionRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string dimensionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dimensionid().data(), static_cast<int>(this->dimensionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.DimensionRange.dimensionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dimensionid(), target);
  }

  // required float minRange = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->minrange(), target);
  }

  // required float maxRange = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxrange(), target);
  }

  // required float flowPenalty = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->flowpenalty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.DimensionRange)
  return target;
}

size_t DimensionRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.DimensionRange)
  size_t total_size = 0;

  if (has_dimensionid()) {
    // required string dimensionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dimensionid());
  }

  if (has_minrange()) {
    // required float minRange = 2 [default = 0];
    total_size += 1 + 4;
  }

  if (has_maxrange()) {
    // required float maxRange = 3;
    total_size += 1 + 4;
  }

  if (has_flowpenalty()) {
    // required float flowPenalty = 4 [default = 0];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t DimensionRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.DimensionRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string dimensionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dimensionid());

    // required float minRange = 2 [default = 0];
    total_size += 1 + 4;

    // required float maxRange = 3;
    total_size += 1 + 4;

    // required float flowPenalty = 4 [default = 0];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.DimensionRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DimensionRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.DimensionRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.DimensionRange)
    MergeFrom(*source);
  }
}

void DimensionRange::MergeFrom(const DimensionRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.DimensionRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dimensionid();
      dimensionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimensionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      minrange_ = from.minrange_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxrange_ = from.maxrange_;
    }
    if (cached_has_bits & 0x00000008u) {
      flowpenalty_ = from.flowpenalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DimensionRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.DimensionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionRange::CopyFrom(const DimensionRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.DimensionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void DimensionRange::Swap(DimensionRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionRange::InternalSwap(DimensionRange* other) {
  using std::swap;
  dimensionid_.Swap(&other->dimensionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(minrange_, other->minrange_);
  swap(maxrange_, other->maxrange_);
  swap(flowpenalty_, other->flowpenalty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DimensionRange::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node_ProductFlow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_ProductFlow::kProductIdFieldNumber;
const int Node_ProductFlow::kDimensionRangesFieldNumber;
const int Node_ProductFlow::kFixedDimensionCostsFieldNumber;
const int Node_ProductFlow::kUnitDimensionCostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_ProductFlow::Node_ProductFlow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductFlow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.Node.ProductFlow)
}
Node_ProductFlow::Node_ProductFlow(const Node_ProductFlow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dimensionranges_(from.dimensionranges_),
      fixeddimensioncosts_(from.fixeddimensioncosts_),
      unitdimensioncosts_(from.unitdimensioncosts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  // @@protoc_insertion_point(copy_constructor:NS3.Node.ProductFlow)
}

void Node_ProductFlow::SharedCtor() {
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Node_ProductFlow::~Node_ProductFlow() {
  // @@protoc_insertion_point(destructor:NS3.Node.ProductFlow)
  SharedDtor();
}

void Node_ProductFlow::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node_ProductFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node_ProductFlow::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node_ProductFlow& Node_ProductFlow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductFlow.base);
  return *internal_default_instance();
}


void Node_ProductFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.Node.ProductFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensionranges_.Clear();
  fixeddimensioncosts_.Clear();
  unitdimensioncosts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    productid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node_ProductFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.Node.ProductFlow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string productId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.Node.ProductFlow.productId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.DimensionRange dimensionRanges = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimensionranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fixeddimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unitdimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.Node.ProductFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.Node.ProductFlow)
  return false;
#undef DO_
}

void Node_ProductFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.Node.ProductFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.ProductFlow.productId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // repeated .NS3.DimensionRange dimensionRanges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensionranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dimensionranges(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixeddimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->fixeddimensioncosts(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->unitdimensioncosts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.Node.ProductFlow)
}

::google::protobuf::uint8* Node_ProductFlow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.Node.ProductFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.ProductFlow.productId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // repeated .NS3.DimensionRange dimensionRanges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensionranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dimensionranges(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixeddimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->fixeddimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->unitdimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.Node.ProductFlow)
  return target;
}

size_t Node_ProductFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.Node.ProductFlow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string productId = 1;
  if (has_productid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }
  // repeated .NS3.DimensionRange dimensionRanges = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensionranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimensionranges(static_cast<int>(i)));
    }
  }

  // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fixeddimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fixeddimensioncosts(static_cast<int>(i)));
    }
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->unitdimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unitdimensioncosts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_ProductFlow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.Node.ProductFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_ProductFlow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node_ProductFlow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.Node.ProductFlow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.Node.ProductFlow)
    MergeFrom(*source);
  }
}

void Node_ProductFlow::MergeFrom(const Node_ProductFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.Node.ProductFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensionranges_.MergeFrom(from.dimensionranges_);
  fixeddimensioncosts_.MergeFrom(from.fixeddimensioncosts_);
  unitdimensioncosts_.MergeFrom(from.unitdimensioncosts_);
  if (from.has_productid()) {
    set_has_productid();
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
}

void Node_ProductFlow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.Node.ProductFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_ProductFlow::CopyFrom(const Node_ProductFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.Node.ProductFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_ProductFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dimensionranges())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fixeddimensioncosts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unitdimensioncosts())) return false;
  return true;
}

void Node_ProductFlow::Swap(Node_ProductFlow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_ProductFlow::InternalSwap(Node_ProductFlow* other) {
  using std::swap;
  CastToBase(&dimensionranges_)->InternalSwap(CastToBase(&other->dimensionranges_));
  CastToBase(&fixeddimensioncosts_)->InternalSwap(CastToBase(&other->fixeddimensioncosts_));
  CastToBase(&unitdimensioncosts_)->InternalSwap(CastToBase(&other->unitdimensioncosts_));
  productid_.Swap(&other->productid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node_ProductFlow::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node_Flow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Flow::kDimensionRangesFieldNumber;
const int Node_Flow::kFixedDimensionCostsFieldNumber;
const int Node_Flow::kUnitDimensionCostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Flow::Node_Flow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_Flow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.Node.Flow)
}
Node_Flow::Node_Flow(const Node_Flow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dimensionranges_(from.dimensionranges_),
      fixeddimensioncosts_(from.fixeddimensioncosts_),
      unitdimensioncosts_(from.unitdimensioncosts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NS3.Node.Flow)
}

void Node_Flow::SharedCtor() {
}

Node_Flow::~Node_Flow() {
  // @@protoc_insertion_point(destructor:NS3.Node.Flow)
  SharedDtor();
}

void Node_Flow::SharedDtor() {
}

void Node_Flow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node_Flow::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node_Flow& Node_Flow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_Flow.base);
  return *internal_default_instance();
}


void Node_Flow::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.Node.Flow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensionranges_.Clear();
  fixeddimensioncosts_.Clear();
  unitdimensioncosts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node_Flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.Node.Flow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NS3.DimensionRange dimensionRanges = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimensionranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fixeddimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.UnitDimensionCost unitDimensionCosts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unitdimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.Node.Flow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.Node.Flow)
  return false;
#undef DO_
}

void Node_Flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.Node.Flow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NS3.DimensionRange dimensionRanges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensionranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dimensionranges(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixeddimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->fixeddimensioncosts(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->unitdimensioncosts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.Node.Flow)
}

::google::protobuf::uint8* Node_Flow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.Node.Flow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NS3.DimensionRange dimensionRanges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensionranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dimensionranges(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixeddimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->fixeddimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->unitdimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.Node.Flow)
  return target;
}

size_t Node_Flow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.Node.Flow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NS3.DimensionRange dimensionRanges = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensionranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimensionranges(static_cast<int>(i)));
    }
  }

  // repeated .NS3.FixedDimensionCost FixedDimensionCosts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fixeddimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fixeddimensioncosts(static_cast<int>(i)));
    }
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->unitdimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unitdimensioncosts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_Flow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.Node.Flow)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_Flow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node_Flow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.Node.Flow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.Node.Flow)
    MergeFrom(*source);
  }
}

void Node_Flow::MergeFrom(const Node_Flow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.Node.Flow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensionranges_.MergeFrom(from.dimensionranges_);
  fixeddimensioncosts_.MergeFrom(from.fixeddimensioncosts_);
  unitdimensioncosts_.MergeFrom(from.unitdimensioncosts_);
}

void Node_Flow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.Node.Flow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_Flow::CopyFrom(const Node_Flow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.Node.Flow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Flow::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->dimensionranges())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fixeddimensioncosts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unitdimensioncosts())) return false;
  return true;
}

void Node_Flow::Swap(Node_Flow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Flow::InternalSwap(Node_Flow* other) {
  using std::swap;
  CastToBase(&dimensionranges_)->InternalSwap(CastToBase(&other->dimensionranges_));
  CastToBase(&fixeddimensioncosts_)->InternalSwap(CastToBase(&other->fixeddimensioncosts_));
  CastToBase(&unitdimensioncosts_)->InternalSwap(CastToBase(&other->unitdimensioncosts_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node_Flow::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node_ProductTransform_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_ProductTransform_Item::kProductIdFieldNumber;
const int Node_ProductTransform_Item::kProductRatioFieldNumber;
const int Node_ProductTransform_Item::kDimensionRangesFieldNumber;
const int Node_ProductTransform_Item::kFixedDimensionCostsFieldNumber;
const int Node_ProductTransform_Item::kUnitDimensionCostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_ProductTransform_Item::Node_ProductTransform_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductTransform_Item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.Node.ProductTransform.Item)
}
Node_ProductTransform_Item::Node_ProductTransform_Item(const Node_ProductTransform_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dimensionranges_(from.dimensionranges_),
      fixeddimensioncosts_(from.fixeddimensioncosts_),
      unitdimensioncosts_(from.unitdimensioncosts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  productratio_ = from.productratio_;
  // @@protoc_insertion_point(copy_constructor:NS3.Node.ProductTransform.Item)
}

void Node_ProductTransform_Item::SharedCtor() {
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productratio_ = 0;
}

Node_ProductTransform_Item::~Node_ProductTransform_Item() {
  // @@protoc_insertion_point(destructor:NS3.Node.ProductTransform.Item)
  SharedDtor();
}

void Node_ProductTransform_Item::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node_ProductTransform_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node_ProductTransform_Item::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node_ProductTransform_Item& Node_ProductTransform_Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductTransform_Item.base);
  return *internal_default_instance();
}


void Node_ProductTransform_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.Node.ProductTransform.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensionranges_.Clear();
  fixeddimensioncosts_.Clear();
  unitdimensioncosts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    productid_.ClearNonDefaultToEmptyNoArena();
  }
  productratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node_ProductTransform_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.Node.ProductTransform.Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string productId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.Node.ProductTransform.Item.productId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 productRatio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_productratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.DimensionRange dimensionRanges = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimensionranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.FixedDimensionCost fixedDimensionCosts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fixeddimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.UnitDimensionCost unitDimensionCosts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unitdimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.Node.ProductTransform.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.Node.ProductTransform.Item)
  return false;
#undef DO_
}

void Node_ProductTransform_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.Node.ProductTransform.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.ProductTransform.Item.productId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // required int32 productRatio = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productratio(), output);
  }

  // repeated .NS3.DimensionRange dimensionRanges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensionranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->dimensionranges(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.FixedDimensionCost fixedDimensionCosts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixeddimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->fixeddimensioncosts(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->unitdimensioncosts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.Node.ProductTransform.Item)
}

::google::protobuf::uint8* Node_ProductTransform_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.Node.ProductTransform.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.ProductTransform.Item.productId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // required int32 productRatio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productratio(), target);
  }

  // repeated .NS3.DimensionRange dimensionRanges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensionranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->dimensionranges(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.FixedDimensionCost fixedDimensionCosts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fixeddimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->fixeddimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->unitdimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.Node.ProductTransform.Item)
  return target;
}

size_t Node_ProductTransform_Item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.Node.ProductTransform.Item)
  size_t total_size = 0;

  if (has_productid()) {
    // required string productId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_productratio()) {
    // required int32 productRatio = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->productratio());
  }

  return total_size;
}
size_t Node_ProductTransform_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.Node.ProductTransform.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string productId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required int32 productRatio = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->productratio());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NS3.DimensionRange dimensionRanges = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensionranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimensionranges(static_cast<int>(i)));
    }
  }

  // repeated .NS3.FixedDimensionCost fixedDimensionCosts = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->fixeddimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fixeddimensioncosts(static_cast<int>(i)));
    }
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->unitdimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unitdimensioncosts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_ProductTransform_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.Node.ProductTransform.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_ProductTransform_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node_ProductTransform_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.Node.ProductTransform.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.Node.ProductTransform.Item)
    MergeFrom(*source);
  }
}

void Node_ProductTransform_Item::MergeFrom(const Node_ProductTransform_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.Node.ProductTransform.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensionranges_.MergeFrom(from.dimensionranges_);
  fixeddimensioncosts_.MergeFrom(from.fixeddimensioncosts_);
  unitdimensioncosts_.MergeFrom(from.unitdimensioncosts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      productratio_ = from.productratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Node_ProductTransform_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.Node.ProductTransform.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_ProductTransform_Item::CopyFrom(const Node_ProductTransform_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.Node.ProductTransform.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_ProductTransform_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dimensionranges())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fixeddimensioncosts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unitdimensioncosts())) return false;
  return true;
}

void Node_ProductTransform_Item::Swap(Node_ProductTransform_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_ProductTransform_Item::InternalSwap(Node_ProductTransform_Item* other) {
  using std::swap;
  CastToBase(&dimensionranges_)->InternalSwap(CastToBase(&other->dimensionranges_));
  CastToBase(&fixeddimensioncosts_)->InternalSwap(CastToBase(&other->fixeddimensioncosts_));
  CastToBase(&unitdimensioncosts_)->InternalSwap(CastToBase(&other->unitdimensioncosts_));
  productid_.Swap(&other->productid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(productratio_, other->productratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node_ProductTransform_Item::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node_ProductTransform::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_ProductTransform::kInputItemsFieldNumber;
const int Node_ProductTransform::kOutputItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_ProductTransform::Node_ProductTransform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductTransform.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.Node.ProductTransform)
}
Node_ProductTransform::Node_ProductTransform(const Node_ProductTransform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      inputitems_(from.inputitems_),
      outputitems_(from.outputitems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NS3.Node.ProductTransform)
}

void Node_ProductTransform::SharedCtor() {
}

Node_ProductTransform::~Node_ProductTransform() {
  // @@protoc_insertion_point(destructor:NS3.Node.ProductTransform)
  SharedDtor();
}

void Node_ProductTransform::SharedDtor() {
}

void Node_ProductTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node_ProductTransform::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node_ProductTransform& Node_ProductTransform::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node_ProductTransform.base);
  return *internal_default_instance();
}


void Node_ProductTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.Node.ProductTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputitems_.Clear();
  outputitems_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node_ProductTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.Node.ProductTransform)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NS3.Node.ProductTransform.Item inputItems = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputitems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.Node.ProductTransform.Item outputItems = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputitems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.Node.ProductTransform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.Node.ProductTransform)
  return false;
#undef DO_
}

void Node_ProductTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.Node.ProductTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NS3.Node.ProductTransform.Item inputItems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputitems_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->inputitems(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.Node.ProductTransform.Item outputItems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputitems_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->outputitems(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.Node.ProductTransform)
}

::google::protobuf::uint8* Node_ProductTransform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.Node.ProductTransform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NS3.Node.ProductTransform.Item inputItems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputitems_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->inputitems(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.Node.ProductTransform.Item outputItems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputitems_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->outputitems(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.Node.ProductTransform)
  return target;
}

size_t Node_ProductTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.Node.ProductTransform)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NS3.Node.ProductTransform.Item inputItems = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inputitems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputitems(static_cast<int>(i)));
    }
  }

  // repeated .NS3.Node.ProductTransform.Item outputItems = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->outputitems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputitems(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_ProductTransform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.Node.ProductTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_ProductTransform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node_ProductTransform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.Node.ProductTransform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.Node.ProductTransform)
    MergeFrom(*source);
  }
}

void Node_ProductTransform::MergeFrom(const Node_ProductTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.Node.ProductTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputitems_.MergeFrom(from.inputitems_);
  outputitems_.MergeFrom(from.outputitems_);
}

void Node_ProductTransform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.Node.ProductTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_ProductTransform::CopyFrom(const Node_ProductTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.Node.ProductTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_ProductTransform::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->inputitems())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->outputitems())) return false;
  return true;
}

void Node_ProductTransform::Swap(Node_ProductTransform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_ProductTransform::InternalSwap(Node_ProductTransform* other) {
  using std::swap;
  CastToBase(&inputitems_)->InternalSwap(CastToBase(&other->inputitems_));
  CastToBase(&outputitems_)->InternalSwap(CastToBase(&other->outputitems_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node_ProductTransform::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::NS3::_Node_default_instance_._instance.get_mutable()->geocode_ = const_cast< ::NS3::Geocode*>(
      ::NS3::Geocode::internal_default_instance());
  ::NS3::_Node_default_instance_._instance.get_mutable()->flow_ = const_cast< ::NS3::Node_Flow*>(
      ::NS3::Node_Flow::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kGeocodeFieldNumber;
const int Node::kProductionFieldNumber;
const int Node::kConsumptionFieldNumber;
const int Node::kFlowFieldNumber;
const int Node::kProductFlowsFieldNumber;
const int Node::kAllowableSourcesFieldNumber;
const int Node::kMaximumSourcesFieldNumber;
const int Node::kFlowConstraintsFieldNumber;
const int Node::kProductTransformsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      production_(from.production_),
      consumption_(from.consumption_),
      productflows_(from.productflows_),
      allowablesources_(from.allowablesources_),
      flowconstraints_(from.flowconstraints_),
      producttransforms_(from.producttransforms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_geocode()) {
    geocode_ = new ::NS3::Geocode(*from.geocode_);
  } else {
    geocode_ = NULL;
  }
  if (from.has_flow()) {
    flow_ = new ::NS3::Node_Flow(*from.flow_);
  } else {
    flow_ = NULL;
  }
  maximumsources_ = from.maximumsources_;
  // @@protoc_insertion_point(copy_constructor:NS3.Node)
}

void Node::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&geocode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flow_) -
      reinterpret_cast<char*>(&geocode_)) + sizeof(flow_));
  maximumsources_ = -1;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:NS3.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geocode_;
  if (this != internal_default_instance()) delete flow_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Node.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  production_.Clear();
  consumption_.Clear();
  productflows_.Clear();
  allowablesources_.Clear();
  flowconstraints_.Clear();
  producttransforms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(geocode_ != NULL);
      geocode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(flow_ != NULL);
      flow_->Clear();
    }
    maximumsources_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.Node.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NS3.Geocode geocode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geocode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.Node.ProductFlow production = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_production()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.Node.ProductFlow consumption = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_consumption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NS3.Node.Flow flow = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.Node.ProductFlow productFlows = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_productflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string allowableSources = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allowablesources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allowablesources(this->allowablesources_size() - 1).data(),
            static_cast<int>(this->allowablesources(this->allowablesources_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.Node.allowableSources");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximumSources = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_maximumsources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximumsources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.FlowDimensionalConstraint flowConstraints = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_flowconstraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.Node.ProductTransform productTransforms = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_producttransforms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .NS3.Geocode geocode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_geocode(), output);
  }

  // repeated .NS3.Node.ProductFlow production = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->production_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->production(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.Node.ProductFlow consumption = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumption_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->consumption(static_cast<int>(i)),
      output);
  }

  // optional .NS3.Node.Flow flow = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_flow(), output);
  }

  // repeated .NS3.Node.ProductFlow productFlows = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->productflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->productflows(static_cast<int>(i)),
      output);
  }

  // repeated string allowableSources = 7;
  for (int i = 0, n = this->allowablesources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowablesources(i).data(), static_cast<int>(this->allowablesources(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.allowableSources");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->allowablesources(i), output);
  }

  // optional int32 maximumSources = 8 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maximumsources(), output);
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flowconstraints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->flowconstraints(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.Node.ProductTransform productTransforms = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->producttransforms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->producttransforms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .NS3.Geocode geocode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_geocode(), deterministic, target);
  }

  // repeated .NS3.Node.ProductFlow production = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->production_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->production(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.Node.ProductFlow consumption = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumption_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->consumption(static_cast<int>(i)), deterministic, target);
  }

  // optional .NS3.Node.Flow flow = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_flow(), deterministic, target);
  }

  // repeated .NS3.Node.ProductFlow productFlows = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->productflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->productflows(static_cast<int>(i)), deterministic, target);
  }

  // repeated string allowableSources = 7;
  for (int i = 0, n = this->allowablesources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowablesources(i).data(), static_cast<int>(this->allowablesources(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.Node.allowableSources");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->allowablesources(i), target);
  }

  // optional int32 maximumSources = 8 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maximumsources(), target);
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flowconstraints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->flowconstraints(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.Node.ProductTransform productTransforms = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->producttransforms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->producttransforms(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.Node)
  return target;
}

size_t Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.Node)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_geocode()) {
    // required .NS3.Geocode geocode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geocode_);
  }

  return total_size;
}
size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .NS3.Geocode geocode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geocode_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NS3.Node.ProductFlow production = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->production_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->production(static_cast<int>(i)));
    }
  }

  // repeated .NS3.Node.ProductFlow consumption = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->consumption_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->consumption(static_cast<int>(i)));
    }
  }

  // repeated .NS3.Node.ProductFlow productFlows = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->productflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->productflows(static_cast<int>(i)));
    }
  }

  // repeated string allowableSources = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allowablesources_size());
  for (int i = 0, n = this->allowablesources_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allowablesources(i));
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->flowconstraints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->flowconstraints(static_cast<int>(i)));
    }
  }

  // repeated .NS3.Node.ProductTransform productTransforms = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->producttransforms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->producttransforms(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .NS3.Node.Flow flow = 5;
    if (has_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *flow_);
    }

    // optional int32 maximumSources = 8 [default = -1];
    if (has_maximumsources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximumsources());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  production_.MergeFrom(from.production_);
  consumption_.MergeFrom(from.consumption_);
  productflows_.MergeFrom(from.productflows_);
  allowablesources_.MergeFrom(from.allowablesources_);
  flowconstraints_.MergeFrom(from.flowconstraints_);
  producttransforms_.MergeFrom(from.producttransforms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_geocode()->::NS3::Geocode::MergeFrom(from.geocode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_flow()->::NS3::Node_Flow::MergeFrom(from.flow());
    }
    if (cached_has_bits & 0x00000008u) {
      maximumsources_ = from.maximumsources_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->production())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->consumption())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->productflows())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->flowconstraints())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->producttransforms())) return false;
  if (has_geocode()) {
    if (!this->geocode_->IsInitialized()) return false;
  }
  if (has_flow()) {
    if (!this->flow_->IsInitialized()) return false;
  }
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  CastToBase(&production_)->InternalSwap(CastToBase(&other->production_));
  CastToBase(&consumption_)->InternalSwap(CastToBase(&other->consumption_));
  CastToBase(&productflows_)->InternalSwap(CastToBase(&other->productflows_));
  allowablesources_.InternalSwap(CastToBase(&other->allowablesources_));
  CastToBase(&flowconstraints_)->InternalSwap(CastToBase(&other->flowconstraints_));
  CastToBase(&producttransforms_)->InternalSwap(CastToBase(&other->producttransforms_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(geocode_, other->geocode_);
  swap(flow_, other->flow_);
  swap(maximumsources_, other->maximumsources_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProductGroup_ProductSpecification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductGroup_ProductSpecification::kBaseDimensionFieldNumber;
const int ProductGroup_ProductSpecification::kTargetDimensionFieldNumber;
const int ProductGroup_ProductSpecification::kTargetPerBaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductGroup_ProductSpecification::ProductGroup_ProductSpecification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_ProductGroup_ProductSpecification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.ProductGroup.ProductSpecification)
}
ProductGroup_ProductSpecification::ProductGroup_ProductSpecification(const ProductGroup_ProductSpecification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      targetdimension_(from.targetdimension_),
      targetperbase_(from.targetperbase_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  basedimension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_basedimension()) {
    basedimension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basedimension_);
  }
  // @@protoc_insertion_point(copy_constructor:NS3.ProductGroup.ProductSpecification)
}

void ProductGroup_ProductSpecification::SharedCtor() {
  basedimension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProductGroup_ProductSpecification::~ProductGroup_ProductSpecification() {
  // @@protoc_insertion_point(destructor:NS3.ProductGroup.ProductSpecification)
  SharedDtor();
}

void ProductGroup_ProductSpecification::SharedDtor() {
  basedimension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProductGroup_ProductSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProductGroup_ProductSpecification::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProductGroup_ProductSpecification& ProductGroup_ProductSpecification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_ProductGroup_ProductSpecification.base);
  return *internal_default_instance();
}


void ProductGroup_ProductSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.ProductGroup.ProductSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetdimension_.Clear();
  targetperbase_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    basedimension_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProductGroup_ProductSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.ProductGroup.ProductSpecification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string baseDimension = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basedimension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->basedimension().data(), static_cast<int>(this->basedimension().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.ProductGroup.ProductSpecification.baseDimension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string targetDimension = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_targetdimension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetdimension(this->targetdimension_size() - 1).data(),
            static_cast<int>(this->targetdimension(this->targetdimension_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.ProductGroup.ProductSpecification.targetDimension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float targetPerBase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_targetperbase())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_targetperbase())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.ProductGroup.ProductSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.ProductGroup.ProductSpecification)
  return false;
#undef DO_
}

void ProductGroup_ProductSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.ProductGroup.ProductSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string baseDimension = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basedimension().data(), static_cast<int>(this->basedimension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.ProductSpecification.baseDimension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->basedimension(), output);
  }

  // repeated string targetDimension = 2;
  for (int i = 0, n = this->targetdimension_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetdimension(i).data(), static_cast<int>(this->targetdimension(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.ProductSpecification.targetDimension");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->targetdimension(i), output);
  }

  // repeated float targetPerBase = 3;
  for (int i = 0, n = this->targetperbase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->targetperbase(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.ProductGroup.ProductSpecification)
}

::google::protobuf::uint8* ProductGroup_ProductSpecification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.ProductGroup.ProductSpecification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string baseDimension = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basedimension().data(), static_cast<int>(this->basedimension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.ProductSpecification.baseDimension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->basedimension(), target);
  }

  // repeated string targetDimension = 2;
  for (int i = 0, n = this->targetdimension_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetdimension(i).data(), static_cast<int>(this->targetdimension(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.ProductSpecification.targetDimension");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->targetdimension(i), target);
  }

  // repeated float targetPerBase = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->targetperbase_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.ProductGroup.ProductSpecification)
  return target;
}

size_t ProductGroup_ProductSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.ProductGroup.ProductSpecification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string baseDimension = 1;
  if (has_basedimension()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basedimension());
  }
  // repeated string targetDimension = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->targetdimension_size());
  for (int i = 0, n = this->targetdimension_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->targetdimension(i));
  }

  // repeated float targetPerBase = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->targetperbase_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->targetperbase_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductGroup_ProductSpecification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.ProductGroup.ProductSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductGroup_ProductSpecification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductGroup_ProductSpecification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.ProductGroup.ProductSpecification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.ProductGroup.ProductSpecification)
    MergeFrom(*source);
  }
}

void ProductGroup_ProductSpecification::MergeFrom(const ProductGroup_ProductSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.ProductGroup.ProductSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetdimension_.MergeFrom(from.targetdimension_);
  targetperbase_.MergeFrom(from.targetperbase_);
  if (from.has_basedimension()) {
    set_has_basedimension();
    basedimension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basedimension_);
  }
}

void ProductGroup_ProductSpecification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.ProductGroup.ProductSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductGroup_ProductSpecification::CopyFrom(const ProductGroup_ProductSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.ProductGroup.ProductSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductGroup_ProductSpecification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ProductGroup_ProductSpecification::Swap(ProductGroup_ProductSpecification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductGroup_ProductSpecification::InternalSwap(ProductGroup_ProductSpecification* other) {
  using std::swap;
  targetdimension_.InternalSwap(CastToBase(&other->targetdimension_));
  targetperbase_.InternalSwap(&other->targetperbase_);
  basedimension_.Swap(&other->basedimension_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProductGroup_ProductSpecification::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProductGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductGroup::kProductIdFieldNumber;
const int ProductGroup::kProductGroupIdFieldNumber;
const int ProductGroup::kProductSpecificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductGroup::ProductGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_ProductGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.ProductGroup)
}
ProductGroup::ProductGroup(const ProductGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      productspecification_(from.productspecification_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  productgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productgroupid()) {
    productgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productgroupid_);
  }
  // @@protoc_insertion_point(copy_constructor:NS3.ProductGroup)
}

void ProductGroup::SharedCtor() {
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProductGroup::~ProductGroup() {
  // @@protoc_insertion_point(destructor:NS3.ProductGroup)
  SharedDtor();
}

void ProductGroup::SharedDtor() {
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProductGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProductGroup::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProductGroup& ProductGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_ProductGroup.base);
  return *internal_default_instance();
}


void ProductGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.ProductGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  productspecification_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      productid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      productgroupid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProductGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.ProductGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string productId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.ProductGroup.productId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string productGroupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productgroupid().data(), static_cast<int>(this->productgroupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.ProductGroup.productGroupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.ProductGroup.ProductSpecification productSpecification = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_productspecification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.ProductGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.ProductGroup)
  return false;
#undef DO_
}

void ProductGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.ProductGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.productId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->productid(), output);
  }

  // required string productGroupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productgroupid().data(), static_cast<int>(this->productgroupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.productGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productgroupid(), output);
  }

  // repeated .NS3.ProductGroup.ProductSpecification productSpecification = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->productspecification_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->productspecification(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.ProductGroup)
}

::google::protobuf::uint8* ProductGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.ProductGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.productId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // required string productGroupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productgroupid().data(), static_cast<int>(this->productgroupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.ProductGroup.productGroupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productgroupid(), target);
  }

  // repeated .NS3.ProductGroup.ProductSpecification productSpecification = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->productspecification_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->productspecification(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.ProductGroup)
  return target;
}

size_t ProductGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.ProductGroup)
  size_t total_size = 0;

  if (has_productid()) {
    // required string productId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_productgroupid()) {
    // required string productGroupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productgroupid());
  }

  return total_size;
}
size_t ProductGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.ProductGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string productId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required string productGroupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productgroupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NS3.ProductGroup.ProductSpecification productSpecification = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->productspecification_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->productspecification(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.ProductGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.ProductGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.ProductGroup)
    MergeFrom(*source);
  }
}

void ProductGroup::MergeFrom(const ProductGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.ProductGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  productspecification_.MergeFrom(from.productspecification_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_productgroupid();
      productgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productgroupid_);
    }
  }
}

void ProductGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.ProductGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductGroup::CopyFrom(const ProductGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.ProductGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->productspecification())) return false;
  return true;
}

void ProductGroup::Swap(ProductGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductGroup::InternalSwap(ProductGroup* other) {
  using std::swap;
  CastToBase(&productspecification_)->InternalSwap(CastToBase(&other->productspecification_));
  productid_.Swap(&other->productid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  productgroupid_.Swap(&other->productgroupid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProductGroup::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneRate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneRate::kIdFieldNumber;
const int LaneRate::kSourceFieldNumber;
const int LaneRate::kDestinationFieldNumber;
const int LaneRate::kProductIdsFieldNumber;
const int LaneRate::kProductGroupIdsFieldNumber;
const int LaneRate::kUnitDimensionCostsFieldNumber;
const int LaneRate::kFlowConstraintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneRate::LaneRate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_LaneRate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.LaneRate)
}
LaneRate::LaneRate(const LaneRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      productids_(from.productids_),
      productgroupids_(from.productgroupids_),
      unitdimensioncosts_(from.unitdimensioncosts_),
      flowconstraints_(from.flowconstraints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination()) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  // @@protoc_insertion_point(copy_constructor:NS3.LaneRate)
}

void LaneRate::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LaneRate::~LaneRate() {
  // @@protoc_insertion_point(destructor:NS3.LaneRate)
  SharedDtor();
}

void LaneRate::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneRate::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneRate& LaneRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_LaneRate.base);
  return *internal_default_instance();
}


void LaneRate::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.LaneRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  productids_.Clear();
  productgroupids_.Clear();
  unitdimensioncosts_.Clear();
  flowconstraints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      destination_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.LaneRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.LaneRate.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.LaneRate.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string destination = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.LaneRate.destination");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string productIds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productids(this->productids_size() - 1).data(),
            static_cast<int>(this->productids(this->productids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.LaneRate.productIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string productGroupIds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productgroupids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productgroupids(this->productgroupids_size() - 1).data(),
            static_cast<int>(this->productgroupids(this->productgroupids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.LaneRate.productGroupIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.UnitDimensionCost unitDimensionCosts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unitdimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.FlowDimensionalConstraint flowConstraints = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_flowconstraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.LaneRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.LaneRate)
  return false;
#undef DO_
}

void LaneRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.LaneRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string source = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // required string destination = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->destination(), output);
  }

  // repeated string productIds = 5;
  for (int i = 0, n = this->productids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productids(i).data(), static_cast<int>(this->productids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.productIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->productids(i), output);
  }

  // repeated string productGroupIds = 6;
  for (int i = 0, n = this->productgroupids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productgroupids(i).data(), static_cast<int>(this->productgroupids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.productGroupIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->productgroupids(i), output);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->unitdimensioncosts(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flowconstraints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->flowconstraints(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.LaneRate)
}

::google::protobuf::uint8* LaneRate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.LaneRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string source = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // required string destination = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->destination(), target);
  }

  // repeated string productIds = 5;
  for (int i = 0, n = this->productids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productids(i).data(), static_cast<int>(this->productids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.productIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->productids(i), target);
  }

  // repeated string productGroupIds = 6;
  for (int i = 0, n = this->productgroupids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productgroupids(i).data(), static_cast<int>(this->productgroupids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.LaneRate.productGroupIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->productgroupids(i), target);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->unitdimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flowconstraints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->flowconstraints(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.LaneRate)
  return target;
}

size_t LaneRate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.LaneRate)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_source()) {
    // required string source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_destination()) {
    // required string destination = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  return total_size;
}
size_t LaneRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.LaneRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required string destination = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string productIds = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->productids_size());
  for (int i = 0, n = this->productids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productids(i));
  }

  // repeated string productGroupIds = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->productgroupids_size());
  for (int i = 0, n = this->productgroupids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productgroupids(i));
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->unitdimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unitdimensioncosts(static_cast<int>(i)));
    }
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->flowconstraints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->flowconstraints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.LaneRate)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneRate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneRate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.LaneRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.LaneRate)
    MergeFrom(*source);
  }
}

void LaneRate::MergeFrom(const LaneRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.LaneRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  productids_.MergeFrom(from.productids_);
  productgroupids_.MergeFrom(from.productgroupids_);
  unitdimensioncosts_.MergeFrom(from.unitdimensioncosts_);
  flowconstraints_.MergeFrom(from.flowconstraints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_destination();
      destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
    }
  }
}

void LaneRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.LaneRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneRate::CopyFrom(const LaneRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.LaneRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneRate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unitdimensioncosts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->flowconstraints())) return false;
  return true;
}

void LaneRate::Swap(LaneRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneRate::InternalSwap(LaneRate* other) {
  using std::swap;
  productids_.InternalSwap(CastToBase(&other->productids_));
  productgroupids_.InternalSwap(CastToBase(&other->productgroupids_));
  CastToBase(&unitdimensioncosts_)->InternalSwap(CastToBase(&other->unitdimensioncosts_));
  CastToBase(&flowconstraints_)->InternalSwap(CastToBase(&other->flowconstraints_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneRate::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CostModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostModel::kIdFieldNumber;
const int CostModel::kSourceFieldNumber;
const int CostModel::kProductGroupIdsFieldNumber;
const int CostModel::kUnitDimensionCostsFieldNumber;
const int CostModel::kFlowConstraintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostModel::CostModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_CostModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.CostModel)
}
CostModel::CostModel(const CostModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      productgroupids_(from.productgroupids_),
      unitdimensioncosts_(from.unitdimensioncosts_),
      flowconstraints_(from.flowconstraints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  // @@protoc_insertion_point(copy_constructor:NS3.CostModel)
}

void CostModel::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CostModel::~CostModel() {
  // @@protoc_insertion_point(destructor:NS3.CostModel)
  SharedDtor();
}

void CostModel::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CostModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CostModel::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CostModel& CostModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_CostModel.base);
  return *internal_default_instance();
}


void CostModel::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.CostModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  productgroupids_.Clear();
  unitdimensioncosts_.Clear();
  flowconstraints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CostModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.CostModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.CostModel.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.CostModel.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string productGroupIds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productgroupids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productgroupids(this->productgroupids_size() - 1).data(),
            static_cast<int>(this->productgroupids(this->productgroupids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.CostModel.productGroupIds");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unitdimensioncosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.FlowDimensionalConstraint flowConstraints = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_flowconstraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.CostModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.CostModel)
  return false;
#undef DO_
}

void CostModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.CostModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.CostModel.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.CostModel.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // repeated string productGroupIds = 3;
  for (int i = 0, n = this->productgroupids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productgroupids(i).data(), static_cast<int>(this->productgroupids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.CostModel.productGroupIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->productgroupids(i), output);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->unitdimensioncosts(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flowconstraints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->flowconstraints(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.CostModel)
}

::google::protobuf::uint8* CostModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.CostModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.CostModel.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.CostModel.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // repeated string productGroupIds = 3;
  for (int i = 0, n = this->productgroupids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productgroupids(i).data(), static_cast<int>(this->productgroupids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.CostModel.productGroupIds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->productgroupids(i), target);
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unitdimensioncosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->unitdimensioncosts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flowconstraints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->flowconstraints(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.CostModel)
  return target;
}

size_t CostModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.CostModel)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_source()) {
    // required string source = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  return total_size;
}
size_t CostModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.CostModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string source = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string productGroupIds = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->productgroupids_size());
  for (int i = 0, n = this->productgroupids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productgroupids(i));
  }

  // repeated .NS3.UnitDimensionCost unitDimensionCosts = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->unitdimensioncosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unitdimensioncosts(static_cast<int>(i)));
    }
  }

  // repeated .NS3.FlowDimensionalConstraint flowConstraints = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->flowconstraints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->flowconstraints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.CostModel)
  GOOGLE_DCHECK_NE(&from, this);
  const CostModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CostModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.CostModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.CostModel)
    MergeFrom(*source);
  }
}

void CostModel::MergeFrom(const CostModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.CostModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  productgroupids_.MergeFrom(from.productgroupids_);
  unitdimensioncosts_.MergeFrom(from.unitdimensioncosts_);
  flowconstraints_.MergeFrom(from.flowconstraints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
  }
}

void CostModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.CostModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostModel::CopyFrom(const CostModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.CostModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unitdimensioncosts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->flowconstraints())) return false;
  return true;
}

void CostModel::Swap(CostModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CostModel::InternalSwap(CostModel* other) {
  using std::swap;
  productgroupids_.InternalSwap(CastToBase(&other->productgroupids_));
  CastToBase(&unitdimensioncosts_)->InternalSwap(CastToBase(&other->unitdimensioncosts_));
  CastToBase(&flowconstraints_)->InternalSwap(CastToBase(&other->flowconstraints_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CostModel::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Model::InitAsDefaultInstance() {
  ::NS3::_Model_default_instance_._instance.get_mutable()->dimensions_ = const_cast< ::NS3::DimensionConfiguration*>(
      ::NS3::DimensionConfiguration::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kDimensionsFieldNumber;
const int Model::kNodesFieldNumber;
const int Model::kLaneRatesFieldNumber;
const int Model::kCostModelsFieldNumber;
const int Model::kProductGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Model.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.Model)
}
Model::Model(const Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_),
      lanerates_(from.lanerates_),
      costmodels_(from.costmodels_),
      productgroups_(from.productgroups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dimensions()) {
    dimensions_ = new ::NS3::DimensionConfiguration(*from.dimensions_);
  } else {
    dimensions_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NS3.Model)
}

void Model::SharedCtor() {
  dimensions_ = NULL;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:NS3.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  if (this != internal_default_instance()) delete dimensions_;
}

void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Model& Model::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_Model.base);
  return *internal_default_instance();
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  lanerates_.Clear();
  costmodels_.Clear();
  productgroups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dimensions_ != NULL);
    dimensions_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.Model)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NS3.DimensionConfiguration dimensions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.Node nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.LaneRate laneRates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lanerates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.CostModel costModels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_costmodels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.ProductGroup productGroups = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_productgroups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NS3.DimensionConfiguration dimensions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_dimensions(), output);
  }

  // repeated .NS3.Node nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.LaneRate laneRates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanerates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lanerates(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.CostModel costModels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->costmodels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->costmodels(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.ProductGroup productGroups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->productgroups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->productgroups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NS3.DimensionConfiguration dimensions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_dimensions(), deterministic, target);
  }

  // repeated .NS3.Node nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.LaneRate laneRates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanerates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lanerates(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.CostModel costModels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->costmodels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->costmodels(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.ProductGroup productGroups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->productgroups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->productgroups(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.Model)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NS3.DimensionConfiguration dimensions = 1;
  if (has_dimensions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dimensions_);
  }
  // repeated .NS3.Node nodes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .NS3.LaneRate laneRates = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lanerates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lanerates(static_cast<int>(i)));
    }
  }

  // repeated .NS3.CostModel costModels = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->costmodels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->costmodels(static_cast<int>(i)));
    }
  }

  // repeated .NS3.ProductGroup productGroups = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->productgroups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->productgroups(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  lanerates_.MergeFrom(from.lanerates_);
  costmodels_.MergeFrom(from.costmodels_);
  productgroups_.MergeFrom(from.productgroups_);
  if (from.has_dimensions()) {
    mutable_dimensions()->::NS3::DimensionConfiguration::MergeFrom(from.dimensions());
  }
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lanerates())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->costmodels())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->productgroups())) return false;
  if (has_dimensions()) {
    if (!this->dimensions_->IsInitialized()) return false;
  }
  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&lanerates_)->InternalSwap(CastToBase(&other->lanerates_));
  CastToBase(&costmodels_)->InternalSwap(CastToBase(&other->costmodels_));
  CastToBase(&productgroups_)->InternalSwap(CastToBase(&other->productgroups_));
  swap(dimensions_, other->dimensions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolveRequest::InitAsDefaultInstance() {
  ::NS3::_SolveRequest_default_instance_._instance.get_mutable()->model_ = const_cast< ::NS3::Model*>(
      ::NS3::Model::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolveRequest::kModelFieldNumber;
const int SolveRequest::kModelIDFieldNumber;
const int SolveRequest::kSolveTypeFieldNumber;
const int SolveRequest::kGeometryOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolveRequest::SolveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolveRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.SolveRequest)
}
SolveRequest::SolveRequest(const SolveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_modelid()) {
    modelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelid_);
  }
  if (from.has_model()) {
    model_ = new ::NS3::Model(*from.model_);
  } else {
    model_ = NULL;
  }
  ::memcpy(&solvetype_, &from.solvetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&geometryoutput_) -
    reinterpret_cast<char*>(&solvetype_)) + sizeof(geometryoutput_));
  // @@protoc_insertion_point(copy_constructor:NS3.SolveRequest)
}

void SolveRequest::SharedCtor() {
  modelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geometryoutput_) -
      reinterpret_cast<char*>(&model_)) + sizeof(geometryoutput_));
}

SolveRequest::~SolveRequest() {
  // @@protoc_insertion_point(destructor:NS3.SolveRequest)
  SharedDtor();
}

void SolveRequest::SharedDtor() {
  modelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
}

void SolveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SolveRequest::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolveRequest& SolveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolveRequest.base);
  return *internal_default_instance();
}


void SolveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.SolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      modelid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(model_ != NULL);
      model_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&solvetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&geometryoutput_) -
        reinterpret_cast<char*>(&solvetype_)) + sizeof(geometryoutput_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.SolveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NS3.Model model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string modelID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelid().data(), static_cast<int>(this->modelid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolveRequest.modelID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NS3.SolveRequest.SolveType solveType = 4 [default = Optimise];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NS3::SolveRequest_SolveType_IsValid(value)) {
            set_solvetype(static_cast< ::NS3::SolveRequest_SolveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NS3.SolveRequest.GeometryOutput geometryOutput = 5 [default = None];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NS3::SolveRequest_GeometryOutput_IsValid(value)) {
            set_geometryoutput(static_cast< ::NS3::SolveRequest_GeometryOutput >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.SolveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.SolveRequest)
  return false;
#undef DO_
}

void SolveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.SolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NS3.Model model = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_model(), output);
  }

  // optional string modelID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelid().data(), static_cast<int>(this->modelid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolveRequest.modelID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modelid(), output);
  }

  // optional .NS3.SolveRequest.SolveType solveType = 4 [default = Optimise];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->solvetype(), output);
  }

  // optional .NS3.SolveRequest.GeometryOutput geometryOutput = 5 [default = None];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->geometryoutput(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.SolveRequest)
}

::google::protobuf::uint8* SolveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.SolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .NS3.Model model = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_model(), deterministic, target);
  }

  // optional string modelID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelid().data(), static_cast<int>(this->modelid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolveRequest.modelID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modelid(), target);
  }

  // optional .NS3.SolveRequest.SolveType solveType = 4 [default = Optimise];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->solvetype(), target);
  }

  // optional .NS3.SolveRequest.GeometryOutput geometryOutput = 5 [default = None];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->geometryoutput(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.SolveRequest)
  return target;
}

size_t SolveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.SolveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string modelID = 2;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelid());
    }

    // optional .NS3.Model model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *model_);
    }

    // optional .NS3.SolveRequest.SolveType solveType = 4 [default = Optimise];
    if (has_solvetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solvetype());
    }

    // optional .NS3.SolveRequest.GeometryOutput geometryOutput = 5 [default = None];
    if (has_geometryoutput()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->geometryoutput());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.SolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SolveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.SolveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.SolveRequest)
    MergeFrom(*source);
  }
}

void SolveRequest::MergeFrom(const SolveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.SolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_modelid();
      modelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_model()->::NS3::Model::MergeFrom(from.model());
    }
    if (cached_has_bits & 0x00000004u) {
      solvetype_ = from.solvetype_;
    }
    if (cached_has_bits & 0x00000008u) {
      geometryoutput_ = from.geometryoutput_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.SolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolveRequest::CopyFrom(const SolveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.SolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolveRequest::IsInitialized() const {
  if (has_model()) {
    if (!this->model_->IsInitialized()) return false;
  }
  return true;
}

void SolveRequest::Swap(SolveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolveRequest::InternalSwap(SolveRequest* other) {
  using std::swap;
  modelid_.Swap(&other->modelid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(model_, other->model_);
  swap(solvetype_, other->solvetype_);
  swap(geometryoutput_, other->geometryoutput_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SolveRequest::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolutionResponse_Assignment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolutionResponse_Assignment::kSourceFieldNumber;
const int SolutionResponse_Assignment::kDestinationFieldNumber;
const int SolutionResponse_Assignment::kProductIdFieldNumber;
const int SolutionResponse_Assignment::kAmountFieldNumber;
const int SolutionResponse_Assignment::kCostFieldNumber;
const int SolutionResponse_Assignment::kLaneRateIdFieldNumber;
const int SolutionResponse_Assignment::kCostModelIdFieldNumber;
const int SolutionResponse_Assignment::kDistanceFieldNumber;
const int SolutionResponse_Assignment::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolutionResponse_Assignment::SolutionResponse_Assignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_Assignment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.SolutionResponse.Assignment)
}
SolutionResponse_Assignment::SolutionResponse_Assignment(const SolutionResponse_Assignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination()) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  lanerateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lanerateid()) {
    lanerateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lanerateid_);
  }
  costmodelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_costmodelid()) {
    costmodelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.costmodelid_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:NS3.SolutionResponse.Assignment)
}

void SolutionResponse_Assignment::SharedCtor() {
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lanerateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  costmodelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(duration_));
}

SolutionResponse_Assignment::~SolutionResponse_Assignment() {
  // @@protoc_insertion_point(destructor:NS3.SolutionResponse.Assignment)
  SharedDtor();
}

void SolutionResponse_Assignment::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lanerateid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  costmodelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolutionResponse_Assignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SolutionResponse_Assignment::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolutionResponse_Assignment& SolutionResponse_Assignment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_Assignment.base);
  return *internal_default_instance();
}


void SolutionResponse_Assignment::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.SolutionResponse.Assignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      destination_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      productid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      lanerateid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      costmodelid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(distance_));
  }
  duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolutionResponse_Assignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.SolutionResponse.Assignment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.Assignment.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string destination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.Assignment.destination");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string productId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.Assignment.productId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string laneRateId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lanerateid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lanerateid().data(), static_cast<int>(this->lanerateid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.Assignment.laneRateId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string costModelId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_costmodelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->costmodelid().data(), static_cast<int>(this->costmodelid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.Assignment.costModelId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float distance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float duration = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.SolutionResponse.Assignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.SolutionResponse.Assignment)
  return false;
#undef DO_
}

void SolutionResponse_Assignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.SolutionResponse.Assignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // required string destination = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination(), output);
  }

  // required string productId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.productId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->productid(), output);
  }

  // required float amount = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->amount(), output);
  }

  // required float cost = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cost(), output);
  }

  // optional string laneRateId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lanerateid().data(), static_cast<int>(this->lanerateid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.laneRateId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lanerateid(), output);
  }

  // optional string costModelId = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->costmodelid().data(), static_cast<int>(this->costmodelid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.costModelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->costmodelid(), output);
  }

  // required float distance = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->distance(), output);
  }

  // required float duration = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.SolutionResponse.Assignment)
}

::google::protobuf::uint8* SolutionResponse_Assignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.SolutionResponse.Assignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required string destination = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }

  // required string productId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.productId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->productid(), target);
  }

  // required float amount = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->amount(), target);
  }

  // required float cost = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cost(), target);
  }

  // optional string laneRateId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lanerateid().data(), static_cast<int>(this->lanerateid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.laneRateId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lanerateid(), target);
  }

  // optional string costModelId = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->costmodelid().data(), static_cast<int>(this->costmodelid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Assignment.costModelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->costmodelid(), target);
  }

  // required float distance = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->distance(), target);
  }

  // required float duration = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.SolutionResponse.Assignment)
  return target;
}

size_t SolutionResponse_Assignment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.SolutionResponse.Assignment)
  size_t total_size = 0;

  if (has_source()) {
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_destination()) {
    // required string destination = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  if (has_productid()) {
    // required string productId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_amount()) {
    // required float amount = 4;
    total_size += 1 + 4;
  }

  if (has_cost()) {
    // required float cost = 5;
    total_size += 1 + 4;
  }

  if (has_distance()) {
    // required float distance = 8;
    total_size += 1 + 4;
  }

  if (has_duration()) {
    // required float duration = 9;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SolutionResponse_Assignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.SolutionResponse.Assignment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001e7) ^ 0x000001e7) == 0) {  // All required fields are present.
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required string destination = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());

    // required string productId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required float amount = 4;
    total_size += 1 + 4;

    // required float cost = 5;
    total_size += 1 + 4;

    // required float distance = 8;
    total_size += 1 + 4;

    // required float duration = 9;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional string laneRateId = 6;
    if (has_lanerateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lanerateid());
    }

    // optional string costModelId = 7;
    if (has_costmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->costmodelid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolutionResponse_Assignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.SolutionResponse.Assignment)
  GOOGLE_DCHECK_NE(&from, this);
  const SolutionResponse_Assignment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolutionResponse_Assignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.SolutionResponse.Assignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.SolutionResponse.Assignment)
    MergeFrom(*source);
  }
}

void SolutionResponse_Assignment::MergeFrom(const SolutionResponse_Assignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.SolutionResponse.Assignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_destination();
      destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_lanerateid();
      lanerateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lanerateid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_costmodelid();
      costmodelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.costmodelid_);
    }
    if (cached_has_bits & 0x00000020u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000040u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_duration(from.duration());
  }
}

void SolutionResponse_Assignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.SolutionResponse.Assignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolutionResponse_Assignment::CopyFrom(const SolutionResponse_Assignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.SolutionResponse.Assignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionResponse_Assignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001e7) != 0x000001e7) return false;
  return true;
}

void SolutionResponse_Assignment::Swap(SolutionResponse_Assignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolutionResponse_Assignment::InternalSwap(SolutionResponse_Assignment* other) {
  using std::swap;
  source_.Swap(&other->source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  productid_.Swap(&other->productid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lanerateid_.Swap(&other->lanerateid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  costmodelid_.Swap(&other->costmodelid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(cost_, other->cost_);
  swap(distance_, other->distance_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SolutionResponse_Assignment::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolutionResponse_NodeProductFlow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolutionResponse_NodeProductFlow::kNodeIdFieldNumber;
const int SolutionResponse_NodeProductFlow::kProductIdFieldNumber;
const int SolutionResponse_NodeProductFlow::kInFlowFieldNumber;
const int SolutionResponse_NodeProductFlow::kOutFlowFieldNumber;
const int SolutionResponse_NodeProductFlow::kFlowCostFieldNumber;
const int SolutionResponse_NodeProductFlow::kFixedCostFieldNumber;
const int SolutionResponse_NodeProductFlow::kProductionAmountFieldNumber;
const int SolutionResponse_NodeProductFlow::kProductionPenaltyFieldNumber;
const int SolutionResponse_NodeProductFlow::kProductionCostFieldNumber;
const int SolutionResponse_NodeProductFlow::kConsumptionAmountFieldNumber;
const int SolutionResponse_NodeProductFlow::kConsumptionPenaltyFieldNumber;
const int SolutionResponse_NodeProductFlow::kConsumptionCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolutionResponse_NodeProductFlow::SolutionResponse_NodeProductFlow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_NodeProductFlow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.SolutionResponse.NodeProductFlow)
}
SolutionResponse_NodeProductFlow::SolutionResponse_NodeProductFlow(const SolutionResponse_NodeProductFlow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nodeid()) {
    nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_productid()) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  ::memcpy(&inflow_, &from.inflow_,
    static_cast<size_t>(reinterpret_cast<char*>(&consumptioncost_) -
    reinterpret_cast<char*>(&inflow_)) + sizeof(consumptioncost_));
  // @@protoc_insertion_point(copy_constructor:NS3.SolutionResponse.NodeProductFlow)
}

void SolutionResponse_NodeProductFlow::SharedCtor() {
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inflow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consumptioncost_) -
      reinterpret_cast<char*>(&inflow_)) + sizeof(consumptioncost_));
}

SolutionResponse_NodeProductFlow::~SolutionResponse_NodeProductFlow() {
  // @@protoc_insertion_point(destructor:NS3.SolutionResponse.NodeProductFlow)
  SharedDtor();
}

void SolutionResponse_NodeProductFlow::SharedDtor() {
  nodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolutionResponse_NodeProductFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SolutionResponse_NodeProductFlow::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolutionResponse_NodeProductFlow& SolutionResponse_NodeProductFlow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_NodeProductFlow.base);
  return *internal_default_instance();
}


void SolutionResponse_NodeProductFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.SolutionResponse.NodeProductFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nodeid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      productid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&inflow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&productionpenalty_) -
        reinterpret_cast<char*>(&inflow_)) + sizeof(productionpenalty_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&productioncost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&consumptioncost_) -
        reinterpret_cast<char*>(&productioncost_)) + sizeof(consumptioncost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolutionResponse_NodeProductFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.SolutionResponse.NodeProductFlow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nodeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodeid().data(), static_cast<int>(this->nodeid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.NodeProductFlow.nodeId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string productId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.NodeProductFlow.productId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float inFlow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_inflow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float outFlow = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_outflow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float flowCost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_flowcost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flowcost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float fixedCost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_fixedcost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fixedcost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productionAmount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_productionamount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productionamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productionPenalty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_productionpenalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productionpenalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productionCost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_productioncost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productioncost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float consumptionAmount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_consumptionamount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &consumptionamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float consumptionPenalty = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_consumptionpenalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &consumptionpenalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float consumptionCost = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_consumptioncost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &consumptioncost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.SolutionResponse.NodeProductFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.SolutionResponse.NodeProductFlow)
  return false;
#undef DO_
}

void SolutionResponse_NodeProductFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.SolutionResponse.NodeProductFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nodeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), static_cast<int>(this->nodeid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.NodeProductFlow.nodeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nodeid(), output);
  }

  // required string productId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.NodeProductFlow.productId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  // required float inFlow = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->inflow(), output);
  }

  // required float outFlow = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->outflow(), output);
  }

  // required float flowCost = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->flowcost(), output);
  }

  // required float fixedCost = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fixedcost(), output);
  }

  // required float productionAmount = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->productionamount(), output);
  }

  // required float productionPenalty = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->productionpenalty(), output);
  }

  // required float productionCost = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->productioncost(), output);
  }

  // required float consumptionAmount = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->consumptionamount(), output);
  }

  // required float consumptionPenalty = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->consumptionpenalty(), output);
  }

  // required float consumptionCost = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->consumptioncost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.SolutionResponse.NodeProductFlow)
}

::google::protobuf::uint8* SolutionResponse_NodeProductFlow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.SolutionResponse.NodeProductFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nodeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), static_cast<int>(this->nodeid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.NodeProductFlow.nodeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }

  // required string productId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.NodeProductFlow.productId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // required float inFlow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->inflow(), target);
  }

  // required float outFlow = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->outflow(), target);
  }

  // required float flowCost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->flowcost(), target);
  }

  // required float fixedCost = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fixedcost(), target);
  }

  // required float productionAmount = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->productionamount(), target);
  }

  // required float productionPenalty = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->productionpenalty(), target);
  }

  // required float productionCost = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->productioncost(), target);
  }

  // required float consumptionAmount = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->consumptionamount(), target);
  }

  // required float consumptionPenalty = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->consumptionpenalty(), target);
  }

  // required float consumptionCost = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->consumptioncost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.SolutionResponse.NodeProductFlow)
  return target;
}

size_t SolutionResponse_NodeProductFlow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.SolutionResponse.NodeProductFlow)
  size_t total_size = 0;

  if (has_nodeid()) {
    // required string nodeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodeid());
  }

  if (has_productid()) {
    // required string productId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  if (has_inflow()) {
    // required float inFlow = 3;
    total_size += 1 + 4;
  }

  if (has_outflow()) {
    // required float outFlow = 4;
    total_size += 1 + 4;
  }

  if (has_flowcost()) {
    // required float flowCost = 5;
    total_size += 1 + 4;
  }

  if (has_fixedcost()) {
    // required float fixedCost = 6;
    total_size += 1 + 4;
  }

  if (has_productionamount()) {
    // required float productionAmount = 7;
    total_size += 1 + 4;
  }

  if (has_productionpenalty()) {
    // required float productionPenalty = 8;
    total_size += 1 + 4;
  }

  if (has_productioncost()) {
    // required float productionCost = 9;
    total_size += 1 + 4;
  }

  if (has_consumptionamount()) {
    // required float consumptionAmount = 10;
    total_size += 1 + 4;
  }

  if (has_consumptionpenalty()) {
    // required float consumptionPenalty = 11;
    total_size += 1 + 4;
  }

  if (has_consumptioncost()) {
    // required float consumptionCost = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SolutionResponse_NodeProductFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.SolutionResponse.NodeProductFlow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required string nodeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodeid());

    // required string productId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());

    // required float inFlow = 3;
    total_size += 1 + 4;

    // required float outFlow = 4;
    total_size += 1 + 4;

    // required float flowCost = 5;
    total_size += 1 + 4;

    // required float fixedCost = 6;
    total_size += 1 + 4;

    // required float productionAmount = 7;
    total_size += 1 + 4;

    // required float productionPenalty = 8;
    total_size += 1 + 4;

    // required float productionCost = 9;
    total_size += 1 + 4;

    // required float consumptionAmount = 10;
    total_size += 1 + 4;

    // required float consumptionPenalty = 11;
    total_size += 1 + 4;

    // required float consumptionCost = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolutionResponse_NodeProductFlow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.SolutionResponse.NodeProductFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const SolutionResponse_NodeProductFlow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolutionResponse_NodeProductFlow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.SolutionResponse.NodeProductFlow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.SolutionResponse.NodeProductFlow)
    MergeFrom(*source);
  }
}

void SolutionResponse_NodeProductFlow::MergeFrom(const SolutionResponse_NodeProductFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.SolutionResponse.NodeProductFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nodeid();
      nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_productid();
      productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
    }
    if (cached_has_bits & 0x00000004u) {
      inflow_ = from.inflow_;
    }
    if (cached_has_bits & 0x00000008u) {
      outflow_ = from.outflow_;
    }
    if (cached_has_bits & 0x00000010u) {
      flowcost_ = from.flowcost_;
    }
    if (cached_has_bits & 0x00000020u) {
      fixedcost_ = from.fixedcost_;
    }
    if (cached_has_bits & 0x00000040u) {
      productionamount_ = from.productionamount_;
    }
    if (cached_has_bits & 0x00000080u) {
      productionpenalty_ = from.productionpenalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      productioncost_ = from.productioncost_;
    }
    if (cached_has_bits & 0x00000200u) {
      consumptionamount_ = from.consumptionamount_;
    }
    if (cached_has_bits & 0x00000400u) {
      consumptionpenalty_ = from.consumptionpenalty_;
    }
    if (cached_has_bits & 0x00000800u) {
      consumptioncost_ = from.consumptioncost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolutionResponse_NodeProductFlow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.SolutionResponse.NodeProductFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolutionResponse_NodeProductFlow::CopyFrom(const SolutionResponse_NodeProductFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.SolutionResponse.NodeProductFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionResponse_NodeProductFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void SolutionResponse_NodeProductFlow::Swap(SolutionResponse_NodeProductFlow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolutionResponse_NodeProductFlow::InternalSwap(SolutionResponse_NodeProductFlow* other) {
  using std::swap;
  nodeid_.Swap(&other->nodeid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  productid_.Swap(&other->productid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inflow_, other->inflow_);
  swap(outflow_, other->outflow_);
  swap(flowcost_, other->flowcost_);
  swap(fixedcost_, other->fixedcost_);
  swap(productionamount_, other->productionamount_);
  swap(productionpenalty_, other->productionpenalty_);
  swap(productioncost_, other->productioncost_);
  swap(consumptionamount_, other->consumptionamount_);
  swap(consumptionpenalty_, other->consumptionpenalty_);
  swap(consumptioncost_, other->consumptioncost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SolutionResponse_NodeProductFlow::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolutionResponse_NodeFlow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolutionResponse_NodeFlow::kNodeIdFieldNumber;
const int SolutionResponse_NodeFlow::kInFlowFieldNumber;
const int SolutionResponse_NodeFlow::kOutFlowFieldNumber;
const int SolutionResponse_NodeFlow::kFlowCostFieldNumber;
const int SolutionResponse_NodeFlow::kFixedCostFieldNumber;
const int SolutionResponse_NodeFlow::kProductFlowCostFieldNumber;
const int SolutionResponse_NodeFlow::kProductFixedCostFieldNumber;
const int SolutionResponse_NodeFlow::kProductionAmountFieldNumber;
const int SolutionResponse_NodeFlow::kProductionPenaltyFieldNumber;
const int SolutionResponse_NodeFlow::kProductionCostFieldNumber;
const int SolutionResponse_NodeFlow::kConsumptionAmountFieldNumber;
const int SolutionResponse_NodeFlow::kConsumptionPenaltyFieldNumber;
const int SolutionResponse_NodeFlow::kConsumptionCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolutionResponse_NodeFlow::SolutionResponse_NodeFlow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_NodeFlow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.SolutionResponse.NodeFlow)
}
SolutionResponse_NodeFlow::SolutionResponse_NodeFlow(const SolutionResponse_NodeFlow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nodeid()) {
    nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  ::memcpy(&inflow_, &from.inflow_,
    static_cast<size_t>(reinterpret_cast<char*>(&consumptioncost_) -
    reinterpret_cast<char*>(&inflow_)) + sizeof(consumptioncost_));
  // @@protoc_insertion_point(copy_constructor:NS3.SolutionResponse.NodeFlow)
}

void SolutionResponse_NodeFlow::SharedCtor() {
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inflow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consumptioncost_) -
      reinterpret_cast<char*>(&inflow_)) + sizeof(consumptioncost_));
}

SolutionResponse_NodeFlow::~SolutionResponse_NodeFlow() {
  // @@protoc_insertion_point(destructor:NS3.SolutionResponse.NodeFlow)
  SharedDtor();
}

void SolutionResponse_NodeFlow::SharedDtor() {
  nodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolutionResponse_NodeFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SolutionResponse_NodeFlow::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolutionResponse_NodeFlow& SolutionResponse_NodeFlow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_NodeFlow.base);
  return *internal_default_instance();
}


void SolutionResponse_NodeFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.SolutionResponse.NodeFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nodeid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&inflow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&productionamount_) -
        reinterpret_cast<char*>(&inflow_)) + sizeof(productionamount_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&productionpenalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&consumptioncost_) -
        reinterpret_cast<char*>(&productionpenalty_)) + sizeof(consumptioncost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolutionResponse_NodeFlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.SolutionResponse.NodeFlow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nodeId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodeid().data(), static_cast<int>(this->nodeid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.NodeFlow.nodeId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float inFlow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_inflow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float outFlow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_outflow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float flowCost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_flowcost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flowcost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float fixedCost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_fixedcost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fixedcost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productFlowCost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_productflowcost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productflowcost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productFixedCost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_productfixedcost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productfixedcost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productionAmount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_productionamount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productionamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productionPenalty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_productionpenalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productionpenalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float productionCost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_productioncost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productioncost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float consumptionAmount = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_consumptionamount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &consumptionamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float consumptionPenalty = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_consumptionpenalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &consumptionpenalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float consumptionCost = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_consumptioncost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &consumptioncost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.SolutionResponse.NodeFlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.SolutionResponse.NodeFlow)
  return false;
#undef DO_
}

void SolutionResponse_NodeFlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.SolutionResponse.NodeFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nodeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), static_cast<int>(this->nodeid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.NodeFlow.nodeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nodeid(), output);
  }

  // required float inFlow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->inflow(), output);
  }

  // required float outFlow = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->outflow(), output);
  }

  // required float flowCost = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->flowcost(), output);
  }

  // required float fixedCost = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fixedcost(), output);
  }

  // required float productFlowCost = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->productflowcost(), output);
  }

  // required float productFixedCost = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->productfixedcost(), output);
  }

  // required float productionAmount = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->productionamount(), output);
  }

  // required float productionPenalty = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->productionpenalty(), output);
  }

  // required float productionCost = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->productioncost(), output);
  }

  // required float consumptionAmount = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->consumptionamount(), output);
  }

  // required float consumptionPenalty = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->consumptionpenalty(), output);
  }

  // required float consumptionCost = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->consumptioncost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.SolutionResponse.NodeFlow)
}

::google::protobuf::uint8* SolutionResponse_NodeFlow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.SolutionResponse.NodeFlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nodeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), static_cast<int>(this->nodeid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.NodeFlow.nodeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }

  // required float inFlow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->inflow(), target);
  }

  // required float outFlow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->outflow(), target);
  }

  // required float flowCost = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->flowcost(), target);
  }

  // required float fixedCost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fixedcost(), target);
  }

  // required float productFlowCost = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->productflowcost(), target);
  }

  // required float productFixedCost = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->productfixedcost(), target);
  }

  // required float productionAmount = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->productionamount(), target);
  }

  // required float productionPenalty = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->productionpenalty(), target);
  }

  // required float productionCost = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->productioncost(), target);
  }

  // required float consumptionAmount = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->consumptionamount(), target);
  }

  // required float consumptionPenalty = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->consumptionpenalty(), target);
  }

  // required float consumptionCost = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->consumptioncost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.SolutionResponse.NodeFlow)
  return target;
}

size_t SolutionResponse_NodeFlow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.SolutionResponse.NodeFlow)
  size_t total_size = 0;

  if (has_nodeid()) {
    // required string nodeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodeid());
  }

  if (has_inflow()) {
    // required float inFlow = 2;
    total_size += 1 + 4;
  }

  if (has_outflow()) {
    // required float outFlow = 3;
    total_size += 1 + 4;
  }

  if (has_flowcost()) {
    // required float flowCost = 4;
    total_size += 1 + 4;
  }

  if (has_fixedcost()) {
    // required float fixedCost = 5;
    total_size += 1 + 4;
  }

  if (has_productflowcost()) {
    // required float productFlowCost = 6;
    total_size += 1 + 4;
  }

  if (has_productfixedcost()) {
    // required float productFixedCost = 7;
    total_size += 1 + 4;
  }

  if (has_productionamount()) {
    // required float productionAmount = 8;
    total_size += 1 + 4;
  }

  if (has_productionpenalty()) {
    // required float productionPenalty = 9;
    total_size += 1 + 4;
  }

  if (has_productioncost()) {
    // required float productionCost = 10;
    total_size += 1 + 4;
  }

  if (has_consumptionamount()) {
    // required float consumptionAmount = 11;
    total_size += 1 + 4;
  }

  if (has_consumptionpenalty()) {
    // required float consumptionPenalty = 12;
    total_size += 1 + 4;
  }

  if (has_consumptioncost()) {
    // required float consumptionCost = 13;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SolutionResponse_NodeFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.SolutionResponse.NodeFlow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required string nodeId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodeid());

    // required float inFlow = 2;
    total_size += 1 + 4;

    // required float outFlow = 3;
    total_size += 1 + 4;

    // required float flowCost = 4;
    total_size += 1 + 4;

    // required float fixedCost = 5;
    total_size += 1 + 4;

    // required float productFlowCost = 6;
    total_size += 1 + 4;

    // required float productFixedCost = 7;
    total_size += 1 + 4;

    // required float productionAmount = 8;
    total_size += 1 + 4;

    // required float productionPenalty = 9;
    total_size += 1 + 4;

    // required float productionCost = 10;
    total_size += 1 + 4;

    // required float consumptionAmount = 11;
    total_size += 1 + 4;

    // required float consumptionPenalty = 12;
    total_size += 1 + 4;

    // required float consumptionCost = 13;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolutionResponse_NodeFlow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.SolutionResponse.NodeFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const SolutionResponse_NodeFlow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolutionResponse_NodeFlow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.SolutionResponse.NodeFlow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.SolutionResponse.NodeFlow)
    MergeFrom(*source);
  }
}

void SolutionResponse_NodeFlow::MergeFrom(const SolutionResponse_NodeFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.SolutionResponse.NodeFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nodeid();
      nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
    }
    if (cached_has_bits & 0x00000002u) {
      inflow_ = from.inflow_;
    }
    if (cached_has_bits & 0x00000004u) {
      outflow_ = from.outflow_;
    }
    if (cached_has_bits & 0x00000008u) {
      flowcost_ = from.flowcost_;
    }
    if (cached_has_bits & 0x00000010u) {
      fixedcost_ = from.fixedcost_;
    }
    if (cached_has_bits & 0x00000020u) {
      productflowcost_ = from.productflowcost_;
    }
    if (cached_has_bits & 0x00000040u) {
      productfixedcost_ = from.productfixedcost_;
    }
    if (cached_has_bits & 0x00000080u) {
      productionamount_ = from.productionamount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      productionpenalty_ = from.productionpenalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      productioncost_ = from.productioncost_;
    }
    if (cached_has_bits & 0x00000400u) {
      consumptionamount_ = from.consumptionamount_;
    }
    if (cached_has_bits & 0x00000800u) {
      consumptionpenalty_ = from.consumptionpenalty_;
    }
    if (cached_has_bits & 0x00001000u) {
      consumptioncost_ = from.consumptioncost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolutionResponse_NodeFlow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.SolutionResponse.NodeFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolutionResponse_NodeFlow::CopyFrom(const SolutionResponse_NodeFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.SolutionResponse.NodeFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionResponse_NodeFlow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void SolutionResponse_NodeFlow::Swap(SolutionResponse_NodeFlow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolutionResponse_NodeFlow::InternalSwap(SolutionResponse_NodeFlow* other) {
  using std::swap;
  nodeid_.Swap(&other->nodeid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inflow_, other->inflow_);
  swap(outflow_, other->outflow_);
  swap(flowcost_, other->flowcost_);
  swap(fixedcost_, other->fixedcost_);
  swap(productflowcost_, other->productflowcost_);
  swap(productfixedcost_, other->productfixedcost_);
  swap(productionamount_, other->productionamount_);
  swap(productionpenalty_, other->productionpenalty_);
  swap(productioncost_, other->productioncost_);
  swap(consumptionamount_, other->consumptionamount_);
  swap(consumptionpenalty_, other->consumptionpenalty_);
  swap(consumptioncost_, other->consumptioncost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SolutionResponse_NodeFlow::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolutionResponse_GeometrySequence::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolutionResponse_GeometrySequence::kXFieldNumber;
const int SolutionResponse_GeometrySequence::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolutionResponse_GeometrySequence::SolutionResponse_GeometrySequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_GeometrySequence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.SolutionResponse.GeometrySequence)
}
SolutionResponse_GeometrySequence::SolutionResponse_GeometrySequence(const SolutionResponse_GeometrySequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      x_(from.x_),
      y_(from.y_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NS3.SolutionResponse.GeometrySequence)
}

void SolutionResponse_GeometrySequence::SharedCtor() {
}

SolutionResponse_GeometrySequence::~SolutionResponse_GeometrySequence() {
  // @@protoc_insertion_point(destructor:NS3.SolutionResponse.GeometrySequence)
  SharedDtor();
}

void SolutionResponse_GeometrySequence::SharedDtor() {
}

void SolutionResponse_GeometrySequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SolutionResponse_GeometrySequence::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolutionResponse_GeometrySequence& SolutionResponse_GeometrySequence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_GeometrySequence.base);
  return *internal_default_instance();
}


void SolutionResponse_GeometrySequence::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.SolutionResponse.GeometrySequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolutionResponse_GeometrySequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.SolutionResponse.GeometrySequence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_x())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_y())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.SolutionResponse.GeometrySequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.SolutionResponse.GeometrySequence)
  return false;
#undef DO_
}

void SolutionResponse_GeometrySequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.SolutionResponse.GeometrySequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x = 1;
  for (int i = 0, n = this->x_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->x(i), output);
  }

  // repeated float y = 2;
  for (int i = 0, n = this->y_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->y(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.SolutionResponse.GeometrySequence)
}

::google::protobuf::uint8* SolutionResponse_GeometrySequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.SolutionResponse.GeometrySequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->x_, target);

  // repeated float y = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->y_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.SolutionResponse.GeometrySequence)
  return target;
}

size_t SolutionResponse_GeometrySequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.SolutionResponse.GeometrySequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float x = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->x_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->x_size());
    total_size += data_size;
  }

  // repeated float y = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->y_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->y_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolutionResponse_GeometrySequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.SolutionResponse.GeometrySequence)
  GOOGLE_DCHECK_NE(&from, this);
  const SolutionResponse_GeometrySequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolutionResponse_GeometrySequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.SolutionResponse.GeometrySequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.SolutionResponse.GeometrySequence)
    MergeFrom(*source);
  }
}

void SolutionResponse_GeometrySequence::MergeFrom(const SolutionResponse_GeometrySequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.SolutionResponse.GeometrySequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
}

void SolutionResponse_GeometrySequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.SolutionResponse.GeometrySequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolutionResponse_GeometrySequence::CopyFrom(const SolutionResponse_GeometrySequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.SolutionResponse.GeometrySequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionResponse_GeometrySequence::IsInitialized() const {
  return true;
}

void SolutionResponse_GeometrySequence::Swap(SolutionResponse_GeometrySequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolutionResponse_GeometrySequence::InternalSwap(SolutionResponse_GeometrySequence* other) {
  using std::swap;
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SolutionResponse_GeometrySequence::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolutionResponse_Route::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolutionResponse_Route::kFromIdFieldNumber;
const int SolutionResponse_Route::kToIdFieldNumber;
const int SolutionResponse_Route::kGeometrySequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolutionResponse_Route::SolutionResponse_Route()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_Route.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.SolutionResponse.Route)
}
SolutionResponse_Route::SolutionResponse_Route(const SolutionResponse_Route& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      geometrysequence_(from.geometrysequence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromid()) {
    fromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromid_);
  }
  toid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_toid()) {
    toid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.toid_);
  }
  // @@protoc_insertion_point(copy_constructor:NS3.SolutionResponse.Route)
}

void SolutionResponse_Route::SharedCtor() {
  fromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SolutionResponse_Route::~SolutionResponse_Route() {
  // @@protoc_insertion_point(destructor:NS3.SolutionResponse.Route)
  SharedDtor();
}

void SolutionResponse_Route::SharedDtor() {
  fromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolutionResponse_Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SolutionResponse_Route::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolutionResponse_Route& SolutionResponse_Route::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse_Route.base);
  return *internal_default_instance();
}


void SolutionResponse_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.SolutionResponse.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometrysequence_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      fromid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      toid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolutionResponse_Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.SolutionResponse.Route)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fromId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromid().data(), static_cast<int>(this->fromid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.Route.fromId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string toId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toid().data(), static_cast<int>(this->toid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NS3.SolutionResponse.Route.toId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 geometrySequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_geometrysequence())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_geometrysequence())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.SolutionResponse.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.SolutionResponse.Route)
  return false;
#undef DO_
}

void SolutionResponse_Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.SolutionResponse.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fromId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromid().data(), static_cast<int>(this->fromid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Route.fromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromid(), output);
  }

  // required string toId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toid().data(), static_cast<int>(this->toid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Route.toId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->toid(), output);
  }

  // repeated int32 geometrySequence = 3;
  for (int i = 0, n = this->geometrysequence_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->geometrysequence(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.SolutionResponse.Route)
}

::google::protobuf::uint8* SolutionResponse_Route::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.SolutionResponse.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fromId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromid().data(), static_cast<int>(this->fromid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Route.fromId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromid(), target);
  }

  // required string toId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toid().data(), static_cast<int>(this->toid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NS3.SolutionResponse.Route.toId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toid(), target);
  }

  // repeated int32 geometrySequence = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->geometrysequence_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.SolutionResponse.Route)
  return target;
}

size_t SolutionResponse_Route::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NS3.SolutionResponse.Route)
  size_t total_size = 0;

  if (has_fromid()) {
    // required string fromId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromid());
  }

  if (has_toid()) {
    // required string toId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->toid());
  }

  return total_size;
}
size_t SolutionResponse_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.SolutionResponse.Route)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string fromId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromid());

    // required string toId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->toid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 geometrySequence = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->geometrysequence_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->geometrysequence_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolutionResponse_Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.SolutionResponse.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const SolutionResponse_Route* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolutionResponse_Route>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.SolutionResponse.Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.SolutionResponse.Route)
    MergeFrom(*source);
  }
}

void SolutionResponse_Route::MergeFrom(const SolutionResponse_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.SolutionResponse.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geometrysequence_.MergeFrom(from.geometrysequence_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fromid();
      fromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_toid();
      toid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.toid_);
    }
  }
}

void SolutionResponse_Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.SolutionResponse.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolutionResponse_Route::CopyFrom(const SolutionResponse_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.SolutionResponse.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionResponse_Route::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SolutionResponse_Route::Swap(SolutionResponse_Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolutionResponse_Route::InternalSwap(SolutionResponse_Route* other) {
  using std::swap;
  geometrysequence_.InternalSwap(&other->geometrysequence_);
  fromid_.Swap(&other->fromid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  toid_.Swap(&other->toid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SolutionResponse_Route::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SolutionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolutionResponse::kObjectiveFieldNumber;
const int SolutionResponse::kLowerBoundFieldNumber;
const int SolutionResponse::kOptimalityGapFieldNumber;
const int SolutionResponse::kAssignmentsFieldNumber;
const int SolutionResponse::kNodeFlowsFieldNumber;
const int SolutionResponse::kNodeProductFlowsFieldNumber;
const int SolutionResponse::kGeometrySequenceFieldNumber;
const int SolutionResponse::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolutionResponse::SolutionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NS3.SolutionResponse)
}
SolutionResponse::SolutionResponse(const SolutionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      assignments_(from.assignments_),
      nodeflows_(from.nodeflows_),
      nodeproductflows_(from.nodeproductflows_),
      geometrysequence_(from.geometrysequence_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objective_, &from.objective_,
    static_cast<size_t>(reinterpret_cast<char*>(&optimalitygap_) -
    reinterpret_cast<char*>(&objective_)) + sizeof(optimalitygap_));
  // @@protoc_insertion_point(copy_constructor:NS3.SolutionResponse)
}

void SolutionResponse::SharedCtor() {
  ::memset(&objective_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optimalitygap_) -
      reinterpret_cast<char*>(&objective_)) + sizeof(optimalitygap_));
}

SolutionResponse::~SolutionResponse() {
  // @@protoc_insertion_point(destructor:NS3.SolutionResponse)
  SharedDtor();
}

void SolutionResponse::SharedDtor() {
}

void SolutionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SolutionResponse::descriptor() {
  ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolutionResponse& SolutionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ns3_2dtbfvuwtge2iq_2eproto::scc_info_SolutionResponse.base);
  return *internal_default_instance();
}


void SolutionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NS3.SolutionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignments_.Clear();
  nodeflows_.Clear();
  nodeproductflows_.Clear();
  geometrysequence_.Clear();
  routes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&objective_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optimalitygap_) -
        reinterpret_cast<char*>(&objective_)) + sizeof(optimalitygap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolutionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NS3.SolutionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float objective = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_objective();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &objective_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lowerBound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_lowerbound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowerbound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float optimalityGap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_optimalitygap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optimalitygap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.SolutionResponse.Assignment assignments = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_assignments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.SolutionResponse.NodeFlow nodeFlows = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodeflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.SolutionResponse.NodeProductFlow nodeProductFlows = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodeproductflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.SolutionResponse.GeometrySequence geometrySequence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_geometrysequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NS3.SolutionResponse.Route routes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NS3.SolutionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NS3.SolutionResponse)
  return false;
#undef DO_
}

void SolutionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NS3.SolutionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float objective = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->objective(), output);
  }

  // optional float lowerBound = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lowerbound(), output);
  }

  // optional float optimalityGap = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->optimalitygap(), output);
  }

  // repeated .NS3.SolutionResponse.Assignment assignments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assignments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->assignments(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.SolutionResponse.NodeFlow nodeFlows = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->nodeflows(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.SolutionResponse.NodeProductFlow nodeProductFlows = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeproductflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->nodeproductflows(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.SolutionResponse.GeometrySequence geometrySequence = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometrysequence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->geometrysequence(static_cast<int>(i)),
      output);
  }

  // repeated .NS3.SolutionResponse.Route routes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->routes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NS3.SolutionResponse)
}

::google::protobuf::uint8* SolutionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NS3.SolutionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float objective = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->objective(), target);
  }

  // optional float lowerBound = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lowerbound(), target);
  }

  // optional float optimalityGap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->optimalitygap(), target);
  }

  // repeated .NS3.SolutionResponse.Assignment assignments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assignments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->assignments(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.SolutionResponse.NodeFlow nodeFlows = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->nodeflows(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.SolutionResponse.NodeProductFlow nodeProductFlows = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodeproductflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->nodeproductflows(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.SolutionResponse.GeometrySequence geometrySequence = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geometrysequence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->geometrysequence(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NS3.SolutionResponse.Route routes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->routes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NS3.SolutionResponse)
  return target;
}

size_t SolutionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NS3.SolutionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float objective = 1;
  if (has_objective()) {
    total_size += 1 + 4;
  }
  // repeated .NS3.SolutionResponse.Assignment assignments = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->assignments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assignments(static_cast<int>(i)));
    }
  }

  // repeated .NS3.SolutionResponse.NodeFlow nodeFlows = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->nodeflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodeflows(static_cast<int>(i)));
    }
  }

  // repeated .NS3.SolutionResponse.NodeProductFlow nodeProductFlows = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->nodeproductflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodeproductflows(static_cast<int>(i)));
    }
  }

  // repeated .NS3.SolutionResponse.GeometrySequence geometrySequence = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->geometrysequence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geometrysequence(static_cast<int>(i)));
    }
  }

  // repeated .NS3.SolutionResponse.Route routes = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->routes(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional float lowerBound = 2;
    if (has_lowerbound()) {
      total_size += 1 + 4;
    }

    // optional float optimalityGap = 3;
    if (has_optimalitygap()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolutionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NS3.SolutionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SolutionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolutionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NS3.SolutionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NS3.SolutionResponse)
    MergeFrom(*source);
  }
}

void SolutionResponse::MergeFrom(const SolutionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NS3.SolutionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assignments_.MergeFrom(from.assignments_);
  nodeflows_.MergeFrom(from.nodeflows_);
  nodeproductflows_.MergeFrom(from.nodeproductflows_);
  geometrysequence_.MergeFrom(from.geometrysequence_);
  routes_.MergeFrom(from.routes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      objective_ = from.objective_;
    }
    if (cached_has_bits & 0x00000002u) {
      lowerbound_ = from.lowerbound_;
    }
    if (cached_has_bits & 0x00000004u) {
      optimalitygap_ = from.optimalitygap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolutionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NS3.SolutionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolutionResponse::CopyFrom(const SolutionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NS3.SolutionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->assignments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nodeflows())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nodeproductflows())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->routes())) return false;
  return true;
}

void SolutionResponse::Swap(SolutionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolutionResponse::InternalSwap(SolutionResponse* other) {
  using std::swap;
  CastToBase(&assignments_)->InternalSwap(CastToBase(&other->assignments_));
  CastToBase(&nodeflows_)->InternalSwap(CastToBase(&other->nodeflows_));
  CastToBase(&nodeproductflows_)->InternalSwap(CastToBase(&other->nodeproductflows_));
  CastToBase(&geometrysequence_)->InternalSwap(CastToBase(&other->geometrysequence_));
  CastToBase(&routes_)->InternalSwap(CastToBase(&other->routes_));
  swap(objective_, other->objective_);
  swap(lowerbound_, other->lowerbound_);
  swap(optimalitygap_, other->optimalitygap_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SolutionResponse::GetMetadata() const {
  protobuf_ns3_2dtbfvuwtge2iq_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ns3_2dtbfvuwtge2iq_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NS3
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::InternalDimension* Arena::CreateMaybeMessage< ::NS3::InternalDimension >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::InternalDimension >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::UserDimension* Arena::CreateMaybeMessage< ::NS3::UserDimension >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::UserDimension >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::DimensionConfiguration* Arena::CreateMaybeMessage< ::NS3::DimensionConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::DimensionConfiguration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::Geocode* Arena::CreateMaybeMessage< ::NS3::Geocode >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::Geocode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::UnitDimensionCost* Arena::CreateMaybeMessage< ::NS3::UnitDimensionCost >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::UnitDimensionCost >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::FixedDimensionCost* Arena::CreateMaybeMessage< ::NS3::FixedDimensionCost >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::FixedDimensionCost >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::FlowDimensionalConstraint* Arena::CreateMaybeMessage< ::NS3::FlowDimensionalConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::FlowDimensionalConstraint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::DimensionRange* Arena::CreateMaybeMessage< ::NS3::DimensionRange >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::DimensionRange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::Node_ProductFlow* Arena::CreateMaybeMessage< ::NS3::Node_ProductFlow >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::Node_ProductFlow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::Node_Flow* Arena::CreateMaybeMessage< ::NS3::Node_Flow >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::Node_Flow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::Node_ProductTransform_Item* Arena::CreateMaybeMessage< ::NS3::Node_ProductTransform_Item >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::Node_ProductTransform_Item >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::Node_ProductTransform* Arena::CreateMaybeMessage< ::NS3::Node_ProductTransform >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::Node_ProductTransform >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::Node* Arena::CreateMaybeMessage< ::NS3::Node >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::Node >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::ProductGroup_ProductSpecification* Arena::CreateMaybeMessage< ::NS3::ProductGroup_ProductSpecification >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::ProductGroup_ProductSpecification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::ProductGroup* Arena::CreateMaybeMessage< ::NS3::ProductGroup >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::ProductGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::LaneRate* Arena::CreateMaybeMessage< ::NS3::LaneRate >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::LaneRate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::CostModel* Arena::CreateMaybeMessage< ::NS3::CostModel >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::CostModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::Model* Arena::CreateMaybeMessage< ::NS3::Model >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::Model >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::SolveRequest* Arena::CreateMaybeMessage< ::NS3::SolveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::SolveRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::SolutionResponse_Assignment* Arena::CreateMaybeMessage< ::NS3::SolutionResponse_Assignment >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::SolutionResponse_Assignment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::SolutionResponse_NodeProductFlow* Arena::CreateMaybeMessage< ::NS3::SolutionResponse_NodeProductFlow >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::SolutionResponse_NodeProductFlow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::SolutionResponse_NodeFlow* Arena::CreateMaybeMessage< ::NS3::SolutionResponse_NodeFlow >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::SolutionResponse_NodeFlow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::SolutionResponse_GeometrySequence* Arena::CreateMaybeMessage< ::NS3::SolutionResponse_GeometrySequence >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::SolutionResponse_GeometrySequence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::SolutionResponse_Route* Arena::CreateMaybeMessage< ::NS3::SolutionResponse_Route >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::SolutionResponse_Route >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NS3::SolutionResponse* Arena::CreateMaybeMessage< ::NS3::SolutionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::NS3::SolutionResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
