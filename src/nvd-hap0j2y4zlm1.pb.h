// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvd-hap0j2y4zlm1.proto

#ifndef PROTOBUF_INCLUDED_nvd_2dhap0j2y4zlm1_2eproto
#define PROTOBUF_INCLUDED_nvd_2dhap0j2y4zlm1_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nvd_2dhap0j2y4zlm1_2eproto 

namespace protobuf_nvd_2dhap0j2y4zlm1_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nvd_2dhap0j2y4zlm1_2eproto
namespace NVD {
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class Geocode;
class GeocodeDefaultTypeInternal;
extern GeocodeDefaultTypeInternal _Geocode_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class Profile_customCycle;
class Profile_customCycleDefaultTypeInternal;
extern Profile_customCycleDefaultTypeInternal _Profile_customCycle_default_instance_;
class SolutionResponse;
class SolutionResponseDefaultTypeInternal;
extern SolutionResponseDefaultTypeInternal _SolutionResponse_default_instance_;
class SolutionResponse_CompactSolution;
class SolutionResponse_CompactSolutionDefaultTypeInternal;
extern SolutionResponse_CompactSolutionDefaultTypeInternal _SolutionResponse_CompactSolution_default_instance_;
class SolutionResponse_Infeasibility;
class SolutionResponse_InfeasibilityDefaultTypeInternal;
extern SolutionResponse_InfeasibilityDefaultTypeInternal _SolutionResponse_Infeasibility_default_instance_;
class SolutionResponse_Infeasibility_Info;
class SolutionResponse_Infeasibility_InfoDefaultTypeInternal;
extern SolutionResponse_Infeasibility_InfoDefaultTypeInternal _SolutionResponse_Infeasibility_Info_default_instance_;
class SolutionResponse_InterStop;
class SolutionResponse_InterStopDefaultTypeInternal;
extern SolutionResponse_InterStopDefaultTypeInternal _SolutionResponse_InterStop_default_instance_;
class SolutionResponse_InterStopAttribute;
class SolutionResponse_InterStopAttributeDefaultTypeInternal;
extern SolutionResponse_InterStopAttributeDefaultTypeInternal _SolutionResponse_InterStopAttribute_default_instance_;
class SolutionResponse_Route;
class SolutionResponse_RouteDefaultTypeInternal;
extern SolutionResponse_RouteDefaultTypeInternal _SolutionResponse_Route_default_instance_;
class SolutionResponse_SolutionInstance;
class SolutionResponse_SolutionInstanceDefaultTypeInternal;
extern SolutionResponse_SolutionInstanceDefaultTypeInternal _SolutionResponse_SolutionInstance_default_instance_;
class SolutionResponse_Stop;
class SolutionResponse_StopDefaultTypeInternal;
extern SolutionResponse_StopDefaultTypeInternal _SolutionResponse_Stop_default_instance_;
class SolutionResponse_StopAttribute;
class SolutionResponse_StopAttributeDefaultTypeInternal;
extern SolutionResponse_StopAttributeDefaultTypeInternal _SolutionResponse_StopAttribute_default_instance_;
class SolutionResponse_TransitRuleAttribute;
class SolutionResponse_TransitRuleAttributeDefaultTypeInternal;
extern SolutionResponse_TransitRuleAttributeDefaultTypeInternal _SolutionResponse_TransitRuleAttribute_default_instance_;
class SolveRequest;
class SolveRequestDefaultTypeInternal;
extern SolveRequestDefaultTypeInternal _SolveRequest_default_instance_;
class Territory;
class TerritoryDefaultTypeInternal;
extern TerritoryDefaultTypeInternal _Territory_default_instance_;
class Visit;
class VisitDefaultTypeInternal;
extern VisitDefaultTypeInternal _Visit_default_instance_;
class VisitSequence;
class VisitSequenceDefaultTypeInternal;
extern VisitSequenceDefaultTypeInternal _VisitSequence_default_instance_;
class Visit_TerritoryRelation;
class Visit_TerritoryRelationDefaultTypeInternal;
extern Visit_TerritoryRelationDefaultTypeInternal _Visit_TerritoryRelation_default_instance_;
}  // namespace NVD
namespace google {
namespace protobuf {
template<> ::NVD::Configuration* Arena::CreateMaybeMessage<::NVD::Configuration>(Arena*);
template<> ::NVD::Geocode* Arena::CreateMaybeMessage<::NVD::Geocode>(Arena*);
template<> ::NVD::Model* Arena::CreateMaybeMessage<::NVD::Model>(Arena*);
template<> ::NVD::Profile* Arena::CreateMaybeMessage<::NVD::Profile>(Arena*);
template<> ::NVD::Profile_customCycle* Arena::CreateMaybeMessage<::NVD::Profile_customCycle>(Arena*);
template<> ::NVD::SolutionResponse* Arena::CreateMaybeMessage<::NVD::SolutionResponse>(Arena*);
template<> ::NVD::SolutionResponse_CompactSolution* Arena::CreateMaybeMessage<::NVD::SolutionResponse_CompactSolution>(Arena*);
template<> ::NVD::SolutionResponse_Infeasibility* Arena::CreateMaybeMessage<::NVD::SolutionResponse_Infeasibility>(Arena*);
template<> ::NVD::SolutionResponse_Infeasibility_Info* Arena::CreateMaybeMessage<::NVD::SolutionResponse_Infeasibility_Info>(Arena*);
template<> ::NVD::SolutionResponse_InterStop* Arena::CreateMaybeMessage<::NVD::SolutionResponse_InterStop>(Arena*);
template<> ::NVD::SolutionResponse_InterStopAttribute* Arena::CreateMaybeMessage<::NVD::SolutionResponse_InterStopAttribute>(Arena*);
template<> ::NVD::SolutionResponse_Route* Arena::CreateMaybeMessage<::NVD::SolutionResponse_Route>(Arena*);
template<> ::NVD::SolutionResponse_SolutionInstance* Arena::CreateMaybeMessage<::NVD::SolutionResponse_SolutionInstance>(Arena*);
template<> ::NVD::SolutionResponse_Stop* Arena::CreateMaybeMessage<::NVD::SolutionResponse_Stop>(Arena*);
template<> ::NVD::SolutionResponse_StopAttribute* Arena::CreateMaybeMessage<::NVD::SolutionResponse_StopAttribute>(Arena*);
template<> ::NVD::SolutionResponse_TransitRuleAttribute* Arena::CreateMaybeMessage<::NVD::SolutionResponse_TransitRuleAttribute>(Arena*);
template<> ::NVD::SolveRequest* Arena::CreateMaybeMessage<::NVD::SolveRequest>(Arena*);
template<> ::NVD::Territory* Arena::CreateMaybeMessage<::NVD::Territory>(Arena*);
template<> ::NVD::Visit* Arena::CreateMaybeMessage<::NVD::Visit>(Arena*);
template<> ::NVD::VisitSequence* Arena::CreateMaybeMessage<::NVD::VisitSequence>(Arena*);
template<> ::NVD::Visit_TerritoryRelation* Arena::CreateMaybeMessage<::NVD::Visit_TerritoryRelation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NVD {

enum Configuration_eMeasurementUnit {
  Configuration_eMeasurementUnit_SECONDS = 0,
  Configuration_eMeasurementUnit_MINUTES = 1,
  Configuration_eMeasurementUnit_HOURS = 2,
  Configuration_eMeasurementUnit_DAYS = 3,
  Configuration_eMeasurementUnit_KILOMETRES = 4,
  Configuration_eMeasurementUnit_MILES = 5
};
bool Configuration_eMeasurementUnit_IsValid(int value);
const Configuration_eMeasurementUnit Configuration_eMeasurementUnit_eMeasurementUnit_MIN = Configuration_eMeasurementUnit_SECONDS;
const Configuration_eMeasurementUnit Configuration_eMeasurementUnit_eMeasurementUnit_MAX = Configuration_eMeasurementUnit_MILES;
const int Configuration_eMeasurementUnit_eMeasurementUnit_ARRAYSIZE = Configuration_eMeasurementUnit_eMeasurementUnit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Configuration_eMeasurementUnit_descriptor();
inline const ::std::string& Configuration_eMeasurementUnit_Name(Configuration_eMeasurementUnit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Configuration_eMeasurementUnit_descriptor(), value);
}
inline bool Configuration_eMeasurementUnit_Parse(
    const ::std::string& name, Configuration_eMeasurementUnit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Configuration_eMeasurementUnit>(
    Configuration_eMeasurementUnit_descriptor(), name, value);
}
enum Profile_eFrequency {
  Profile_eFrequency_CUSTOM = 0,
  Profile_eFrequency_SEVEN_TIMES_A_WEEK = 1,
  Profile_eFrequency_SIX_TIMES_A_WEEK = 2,
  Profile_eFrequency_FIVE_TIMES_A_WEEK = 3,
  Profile_eFrequency_FOUR_TIMES_A_WEEK = 4,
  Profile_eFrequency_THREE_TIMES_A_WEEK = 5,
  Profile_eFrequency_TWICE_A_WEEK = 6,
  Profile_eFrequency_ONCE_A_WEEK = 7,
  Profile_eFrequency_EVERY_SECOND_WEEK = 8,
  Profile_eFrequency_ONCE_A_MONTH = 9
};
bool Profile_eFrequency_IsValid(int value);
const Profile_eFrequency Profile_eFrequency_eFrequency_MIN = Profile_eFrequency_CUSTOM;
const Profile_eFrequency Profile_eFrequency_eFrequency_MAX = Profile_eFrequency_ONCE_A_MONTH;
const int Profile_eFrequency_eFrequency_ARRAYSIZE = Profile_eFrequency_eFrequency_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profile_eFrequency_descriptor();
inline const ::std::string& Profile_eFrequency_Name(Profile_eFrequency value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profile_eFrequency_descriptor(), value);
}
inline bool Profile_eFrequency_Parse(
    const ::std::string& name, Profile_eFrequency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profile_eFrequency>(
    Profile_eFrequency_descriptor(), name, value);
}
enum Visit_TerritoryRelation_Type {
  Visit_TerritoryRelation_Type_INCLUSIVE = 0,
  Visit_TerritoryRelation_Type_EXCLUSIVE = 1
};
bool Visit_TerritoryRelation_Type_IsValid(int value);
const Visit_TerritoryRelation_Type Visit_TerritoryRelation_Type_Type_MIN = Visit_TerritoryRelation_Type_INCLUSIVE;
const Visit_TerritoryRelation_Type Visit_TerritoryRelation_Type_Type_MAX = Visit_TerritoryRelation_Type_EXCLUSIVE;
const int Visit_TerritoryRelation_Type_Type_ARRAYSIZE = Visit_TerritoryRelation_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Visit_TerritoryRelation_Type_descriptor();
inline const ::std::string& Visit_TerritoryRelation_Type_Name(Visit_TerritoryRelation_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Visit_TerritoryRelation_Type_descriptor(), value);
}
inline bool Visit_TerritoryRelation_Type_Parse(
    const ::std::string& name, Visit_TerritoryRelation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Visit_TerritoryRelation_Type>(
    Visit_TerritoryRelation_Type_descriptor(), name, value);
}
enum SolveRequest_SolveType {
  SolveRequest_SolveType_Optimise = 0,
  SolveRequest_SolveType_Evaluate = 1,
  SolveRequest_SolveType_ReOptimise = 2
};
bool SolveRequest_SolveType_IsValid(int value);
const SolveRequest_SolveType SolveRequest_SolveType_SolveType_MIN = SolveRequest_SolveType_Optimise;
const SolveRequest_SolveType SolveRequest_SolveType_SolveType_MAX = SolveRequest_SolveType_ReOptimise;
const int SolveRequest_SolveType_SolveType_ARRAYSIZE = SolveRequest_SolveType_SolveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolveRequest_SolveType_descriptor();
inline const ::std::string& SolveRequest_SolveType_Name(SolveRequest_SolveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolveRequest_SolveType_descriptor(), value);
}
inline bool SolveRequest_SolveType_Parse(
    const ::std::string& name, SolveRequest_SolveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolveRequest_SolveType>(
    SolveRequest_SolveType_descriptor(), name, value);
}
// ===================================================================

class Configuration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Configuration) */ {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Configuration* other);
  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(NULL);
  }

  Configuration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Configuration_eMeasurementUnit eMeasurementUnit;
  static const eMeasurementUnit SECONDS =
    Configuration_eMeasurementUnit_SECONDS;
  static const eMeasurementUnit MINUTES =
    Configuration_eMeasurementUnit_MINUTES;
  static const eMeasurementUnit HOURS =
    Configuration_eMeasurementUnit_HOURS;
  static const eMeasurementUnit DAYS =
    Configuration_eMeasurementUnit_DAYS;
  static const eMeasurementUnit KILOMETRES =
    Configuration_eMeasurementUnit_KILOMETRES;
  static const eMeasurementUnit MILES =
    Configuration_eMeasurementUnit_MILES;
  static inline bool eMeasurementUnit_IsValid(int value) {
    return Configuration_eMeasurementUnit_IsValid(value);
  }
  static const eMeasurementUnit eMeasurementUnit_MIN =
    Configuration_eMeasurementUnit_eMeasurementUnit_MIN;
  static const eMeasurementUnit eMeasurementUnit_MAX =
    Configuration_eMeasurementUnit_eMeasurementUnit_MAX;
  static const int eMeasurementUnit_ARRAYSIZE =
    Configuration_eMeasurementUnit_eMeasurementUnit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eMeasurementUnit_descriptor() {
    return Configuration_eMeasurementUnit_descriptor();
  }
  static inline const ::std::string& eMeasurementUnit_Name(eMeasurementUnit value) {
    return Configuration_eMeasurementUnit_Name(value);
  }
  static inline bool eMeasurementUnit_Parse(const ::std::string& name,
      eMeasurementUnit* value) {
    return Configuration_eMeasurementUnit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 weekLength = 8;
  bool has_weeklength() const;
  void clear_weeklength();
  static const int kWeekLengthFieldNumber = 8;
  ::google::protobuf::int32 weeklength() const;
  void set_weeklength(::google::protobuf::int32 value);

  // required int32 periodLength = 9;
  bool has_periodlength() const;
  void clear_periodlength();
  static const int kPeriodLengthFieldNumber = 9;
  ::google::protobuf::int32 periodlength() const;
  void set_periodlength(::google::protobuf::int32 value);

  // required float interTerritoryBalance = 7 [default = 1];
  bool has_interterritorybalance() const;
  void clear_interterritorybalance();
  static const int kInterTerritoryBalanceFieldNumber = 7;
  float interterritorybalance() const;
  void set_interterritorybalance(float value);

  // required .NVD.Configuration.eMeasurementUnit timeUnit = 1 [default = MINUTES];
  bool has_timeunit() const;
  void clear_timeunit();
  static const int kTimeUnitFieldNumber = 1;
  ::NVD::Configuration_eMeasurementUnit timeunit() const;
  void set_timeunit(::NVD::Configuration_eMeasurementUnit value);

  // required float timeCoef = 2 [default = 1];
  bool has_timecoef() const;
  void clear_timecoef();
  static const int kTimeCoefFieldNumber = 2;
  float timecoef() const;
  void set_timecoef(float value);

  // required float timeCostCoef = 3 [default = 1];
  bool has_timecostcoef() const;
  void clear_timecostcoef();
  static const int kTimeCostCoefFieldNumber = 3;
  float timecostcoef() const;
  void set_timecostcoef(float value);

  // required .NVD.Configuration.eMeasurementUnit distanceUnit = 4 [default = KILOMETRES];
  bool has_distanceunit() const;
  void clear_distanceunit();
  static const int kDistanceUnitFieldNumber = 4;
  ::NVD::Configuration_eMeasurementUnit distanceunit() const;
  void set_distanceunit(::NVD::Configuration_eMeasurementUnit value);

  // required float distanceCostCoef = 5 [default = 1];
  bool has_distancecostcoef() const;
  void clear_distancecostcoef();
  static const int kDistanceCostCoefFieldNumber = 5;
  float distancecostcoef() const;
  void set_distancecostcoef(float value);

  // required float intraTerritoryBalance = 6 [default = 1];
  bool has_intraterritorybalance() const;
  void clear_intraterritorybalance();
  static const int kIntraTerritoryBalanceFieldNumber = 6;
  float intraterritorybalance() const;
  void set_intraterritorybalance(float value);

  // @@protoc_insertion_point(class_scope:NVD.Configuration)
 private:
  void set_has_timeunit();
  void clear_has_timeunit();
  void set_has_timecoef();
  void clear_has_timecoef();
  void set_has_timecostcoef();
  void clear_has_timecostcoef();
  void set_has_distanceunit();
  void clear_has_distanceunit();
  void set_has_distancecostcoef();
  void clear_has_distancecostcoef();
  void set_has_intraterritorybalance();
  void clear_has_intraterritorybalance();
  void set_has_interterritorybalance();
  void clear_has_interterritorybalance();
  void set_has_weeklength();
  void clear_has_weeklength();
  void set_has_periodlength();
  void clear_has_periodlength();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 weeklength_;
  ::google::protobuf::int32 periodlength_;
  float interterritorybalance_;
  int timeunit_;
  float timecoef_;
  float timecostcoef_;
  int distanceunit_;
  float distancecostcoef_;
  float intraterritorybalance_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Geocode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Geocode) */ {
 public:
  Geocode();
  virtual ~Geocode();

  Geocode(const Geocode& from);

  inline Geocode& operator=(const Geocode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Geocode(Geocode&& from) noexcept
    : Geocode() {
    *this = ::std::move(from);
  }

  inline Geocode& operator=(Geocode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geocode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geocode* internal_default_instance() {
    return reinterpret_cast<const Geocode*>(
               &_Geocode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Geocode* other);
  friend void swap(Geocode& a, Geocode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Geocode* New() const final {
    return CreateMaybeMessage<Geocode>(NULL);
  }

  Geocode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Geocode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Geocode& from);
  void MergeFrom(const Geocode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geocode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float longitude = 1;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  float longitude() const;
  void set_longitude(float value);

  // required float latitude = 2;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  float latitude() const;
  void set_latitude(float value);

  // @@protoc_insertion_point(class_scope:NVD.Geocode)
 private:
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float longitude_;
  float latitude_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile_customCycle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Profile.customCycle) */ {
 public:
  Profile_customCycle();
  virtual ~Profile_customCycle();

  Profile_customCycle(const Profile_customCycle& from);

  inline Profile_customCycle& operator=(const Profile_customCycle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile_customCycle(Profile_customCycle&& from) noexcept
    : Profile_customCycle() {
    *this = ::std::move(from);
  }

  inline Profile_customCycle& operator=(Profile_customCycle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile_customCycle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile_customCycle* internal_default_instance() {
    return reinterpret_cast<const Profile_customCycle*>(
               &_Profile_customCycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Profile_customCycle* other);
  friend void swap(Profile_customCycle& a, Profile_customCycle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile_customCycle* New() const final {
    return CreateMaybeMessage<Profile_customCycle>(NULL);
  }

  Profile_customCycle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profile_customCycle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profile_customCycle& from);
  void MergeFrom(const Profile_customCycle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile_customCycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool visitProfile = 2;
  int visitprofile_size() const;
  void clear_visitprofile();
  static const int kVisitProfileFieldNumber = 2;
  bool visitprofile(int index) const;
  void set_visitprofile(int index, bool value);
  void add_visitprofile(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      visitprofile() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_visitprofile();

  // @@protoc_insertion_point(class_scope:NVD.Profile.customCycle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< bool > visitprofile_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(NULL);
  }

  Profile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Profile_customCycle customCycle;

  typedef Profile_eFrequency eFrequency;
  static const eFrequency CUSTOM =
    Profile_eFrequency_CUSTOM;
  static const eFrequency SEVEN_TIMES_A_WEEK =
    Profile_eFrequency_SEVEN_TIMES_A_WEEK;
  static const eFrequency SIX_TIMES_A_WEEK =
    Profile_eFrequency_SIX_TIMES_A_WEEK;
  static const eFrequency FIVE_TIMES_A_WEEK =
    Profile_eFrequency_FIVE_TIMES_A_WEEK;
  static const eFrequency FOUR_TIMES_A_WEEK =
    Profile_eFrequency_FOUR_TIMES_A_WEEK;
  static const eFrequency THREE_TIMES_A_WEEK =
    Profile_eFrequency_THREE_TIMES_A_WEEK;
  static const eFrequency TWICE_A_WEEK =
    Profile_eFrequency_TWICE_A_WEEK;
  static const eFrequency ONCE_A_WEEK =
    Profile_eFrequency_ONCE_A_WEEK;
  static const eFrequency EVERY_SECOND_WEEK =
    Profile_eFrequency_EVERY_SECOND_WEEK;
  static const eFrequency ONCE_A_MONTH =
    Profile_eFrequency_ONCE_A_MONTH;
  static inline bool eFrequency_IsValid(int value) {
    return Profile_eFrequency_IsValid(value);
  }
  static const eFrequency eFrequency_MIN =
    Profile_eFrequency_eFrequency_MIN;
  static const eFrequency eFrequency_MAX =
    Profile_eFrequency_eFrequency_MAX;
  static const int eFrequency_ARRAYSIZE =
    Profile_eFrequency_eFrequency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eFrequency_descriptor() {
    return Profile_eFrequency_descriptor();
  }
  static inline const ::std::string& eFrequency_Name(eFrequency value) {
    return Profile_eFrequency_Name(value);
  }
  static inline bool eFrequency_Parse(const ::std::string& name,
      eFrequency* value) {
    return Profile_eFrequency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NVD.Profile.customCycle allowableCycles = 2;
  int allowablecycles_size() const;
  void clear_allowablecycles();
  static const int kAllowableCyclesFieldNumber = 2;
  ::NVD::Profile_customCycle* mutable_allowablecycles(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::Profile_customCycle >*
      mutable_allowablecycles();
  const ::NVD::Profile_customCycle& allowablecycles(int index) const;
  ::NVD::Profile_customCycle* add_allowablecycles();
  const ::google::protobuf::RepeatedPtrField< ::NVD::Profile_customCycle >&
      allowablecycles() const;

  // required .NVD.Profile.eFrequency frequencyType = 1;
  bool has_frequencytype() const;
  void clear_frequencytype();
  static const int kFrequencyTypeFieldNumber = 1;
  ::NVD::Profile_eFrequency frequencytype() const;
  void set_frequencytype(::NVD::Profile_eFrequency value);

  // optional int32 numVisits = 3;
  bool has_numvisits() const;
  void clear_numvisits();
  static const int kNumVisitsFieldNumber = 3;
  ::google::protobuf::int32 numvisits() const;
  void set_numvisits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVD.Profile)
 private:
  void set_has_frequencytype();
  void clear_has_frequencytype();
  void set_has_numvisits();
  void clear_has_numvisits();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::Profile_customCycle > allowablecycles_;
  int frequencytype_;
  ::google::protobuf::int32 numvisits_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Visit_TerritoryRelation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Visit.TerritoryRelation) */ {
 public:
  Visit_TerritoryRelation();
  virtual ~Visit_TerritoryRelation();

  Visit_TerritoryRelation(const Visit_TerritoryRelation& from);

  inline Visit_TerritoryRelation& operator=(const Visit_TerritoryRelation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Visit_TerritoryRelation(Visit_TerritoryRelation&& from) noexcept
    : Visit_TerritoryRelation() {
    *this = ::std::move(from);
  }

  inline Visit_TerritoryRelation& operator=(Visit_TerritoryRelation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Visit_TerritoryRelation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visit_TerritoryRelation* internal_default_instance() {
    return reinterpret_cast<const Visit_TerritoryRelation*>(
               &_Visit_TerritoryRelation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Visit_TerritoryRelation* other);
  friend void swap(Visit_TerritoryRelation& a, Visit_TerritoryRelation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visit_TerritoryRelation* New() const final {
    return CreateMaybeMessage<Visit_TerritoryRelation>(NULL);
  }

  Visit_TerritoryRelation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Visit_TerritoryRelation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Visit_TerritoryRelation& from);
  void MergeFrom(const Visit_TerritoryRelation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visit_TerritoryRelation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Visit_TerritoryRelation_Type Type;
  static const Type INCLUSIVE =
    Visit_TerritoryRelation_Type_INCLUSIVE;
  static const Type EXCLUSIVE =
    Visit_TerritoryRelation_Type_EXCLUSIVE;
  static inline bool Type_IsValid(int value) {
    return Visit_TerritoryRelation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Visit_TerritoryRelation_Type_Type_MIN;
  static const Type Type_MAX =
    Visit_TerritoryRelation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Visit_TerritoryRelation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Visit_TerritoryRelation_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Visit_TerritoryRelation_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Visit_TerritoryRelation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string territoryIds = 2;
  int territoryids_size() const;
  void clear_territoryids();
  static const int kTerritoryIdsFieldNumber = 2;
  const ::std::string& territoryids(int index) const;
  ::std::string* mutable_territoryids(int index);
  void set_territoryids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_territoryids(int index, ::std::string&& value);
  #endif
  void set_territoryids(int index, const char* value);
  void set_territoryids(int index, const char* value, size_t size);
  ::std::string* add_territoryids();
  void add_territoryids(const ::std::string& value);
  #if LANG_CXX11
  void add_territoryids(::std::string&& value);
  #endif
  void add_territoryids(const char* value);
  void add_territoryids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& territoryids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_territoryids();

  // required .NVD.Visit.TerritoryRelation.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::NVD::Visit_TerritoryRelation_Type type() const;
  void set_type(::NVD::Visit_TerritoryRelation_Type value);

  // @@protoc_insertion_point(class_scope:NVD.Visit.TerritoryRelation)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> territoryids_;
  int type_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Visit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Visit) */ {
 public:
  Visit();
  virtual ~Visit();

  Visit(const Visit& from);

  inline Visit& operator=(const Visit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Visit(Visit&& from) noexcept
    : Visit() {
    *this = ::std::move(from);
  }

  inline Visit& operator=(Visit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Visit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visit* internal_default_instance() {
    return reinterpret_cast<const Visit*>(
               &_Visit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Visit* other);
  friend void swap(Visit& a, Visit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visit* New() const final {
    return CreateMaybeMessage<Visit>(NULL);
  }

  Visit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Visit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Visit& from);
  void MergeFrom(const Visit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Visit_TerritoryRelation TerritoryRelation;

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .NVD.Geocode location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::NVD::Geocode& _internal_location() const;
  public:
  const ::NVD::Geocode& location() const;
  ::NVD::Geocode* release_location();
  ::NVD::Geocode* mutable_location();
  void set_allocated_location(::NVD::Geocode* location);

  // required .NVD.Profile profile = 4;
  bool has_profile() const;
  void clear_profile();
  static const int kProfileFieldNumber = 4;
  private:
  const ::NVD::Profile& _internal_profile() const;
  public:
  const ::NVD::Profile& profile() const;
  ::NVD::Profile* release_profile();
  ::NVD::Profile* mutable_profile();
  void set_allocated_profile(::NVD::Profile* profile);

  // optional .NVD.Visit.TerritoryRelation territoryRelations = 5;
  bool has_territoryrelations() const;
  void clear_territoryrelations();
  static const int kTerritoryRelationsFieldNumber = 5;
  private:
  const ::NVD::Visit_TerritoryRelation& _internal_territoryrelations() const;
  public:
  const ::NVD::Visit_TerritoryRelation& territoryrelations() const;
  ::NVD::Visit_TerritoryRelation* release_territoryrelations();
  ::NVD::Visit_TerritoryRelation* mutable_territoryrelations();
  void set_allocated_territoryrelations(::NVD::Visit_TerritoryRelation* territoryrelations);

  // required float visitTime = 3 [default = 0];
  bool has_visittime() const;
  void clear_visittime();
  static const int kVisitTimeFieldNumber = 3;
  float visittime() const;
  void set_visittime(float value);

  // @@protoc_insertion_point(class_scope:NVD.Visit)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_location();
  void clear_has_location();
  void set_has_visittime();
  void clear_has_visittime();
  void set_has_profile();
  void clear_has_profile();
  void set_has_territoryrelations();
  void clear_has_territoryrelations();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::NVD::Geocode* location_;
  ::NVD::Profile* profile_;
  ::NVD::Visit_TerritoryRelation* territoryrelations_;
  float visittime_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Territory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Territory) */ {
 public:
  Territory();
  virtual ~Territory();

  Territory(const Territory& from);

  inline Territory& operator=(const Territory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Territory(Territory&& from) noexcept
    : Territory() {
    *this = ::std::move(from);
  }

  inline Territory& operator=(Territory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Territory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Territory* internal_default_instance() {
    return reinterpret_cast<const Territory*>(
               &_Territory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Territory* other);
  friend void swap(Territory& a, Territory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Territory* New() const final {
    return CreateMaybeMessage<Territory>(NULL);
  }

  Territory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Territory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Territory& from);
  void MergeFrom(const Territory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Territory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float dailyStartTime = 2;
  int dailystarttime_size() const;
  void clear_dailystarttime();
  static const int kDailyStartTimeFieldNumber = 2;
  float dailystarttime(int index) const;
  void set_dailystarttime(int index, float value);
  void add_dailystarttime(float value);
  const ::google::protobuf::RepeatedField< float >&
      dailystarttime() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dailystarttime();

  // repeated float dailyEndTime = 3;
  int dailyendtime_size() const;
  void clear_dailyendtime();
  static const int kDailyEndTimeFieldNumber = 3;
  float dailyendtime(int index) const;
  void set_dailyendtime(int index, float value);
  void add_dailyendtime(float value);
  const ::google::protobuf::RepeatedField< float >&
      dailyendtime() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dailyendtime();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .NVD.Geocode location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  private:
  const ::NVD::Geocode& _internal_location() const;
  public:
  const ::NVD::Geocode& location() const;
  ::NVD::Geocode* release_location();
  ::NVD::Geocode* mutable_location();
  void set_allocated_location(::NVD::Geocode* location);

  // @@protoc_insertion_point(class_scope:NVD.Territory)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_location();
  void clear_has_location();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > dailystarttime_;
  ::google::protobuf::RepeatedField< float > dailyendtime_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::NVD::Geocode* location_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VisitSequence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.VisitSequence) */ {
 public:
  VisitSequence();
  virtual ~VisitSequence();

  VisitSequence(const VisitSequence& from);

  inline VisitSequence& operator=(const VisitSequence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisitSequence(VisitSequence&& from) noexcept
    : VisitSequence() {
    *this = ::std::move(from);
  }

  inline VisitSequence& operator=(VisitSequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisitSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisitSequence* internal_default_instance() {
    return reinterpret_cast<const VisitSequence*>(
               &_VisitSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(VisitSequence* other);
  friend void swap(VisitSequence& a, VisitSequence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisitSequence* New() const final {
    return CreateMaybeMessage<VisitSequence>(NULL);
  }

  VisitSequence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VisitSequence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VisitSequence& from);
  void MergeFrom(const VisitSequence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitSequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string visitId = 3;
  int visitid_size() const;
  void clear_visitid();
  static const int kVisitIdFieldNumber = 3;
  const ::std::string& visitid(int index) const;
  ::std::string* mutable_visitid(int index);
  void set_visitid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_visitid(int index, ::std::string&& value);
  #endif
  void set_visitid(int index, const char* value);
  void set_visitid(int index, const char* value, size_t size);
  ::std::string* add_visitid();
  void add_visitid(const ::std::string& value);
  #if LANG_CXX11
  void add_visitid(::std::string&& value);
  #endif
  void add_visitid(const char* value);
  void add_visitid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& visitid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_visitid();

  // required string territoryId = 1;
  bool has_territoryid() const;
  void clear_territoryid();
  static const int kTerritoryIdFieldNumber = 1;
  const ::std::string& territoryid() const;
  void set_territoryid(const ::std::string& value);
  #if LANG_CXX11
  void set_territoryid(::std::string&& value);
  #endif
  void set_territoryid(const char* value);
  void set_territoryid(const char* value, size_t size);
  ::std::string* mutable_territoryid();
  ::std::string* release_territoryid();
  void set_allocated_territoryid(::std::string* territoryid);

  // required int32 dayIndex = 2;
  bool has_dayindex() const;
  void clear_dayindex();
  static const int kDayIndexFieldNumber = 2;
  ::google::protobuf::int32 dayindex() const;
  void set_dayindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVD.VisitSequence)
 private:
  void set_has_territoryid();
  void clear_has_territoryid();
  void set_has_dayindex();
  void clear_has_dayindex();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> visitid_;
  ::google::protobuf::internal::ArenaStringPtr territoryid_;
  ::google::protobuf::int32 dayindex_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Model* other);
  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(NULL);
  }

  Model* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NVD.Visit visits = 2;
  int visits_size() const;
  void clear_visits();
  static const int kVisitsFieldNumber = 2;
  ::NVD::Visit* mutable_visits(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::Visit >*
      mutable_visits();
  const ::NVD::Visit& visits(int index) const;
  ::NVD::Visit* add_visits();
  const ::google::protobuf::RepeatedPtrField< ::NVD::Visit >&
      visits() const;

  // repeated .NVD.Territory territories = 3;
  int territories_size() const;
  void clear_territories();
  static const int kTerritoriesFieldNumber = 3;
  ::NVD::Territory* mutable_territories(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::Territory >*
      mutable_territories();
  const ::NVD::Territory& territories(int index) const;
  ::NVD::Territory* add_territories();
  const ::google::protobuf::RepeatedPtrField< ::NVD::Territory >&
      territories() const;

  // repeated .NVD.VisitSequence visitSequence = 4;
  int visitsequence_size() const;
  void clear_visitsequence();
  static const int kVisitSequenceFieldNumber = 4;
  ::NVD::VisitSequence* mutable_visitsequence(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >*
      mutable_visitsequence();
  const ::NVD::VisitSequence& visitsequence(int index) const;
  ::NVD::VisitSequence* add_visitsequence();
  const ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >&
      visitsequence() const;

  // required .NVD.Configuration configuration = 1;
  bool has_configuration() const;
  void clear_configuration();
  static const int kConfigurationFieldNumber = 1;
  private:
  const ::NVD::Configuration& _internal_configuration() const;
  public:
  const ::NVD::Configuration& configuration() const;
  ::NVD::Configuration* release_configuration();
  ::NVD::Configuration* mutable_configuration();
  void set_allocated_configuration(::NVD::Configuration* configuration);

  // @@protoc_insertion_point(class_scope:NVD.Model)
 private:
  void set_has_configuration();
  void clear_has_configuration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::Visit > visits_;
  ::google::protobuf::RepeatedPtrField< ::NVD::Territory > territories_;
  ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence > visitsequence_;
  ::NVD::Configuration* configuration_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolveRequest) */ {
 public:
  SolveRequest();
  virtual ~SolveRequest();

  SolveRequest(const SolveRequest& from);

  inline SolveRequest& operator=(const SolveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolveRequest(SolveRequest&& from) noexcept
    : SolveRequest() {
    *this = ::std::move(from);
  }

  inline SolveRequest& operator=(SolveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolveRequest* internal_default_instance() {
    return reinterpret_cast<const SolveRequest*>(
               &_SolveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SolveRequest* other);
  friend void swap(SolveRequest& a, SolveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolveRequest* New() const final {
    return CreateMaybeMessage<SolveRequest>(NULL);
  }

  SolveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolveRequest& from);
  void MergeFrom(const SolveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SolveRequest_SolveType SolveType;
  static const SolveType Optimise =
    SolveRequest_SolveType_Optimise;
  static const SolveType Evaluate =
    SolveRequest_SolveType_Evaluate;
  static const SolveType ReOptimise =
    SolveRequest_SolveType_ReOptimise;
  static inline bool SolveType_IsValid(int value) {
    return SolveRequest_SolveType_IsValid(value);
  }
  static const SolveType SolveType_MIN =
    SolveRequest_SolveType_SolveType_MIN;
  static const SolveType SolveType_MAX =
    SolveRequest_SolveType_SolveType_MAX;
  static const int SolveType_ARRAYSIZE =
    SolveRequest_SolveType_SolveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolveType_descriptor() {
    return SolveRequest_SolveType_descriptor();
  }
  static inline const ::std::string& SolveType_Name(SolveType value) {
    return SolveRequest_SolveType_Name(value);
  }
  static inline bool SolveType_Parse(const ::std::string& name,
      SolveType* value) {
    return SolveRequest_SolveType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NVD.VisitSequence routes = 3;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 3;
  ::NVD::VisitSequence* mutable_routes(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >*
      mutable_routes();
  const ::NVD::VisitSequence& routes(int index) const;
  ::NVD::VisitSequence* add_routes();
  const ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >&
      routes() const;

  // optional string modelID = 2;
  bool has_modelid() const;
  void clear_modelid();
  static const int kModelIDFieldNumber = 2;
  const ::std::string& modelid() const;
  void set_modelid(const ::std::string& value);
  #if LANG_CXX11
  void set_modelid(::std::string&& value);
  #endif
  void set_modelid(const char* value);
  void set_modelid(const char* value, size_t size);
  ::std::string* mutable_modelid();
  ::std::string* release_modelid();
  void set_allocated_modelid(::std::string* modelid);

  // optional .NVD.Model model = 1;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 1;
  private:
  const ::NVD::Model& _internal_model() const;
  public:
  const ::NVD::Model& model() const;
  ::NVD::Model* release_model();
  ::NVD::Model* mutable_model();
  void set_allocated_model(::NVD::Model* model);

  // optional .NVD.SolveRequest.SolveType solveType = 4 [default = Optimise];
  bool has_solvetype() const;
  void clear_solvetype();
  static const int kSolveTypeFieldNumber = 4;
  ::NVD::SolveRequest_SolveType solvetype() const;
  void set_solvetype(::NVD::SolveRequest_SolveType value);

  // @@protoc_insertion_point(class_scope:NVD.SolveRequest)
 private:
  void set_has_model();
  void clear_has_model();
  void set_has_modelid();
  void clear_has_modelid();
  void set_has_solvetype();
  void clear_has_solvetype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence > routes_;
  ::google::protobuf::internal::ArenaStringPtr modelid_;
  ::NVD::Model* model_;
  int solvetype_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_StopAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.StopAttribute) */ {
 public:
  SolutionResponse_StopAttribute();
  virtual ~SolutionResponse_StopAttribute();

  SolutionResponse_StopAttribute(const SolutionResponse_StopAttribute& from);

  inline SolutionResponse_StopAttribute& operator=(const SolutionResponse_StopAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_StopAttribute(SolutionResponse_StopAttribute&& from) noexcept
    : SolutionResponse_StopAttribute() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_StopAttribute& operator=(SolutionResponse_StopAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_StopAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_StopAttribute* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_StopAttribute*>(
               &_SolutionResponse_StopAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SolutionResponse_StopAttribute* other);
  friend void swap(SolutionResponse_StopAttribute& a, SolutionResponse_StopAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_StopAttribute* New() const final {
    return CreateMaybeMessage<SolutionResponse_StopAttribute>(NULL);
  }

  SolutionResponse_StopAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_StopAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_StopAttribute& from);
  void MergeFrom(const SolutionResponse_StopAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_StopAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dimId = 1;
  bool has_dimid() const;
  void clear_dimid();
  static const int kDimIdFieldNumber = 1;
  const ::std::string& dimid() const;
  void set_dimid(const ::std::string& value);
  #if LANG_CXX11
  void set_dimid(::std::string&& value);
  #endif
  void set_dimid(const char* value);
  void set_dimid(const char* value, size_t size);
  ::std::string* mutable_dimid();
  ::std::string* release_dimid();
  void set_allocated_dimid(::std::string* dimid);

  // required float startValue = 2;
  bool has_startvalue() const;
  void clear_startvalue();
  static const int kStartValueFieldNumber = 2;
  float startvalue() const;
  void set_startvalue(float value);

  // required float endValue = 3;
  bool has_endvalue() const;
  void clear_endvalue();
  static const int kEndValueFieldNumber = 3;
  float endvalue() const;
  void set_endvalue(float value);

  // required float cost = 4;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 4;
  float cost() const;
  void set_cost(float value);

  // required float slackValue = 5;
  bool has_slackvalue() const;
  void clear_slackvalue();
  static const int kSlackValueFieldNumber = 5;
  float slackvalue() const;
  void set_slackvalue(float value);

  // required float slackCost = 6;
  bool has_slackcost() const;
  void clear_slackcost();
  static const int kSlackCostFieldNumber = 6;
  float slackcost() const;
  void set_slackcost(float value);

  // required float tardyValue = 7;
  bool has_tardyvalue() const;
  void clear_tardyvalue();
  static const int kTardyValueFieldNumber = 7;
  float tardyvalue() const;
  void set_tardyvalue(float value);

  // required float tardyCost = 8;
  bool has_tardycost() const;
  void clear_tardycost();
  static const int kTardyCostFieldNumber = 8;
  float tardycost() const;
  void set_tardycost(float value);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.StopAttribute)
 private:
  void set_has_dimid();
  void clear_has_dimid();
  void set_has_startvalue();
  void clear_has_startvalue();
  void set_has_endvalue();
  void clear_has_endvalue();
  void set_has_cost();
  void clear_has_cost();
  void set_has_slackvalue();
  void clear_has_slackvalue();
  void set_has_slackcost();
  void clear_has_slackcost();
  void set_has_tardyvalue();
  void clear_has_tardyvalue();
  void set_has_tardycost();
  void clear_has_tardycost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dimid_;
  float startvalue_;
  float endvalue_;
  float cost_;
  float slackvalue_;
  float slackcost_;
  float tardyvalue_;
  float tardycost_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_InterStopAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.InterStopAttribute) */ {
 public:
  SolutionResponse_InterStopAttribute();
  virtual ~SolutionResponse_InterStopAttribute();

  SolutionResponse_InterStopAttribute(const SolutionResponse_InterStopAttribute& from);

  inline SolutionResponse_InterStopAttribute& operator=(const SolutionResponse_InterStopAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_InterStopAttribute(SolutionResponse_InterStopAttribute&& from) noexcept
    : SolutionResponse_InterStopAttribute() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_InterStopAttribute& operator=(SolutionResponse_InterStopAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_InterStopAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_InterStopAttribute* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_InterStopAttribute*>(
               &_SolutionResponse_InterStopAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SolutionResponse_InterStopAttribute* other);
  friend void swap(SolutionResponse_InterStopAttribute& a, SolutionResponse_InterStopAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_InterStopAttribute* New() const final {
    return CreateMaybeMessage<SolutionResponse_InterStopAttribute>(NULL);
  }

  SolutionResponse_InterStopAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_InterStopAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_InterStopAttribute& from);
  void MergeFrom(const SolutionResponse_InterStopAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_InterStopAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dimId = 1;
  bool has_dimid() const;
  void clear_dimid();
  static const int kDimIdFieldNumber = 1;
  const ::std::string& dimid() const;
  void set_dimid(const ::std::string& value);
  #if LANG_CXX11
  void set_dimid(::std::string&& value);
  #endif
  void set_dimid(const char* value);
  void set_dimid(const char* value, size_t size);
  ::std::string* mutable_dimid();
  ::std::string* release_dimid();
  void set_allocated_dimid(::std::string* dimid);

  // required float startValue = 2;
  bool has_startvalue() const;
  void clear_startvalue();
  static const int kStartValueFieldNumber = 2;
  float startvalue() const;
  void set_startvalue(float value);

  // required float endValue = 3;
  bool has_endvalue() const;
  void clear_endvalue();
  static const int kEndValueFieldNumber = 3;
  float endvalue() const;
  void set_endvalue(float value);

  // required float cost = 4;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 4;
  float cost() const;
  void set_cost(float value);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.InterStopAttribute)
 private:
  void set_has_dimid();
  void clear_has_dimid();
  void set_has_startvalue();
  void clear_has_startvalue();
  void set_has_endvalue();
  void clear_has_endvalue();
  void set_has_cost();
  void clear_has_cost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dimid_;
  float startvalue_;
  float endvalue_;
  float cost_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_Stop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.Stop) */ {
 public:
  SolutionResponse_Stop();
  virtual ~SolutionResponse_Stop();

  SolutionResponse_Stop(const SolutionResponse_Stop& from);

  inline SolutionResponse_Stop& operator=(const SolutionResponse_Stop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_Stop(SolutionResponse_Stop&& from) noexcept
    : SolutionResponse_Stop() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_Stop& operator=(SolutionResponse_Stop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_Stop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_Stop* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_Stop*>(
               &_SolutionResponse_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SolutionResponse_Stop* other);
  friend void swap(SolutionResponse_Stop& a, SolutionResponse_Stop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_Stop* New() const final {
    return CreateMaybeMessage<SolutionResponse_Stop>(NULL);
  }

  SolutionResponse_Stop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_Stop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_Stop& from);
  void MergeFrom(const SolutionResponse_Stop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_Stop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NVD.SolutionResponse.StopAttribute attributes = 5;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 5;
  ::NVD::SolutionResponse_StopAttribute* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_StopAttribute >*
      mutable_attributes();
  const ::NVD::SolutionResponse_StopAttribute& attributes(int index) const;
  ::NVD::SolutionResponse_StopAttribute* add_attributes();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_StopAttribute >&
      attributes() const;

  // required string locationId = 3;
  bool has_locationid() const;
  void clear_locationid();
  static const int kLocationIdFieldNumber = 3;
  const ::std::string& locationid() const;
  void set_locationid(const ::std::string& value);
  #if LANG_CXX11
  void set_locationid(::std::string&& value);
  #endif
  void set_locationid(const char* value);
  void set_locationid(const char* value, size_t size);
  ::std::string* mutable_locationid();
  ::std::string* release_locationid();
  void set_allocated_locationid(::std::string* locationid);

  // required string visitId = 4;
  bool has_visitid() const;
  void clear_visitid();
  static const int kVisitIdFieldNumber = 4;
  const ::std::string& visitid() const;
  void set_visitid(const ::std::string& value);
  #if LANG_CXX11
  void set_visitid(::std::string&& value);
  #endif
  void set_visitid(const char* value);
  void set_visitid(const char* value, size_t size);
  ::std::string* mutable_visitid();
  ::std::string* release_visitid();
  void set_allocated_visitid(::std::string* visitid);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 sequence = 2;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.Stop)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_sequence();
  void clear_has_sequence();
  void set_has_locationid();
  void clear_has_locationid();
  void set_has_visitid();
  void clear_has_visitid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_StopAttribute > attributes_;
  ::google::protobuf::internal::ArenaStringPtr locationid_;
  ::google::protobuf::internal::ArenaStringPtr visitid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 sequence_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_InterStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.InterStop) */ {
 public:
  SolutionResponse_InterStop();
  virtual ~SolutionResponse_InterStop();

  SolutionResponse_InterStop(const SolutionResponse_InterStop& from);

  inline SolutionResponse_InterStop& operator=(const SolutionResponse_InterStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_InterStop(SolutionResponse_InterStop&& from) noexcept
    : SolutionResponse_InterStop() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_InterStop& operator=(SolutionResponse_InterStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_InterStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_InterStop* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_InterStop*>(
               &_SolutionResponse_InterStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SolutionResponse_InterStop* other);
  friend void swap(SolutionResponse_InterStop& a, SolutionResponse_InterStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_InterStop* New() const final {
    return CreateMaybeMessage<SolutionResponse_InterStop>(NULL);
  }

  SolutionResponse_InterStop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_InterStop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_InterStop& from);
  void MergeFrom(const SolutionResponse_InterStop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_InterStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NVD.SolutionResponse.InterStopAttribute attributes = 3;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  ::NVD::SolutionResponse_InterStopAttribute* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStopAttribute >*
      mutable_attributes();
  const ::NVD::SolutionResponse_InterStopAttribute& attributes(int index) const;
  ::NVD::SolutionResponse_InterStopAttribute* add_attributes();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStopAttribute >&
      attributes() const;

  // repeated .NVD.Geocode routeSegments = 4;
  int routesegments_size() const;
  void clear_routesegments();
  static const int kRouteSegmentsFieldNumber = 4;
  ::NVD::Geocode* mutable_routesegments(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::Geocode >*
      mutable_routesegments();
  const ::NVD::Geocode& routesegments(int index) const;
  ::NVD::Geocode* add_routesegments();
  const ::google::protobuf::RepeatedPtrField< ::NVD::Geocode >&
      routesegments() const;

  // required int32 fromStopId = 1;
  bool has_fromstopid() const;
  void clear_fromstopid();
  static const int kFromStopIdFieldNumber = 1;
  ::google::protobuf::int32 fromstopid() const;
  void set_fromstopid(::google::protobuf::int32 value);

  // required int32 toStopId = 2;
  bool has_tostopid() const;
  void clear_tostopid();
  static const int kToStopIdFieldNumber = 2;
  ::google::protobuf::int32 tostopid() const;
  void set_tostopid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.InterStop)
 private:
  void set_has_fromstopid();
  void clear_has_fromstopid();
  void set_has_tostopid();
  void clear_has_tostopid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStopAttribute > attributes_;
  ::google::protobuf::RepeatedPtrField< ::NVD::Geocode > routesegments_;
  ::google::protobuf::int32 fromstopid_;
  ::google::protobuf::int32 tostopid_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_TransitRuleAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.TransitRuleAttribute) */ {
 public:
  SolutionResponse_TransitRuleAttribute();
  virtual ~SolutionResponse_TransitRuleAttribute();

  SolutionResponse_TransitRuleAttribute(const SolutionResponse_TransitRuleAttribute& from);

  inline SolutionResponse_TransitRuleAttribute& operator=(const SolutionResponse_TransitRuleAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_TransitRuleAttribute(SolutionResponse_TransitRuleAttribute&& from) noexcept
    : SolutionResponse_TransitRuleAttribute() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_TransitRuleAttribute& operator=(SolutionResponse_TransitRuleAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_TransitRuleAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_TransitRuleAttribute* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_TransitRuleAttribute*>(
               &_SolutionResponse_TransitRuleAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SolutionResponse_TransitRuleAttribute* other);
  friend void swap(SolutionResponse_TransitRuleAttribute& a, SolutionResponse_TransitRuleAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_TransitRuleAttribute* New() const final {
    return CreateMaybeMessage<SolutionResponse_TransitRuleAttribute>(NULL);
  }

  SolutionResponse_TransitRuleAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_TransitRuleAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_TransitRuleAttribute& from);
  void MergeFrom(const SolutionResponse_TransitRuleAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_TransitRuleAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ruleId = 1;
  bool has_ruleid() const;
  void clear_ruleid();
  static const int kRuleIdFieldNumber = 1;
  const ::std::string& ruleid() const;
  void set_ruleid(const ::std::string& value);
  #if LANG_CXX11
  void set_ruleid(::std::string&& value);
  #endif
  void set_ruleid(const char* value);
  void set_ruleid(const char* value, size_t size);
  ::std::string* mutable_ruleid();
  ::std::string* release_ruleid();
  void set_allocated_ruleid(::std::string* ruleid);

  // required string dimId = 2;
  bool has_dimid() const;
  void clear_dimid();
  static const int kDimIdFieldNumber = 2;
  const ::std::string& dimid() const;
  void set_dimid(const ::std::string& value);
  #if LANG_CXX11
  void set_dimid(::std::string&& value);
  #endif
  void set_dimid(const char* value);
  void set_dimid(const char* value, size_t size);
  ::std::string* mutable_dimid();
  ::std::string* release_dimid();
  void set_allocated_dimid(::std::string* dimid);

  // required int32 fromStopId = 3;
  bool has_fromstopid() const;
  void clear_fromstopid();
  static const int kFromStopIdFieldNumber = 3;
  ::google::protobuf::int32 fromstopid() const;
  void set_fromstopid(::google::protobuf::int32 value);

  // required int32 toStopId = 4;
  bool has_tostopid() const;
  void clear_tostopid();
  static const int kToStopIdFieldNumber = 4;
  ::google::protobuf::int32 tostopid() const;
  void set_tostopid(::google::protobuf::int32 value);

  // required float startValue = 5;
  bool has_startvalue() const;
  void clear_startvalue();
  static const int kStartValueFieldNumber = 5;
  float startvalue() const;
  void set_startvalue(float value);

  // required float endValue = 6;
  bool has_endvalue() const;
  void clear_endvalue();
  static const int kEndValueFieldNumber = 6;
  float endvalue() const;
  void set_endvalue(float value);

  // required float cost = 7;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 7;
  float cost() const;
  void set_cost(float value);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.TransitRuleAttribute)
 private:
  void set_has_ruleid();
  void clear_has_ruleid();
  void set_has_dimid();
  void clear_has_dimid();
  void set_has_fromstopid();
  void clear_has_fromstopid();
  void set_has_tostopid();
  void clear_has_tostopid();
  void set_has_startvalue();
  void clear_has_startvalue();
  void set_has_endvalue();
  void clear_has_endvalue();
  void set_has_cost();
  void clear_has_cost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ruleid_;
  ::google::protobuf::internal::ArenaStringPtr dimid_;
  ::google::protobuf::int32 fromstopid_;
  ::google::protobuf::int32 tostopid_;
  float startvalue_;
  float endvalue_;
  float cost_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_Route : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.Route) */ {
 public:
  SolutionResponse_Route();
  virtual ~SolutionResponse_Route();

  SolutionResponse_Route(const SolutionResponse_Route& from);

  inline SolutionResponse_Route& operator=(const SolutionResponse_Route& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_Route(SolutionResponse_Route&& from) noexcept
    : SolutionResponse_Route() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_Route& operator=(SolutionResponse_Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_Route* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_Route*>(
               &_SolutionResponse_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SolutionResponse_Route* other);
  friend void swap(SolutionResponse_Route& a, SolutionResponse_Route& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_Route* New() const final {
    return CreateMaybeMessage<SolutionResponse_Route>(NULL);
  }

  SolutionResponse_Route* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_Route>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_Route& from);
  void MergeFrom(const SolutionResponse_Route& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NVD.SolutionResponse.Stop stops = 2;
  int stops_size() const;
  void clear_stops();
  static const int kStopsFieldNumber = 2;
  ::NVD::SolutionResponse_Stop* mutable_stops(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Stop >*
      mutable_stops();
  const ::NVD::SolutionResponse_Stop& stops(int index) const;
  ::NVD::SolutionResponse_Stop* add_stops();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Stop >&
      stops() const;

  // repeated .NVD.SolutionResponse.InterStop interStops = 3;
  int interstops_size() const;
  void clear_interstops();
  static const int kInterStopsFieldNumber = 3;
  ::NVD::SolutionResponse_InterStop* mutable_interstops(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStop >*
      mutable_interstops();
  const ::NVD::SolutionResponse_InterStop& interstops(int index) const;
  ::NVD::SolutionResponse_InterStop* add_interstops();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStop >&
      interstops() const;

  // repeated float fixedCost = 4;
  int fixedcost_size() const;
  void clear_fixedcost();
  static const int kFixedCostFieldNumber = 4;
  float fixedcost(int index) const;
  void set_fixedcost(int index, float value);
  void add_fixedcost(float value);
  const ::google::protobuf::RepeatedField< float >&
      fixedcost() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_fixedcost();

  // repeated .NVD.SolutionResponse.TransitRuleAttribute transitRuleAttributes = 5;
  int transitruleattributes_size() const;
  void clear_transitruleattributes();
  static const int kTransitRuleAttributesFieldNumber = 5;
  ::NVD::SolutionResponse_TransitRuleAttribute* mutable_transitruleattributes(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_TransitRuleAttribute >*
      mutable_transitruleattributes();
  const ::NVD::SolutionResponse_TransitRuleAttribute& transitruleattributes(int index) const;
  ::NVD::SolutionResponse_TransitRuleAttribute* add_transitruleattributes();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_TransitRuleAttribute >&
      transitruleattributes() const;

  // required string vehicleId = 1;
  bool has_vehicleid() const;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 1;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // required int32 day = 6;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 6;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.Route)
 private:
  void set_has_vehicleid();
  void clear_has_vehicleid();
  void set_has_day();
  void clear_has_day();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Stop > stops_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStop > interstops_;
  ::google::protobuf::RepeatedField< float > fixedcost_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_TransitRuleAttribute > transitruleattributes_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::int32 day_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_Infeasibility_Info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.Infeasibility.Info) */ {
 public:
  SolutionResponse_Infeasibility_Info();
  virtual ~SolutionResponse_Infeasibility_Info();

  SolutionResponse_Infeasibility_Info(const SolutionResponse_Infeasibility_Info& from);

  inline SolutionResponse_Infeasibility_Info& operator=(const SolutionResponse_Infeasibility_Info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_Infeasibility_Info(SolutionResponse_Infeasibility_Info&& from) noexcept
    : SolutionResponse_Infeasibility_Info() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_Infeasibility_Info& operator=(SolutionResponse_Infeasibility_Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_Infeasibility_Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_Infeasibility_Info* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_Infeasibility_Info*>(
               &_SolutionResponse_Infeasibility_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SolutionResponse_Infeasibility_Info* other);
  friend void swap(SolutionResponse_Infeasibility_Info& a, SolutionResponse_Infeasibility_Info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_Infeasibility_Info* New() const final {
    return CreateMaybeMessage<SolutionResponse_Infeasibility_Info>(NULL);
  }

  SolutionResponse_Infeasibility_Info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_Infeasibility_Info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_Infeasibility_Info& from);
  void MergeFrom(const SolutionResponse_Infeasibility_Info& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_Infeasibility_Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string constrainingTaskIds = 6;
  int constrainingtaskids_size() const;
  void clear_constrainingtaskids();
  static const int kConstrainingTaskIdsFieldNumber = 6;
  const ::std::string& constrainingtaskids(int index) const;
  ::std::string* mutable_constrainingtaskids(int index);
  void set_constrainingtaskids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_constrainingtaskids(int index, ::std::string&& value);
  #endif
  void set_constrainingtaskids(int index, const char* value);
  void set_constrainingtaskids(int index, const char* value, size_t size);
  ::std::string* add_constrainingtaskids();
  void add_constrainingtaskids(const ::std::string& value);
  #if LANG_CXX11
  void add_constrainingtaskids(::std::string&& value);
  #endif
  void add_constrainingtaskids(const char* value);
  void add_constrainingtaskids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& constrainingtaskids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_constrainingtaskids();

  // required string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string dimId = 2;
  bool has_dimid() const;
  void clear_dimid();
  static const int kDimIdFieldNumber = 2;
  const ::std::string& dimid() const;
  void set_dimid(const ::std::string& value);
  #if LANG_CXX11
  void set_dimid(::std::string&& value);
  #endif
  void set_dimid(const char* value);
  void set_dimid(const char* value, size_t size);
  ::std::string* mutable_dimid();
  ::std::string* release_dimid();
  void set_allocated_dimid(::std::string* dimid);

  // optional float limit = 3;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  float limit() const;
  void set_limit(float value);

  // optional float value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  float value() const;
  void set_value(float value);

  // optional int64 count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.Infeasibility.Info)
 private:
  void set_has_message();
  void clear_has_message();
  void set_has_dimid();
  void clear_has_dimid();
  void set_has_limit();
  void clear_has_limit();
  void set_has_value();
  void clear_has_value();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> constrainingtaskids_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr dimid_;
  float limit_;
  float value_;
  ::google::protobuf::int64 count_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_Infeasibility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.Infeasibility) */ {
 public:
  SolutionResponse_Infeasibility();
  virtual ~SolutionResponse_Infeasibility();

  SolutionResponse_Infeasibility(const SolutionResponse_Infeasibility& from);

  inline SolutionResponse_Infeasibility& operator=(const SolutionResponse_Infeasibility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_Infeasibility(SolutionResponse_Infeasibility&& from) noexcept
    : SolutionResponse_Infeasibility() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_Infeasibility& operator=(SolutionResponse_Infeasibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_Infeasibility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_Infeasibility* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_Infeasibility*>(
               &_SolutionResponse_Infeasibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SolutionResponse_Infeasibility* other);
  friend void swap(SolutionResponse_Infeasibility& a, SolutionResponse_Infeasibility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_Infeasibility* New() const final {
    return CreateMaybeMessage<SolutionResponse_Infeasibility>(NULL);
  }

  SolutionResponse_Infeasibility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_Infeasibility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_Infeasibility& from);
  void MergeFrom(const SolutionResponse_Infeasibility& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_Infeasibility* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SolutionResponse_Infeasibility_Info Info;

  // accessors -------------------------------------------------------

  // repeated .NVD.SolutionResponse.Infeasibility.Info infeasibilityInfo = 2;
  int infeasibilityinfo_size() const;
  void clear_infeasibilityinfo();
  static const int kInfeasibilityInfoFieldNumber = 2;
  ::NVD::SolutionResponse_Infeasibility_Info* mutable_infeasibilityinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility_Info >*
      mutable_infeasibilityinfo();
  const ::NVD::SolutionResponse_Infeasibility_Info& infeasibilityinfo(int index) const;
  ::NVD::SolutionResponse_Infeasibility_Info* add_infeasibilityinfo();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility_Info >&
      infeasibilityinfo() const;

  // required string taskId = 1;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& taskid() const;
  void set_taskid(const ::std::string& value);
  #if LANG_CXX11
  void set_taskid(::std::string&& value);
  #endif
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  ::std::string* mutable_taskid();
  ::std::string* release_taskid();
  void set_allocated_taskid(::std::string* taskid);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.Infeasibility)
 private:
  void set_has_taskid();
  void clear_has_taskid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility_Info > infeasibilityinfo_;
  ::google::protobuf::internal::ArenaStringPtr taskid_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_CompactSolution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.CompactSolution) */ {
 public:
  SolutionResponse_CompactSolution();
  virtual ~SolutionResponse_CompactSolution();

  SolutionResponse_CompactSolution(const SolutionResponse_CompactSolution& from);

  inline SolutionResponse_CompactSolution& operator=(const SolutionResponse_CompactSolution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_CompactSolution(SolutionResponse_CompactSolution&& from) noexcept
    : SolutionResponse_CompactSolution() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_CompactSolution& operator=(SolutionResponse_CompactSolution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_CompactSolution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_CompactSolution* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_CompactSolution*>(
               &_SolutionResponse_CompactSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SolutionResponse_CompactSolution* other);
  friend void swap(SolutionResponse_CompactSolution& a, SolutionResponse_CompactSolution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_CompactSolution* New() const final {
    return CreateMaybeMessage<SolutionResponse_CompactSolution>(NULL);
  }

  SolutionResponse_CompactSolution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_CompactSolution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_CompactSolution& from);
  void MergeFrom(const SolutionResponse_CompactSolution& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_CompactSolution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NVD.VisitSequence visitSequence = 1;
  int visitsequence_size() const;
  void clear_visitsequence();
  static const int kVisitSequenceFieldNumber = 1;
  ::NVD::VisitSequence* mutable_visitsequence(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >*
      mutable_visitsequence();
  const ::NVD::VisitSequence& visitsequence(int index) const;
  ::NVD::VisitSequence* add_visitsequence();
  const ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >&
      visitsequence() const;

  // repeated float objectives = 2;
  int objectives_size() const;
  void clear_objectives();
  static const int kObjectivesFieldNumber = 2;
  float objectives(int index) const;
  void set_objectives(int index, float value);
  void add_objectives(float value);
  const ::google::protobuf::RepeatedField< float >&
      objectives() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_objectives();

  // repeated string objectiveNames = 3;
  int objectivenames_size() const;
  void clear_objectivenames();
  static const int kObjectiveNamesFieldNumber = 3;
  const ::std::string& objectivenames(int index) const;
  ::std::string* mutable_objectivenames(int index);
  void set_objectivenames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_objectivenames(int index, ::std::string&& value);
  #endif
  void set_objectivenames(int index, const char* value);
  void set_objectivenames(int index, const char* value, size_t size);
  ::std::string* add_objectivenames();
  void add_objectivenames(const ::std::string& value);
  #if LANG_CXX11
  void add_objectivenames(::std::string&& value);
  #endif
  void add_objectivenames(const char* value);
  void add_objectivenames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& objectivenames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_objectivenames();

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.CompactSolution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence > visitsequence_;
  ::google::protobuf::RepeatedField< float > objectives_;
  ::google::protobuf::RepeatedPtrField< ::std::string> objectivenames_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse_SolutionInstance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse.SolutionInstance) */ {
 public:
  SolutionResponse_SolutionInstance();
  virtual ~SolutionResponse_SolutionInstance();

  SolutionResponse_SolutionInstance(const SolutionResponse_SolutionInstance& from);

  inline SolutionResponse_SolutionInstance& operator=(const SolutionResponse_SolutionInstance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse_SolutionInstance(SolutionResponse_SolutionInstance&& from) noexcept
    : SolutionResponse_SolutionInstance() {
    *this = ::std::move(from);
  }

  inline SolutionResponse_SolutionInstance& operator=(SolutionResponse_SolutionInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse_SolutionInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse_SolutionInstance* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse_SolutionInstance*>(
               &_SolutionResponse_SolutionInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SolutionResponse_SolutionInstance* other);
  friend void swap(SolutionResponse_SolutionInstance& a, SolutionResponse_SolutionInstance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse_SolutionInstance* New() const final {
    return CreateMaybeMessage<SolutionResponse_SolutionInstance>(NULL);
  }

  SolutionResponse_SolutionInstance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse_SolutionInstance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse_SolutionInstance& from);
  void MergeFrom(const SolutionResponse_SolutionInstance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse_SolutionInstance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NVD.SolutionResponse.Route routes = 1;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 1;
  ::NVD::SolutionResponse_Route* mutable_routes(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Route >*
      mutable_routes();
  const ::NVD::SolutionResponse_Route& routes(int index) const;
  ::NVD::SolutionResponse_Route* add_routes();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Route >&
      routes() const;

  // repeated .NVD.SolutionResponse.Infeasibility infeasibilities = 2;
  int infeasibilities_size() const;
  void clear_infeasibilities();
  static const int kInfeasibilitiesFieldNumber = 2;
  ::NVD::SolutionResponse_Infeasibility* mutable_infeasibilities(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility >*
      mutable_infeasibilities();
  const ::NVD::SolutionResponse_Infeasibility& infeasibilities(int index) const;
  ::NVD::SolutionResponse_Infeasibility* add_infeasibilities();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility >&
      infeasibilities() const;

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse.SolutionInstance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Route > routes_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility > infeasibilities_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolutionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVD.SolutionResponse) */ {
 public:
  SolutionResponse();
  virtual ~SolutionResponse();

  SolutionResponse(const SolutionResponse& from);

  inline SolutionResponse& operator=(const SolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolutionResponse(SolutionResponse&& from) noexcept
    : SolutionResponse() {
    *this = ::std::move(from);
  }

  inline SolutionResponse& operator=(SolutionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionResponse* internal_default_instance() {
    return reinterpret_cast<const SolutionResponse*>(
               &_SolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SolutionResponse* other);
  friend void swap(SolutionResponse& a, SolutionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolutionResponse* New() const final {
    return CreateMaybeMessage<SolutionResponse>(NULL);
  }

  SolutionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolutionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolutionResponse& from);
  void MergeFrom(const SolutionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SolutionResponse_StopAttribute StopAttribute;
  typedef SolutionResponse_InterStopAttribute InterStopAttribute;
  typedef SolutionResponse_Stop Stop;
  typedef SolutionResponse_InterStop InterStop;
  typedef SolutionResponse_TransitRuleAttribute TransitRuleAttribute;
  typedef SolutionResponse_Route Route;
  typedef SolutionResponse_Infeasibility Infeasibility;
  typedef SolutionResponse_CompactSolution CompactSolution;
  typedef SolutionResponse_SolutionInstance SolutionInstance;

  // accessors -------------------------------------------------------

  // repeated .NVD.SolutionResponse.CompactSolution frontier = 1;
  int frontier_size() const;
  void clear_frontier();
  static const int kFrontierFieldNumber = 1;
  ::NVD::SolutionResponse_CompactSolution* mutable_frontier(int index);
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_CompactSolution >*
      mutable_frontier();
  const ::NVD::SolutionResponse_CompactSolution& frontier(int index) const;
  ::NVD::SolutionResponse_CompactSolution* add_frontier();
  const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_CompactSolution >&
      frontier() const;

  // optional .NVD.SolutionResponse.SolutionInstance instance = 2;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 2;
  private:
  const ::NVD::SolutionResponse_SolutionInstance& _internal_instance() const;
  public:
  const ::NVD::SolutionResponse_SolutionInstance& instance() const;
  ::NVD::SolutionResponse_SolutionInstance* release_instance();
  ::NVD::SolutionResponse_SolutionInstance* mutable_instance();
  void set_allocated_instance(::NVD::SolutionResponse_SolutionInstance* instance);

  // @@protoc_insertion_point(class_scope:NVD.SolutionResponse)
 private:
  void set_has_instance();
  void clear_has_instance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_CompactSolution > frontier_;
  ::NVD::SolutionResponse_SolutionInstance* instance_;
  friend struct ::protobuf_nvd_2dhap0j2y4zlm1_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Configuration

// required .NVD.Configuration.eMeasurementUnit timeUnit = 1 [default = MINUTES];
inline bool Configuration::has_timeunit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Configuration::set_has_timeunit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Configuration::clear_has_timeunit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Configuration::clear_timeunit() {
  timeunit_ = 1;
  clear_has_timeunit();
}
inline ::NVD::Configuration_eMeasurementUnit Configuration::timeunit() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.timeUnit)
  return static_cast< ::NVD::Configuration_eMeasurementUnit >(timeunit_);
}
inline void Configuration::set_timeunit(::NVD::Configuration_eMeasurementUnit value) {
  assert(::NVD::Configuration_eMeasurementUnit_IsValid(value));
  set_has_timeunit();
  timeunit_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.timeUnit)
}

// required float timeCoef = 2 [default = 1];
inline bool Configuration::has_timecoef() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Configuration::set_has_timecoef() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Configuration::clear_has_timecoef() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Configuration::clear_timecoef() {
  timecoef_ = 1;
  clear_has_timecoef();
}
inline float Configuration::timecoef() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.timeCoef)
  return timecoef_;
}
inline void Configuration::set_timecoef(float value) {
  set_has_timecoef();
  timecoef_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.timeCoef)
}

// required float timeCostCoef = 3 [default = 1];
inline bool Configuration::has_timecostcoef() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Configuration::set_has_timecostcoef() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Configuration::clear_has_timecostcoef() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Configuration::clear_timecostcoef() {
  timecostcoef_ = 1;
  clear_has_timecostcoef();
}
inline float Configuration::timecostcoef() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.timeCostCoef)
  return timecostcoef_;
}
inline void Configuration::set_timecostcoef(float value) {
  set_has_timecostcoef();
  timecostcoef_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.timeCostCoef)
}

// required .NVD.Configuration.eMeasurementUnit distanceUnit = 4 [default = KILOMETRES];
inline bool Configuration::has_distanceunit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Configuration::set_has_distanceunit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Configuration::clear_has_distanceunit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Configuration::clear_distanceunit() {
  distanceunit_ = 4;
  clear_has_distanceunit();
}
inline ::NVD::Configuration_eMeasurementUnit Configuration::distanceunit() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.distanceUnit)
  return static_cast< ::NVD::Configuration_eMeasurementUnit >(distanceunit_);
}
inline void Configuration::set_distanceunit(::NVD::Configuration_eMeasurementUnit value) {
  assert(::NVD::Configuration_eMeasurementUnit_IsValid(value));
  set_has_distanceunit();
  distanceunit_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.distanceUnit)
}

// required float distanceCostCoef = 5 [default = 1];
inline bool Configuration::has_distancecostcoef() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Configuration::set_has_distancecostcoef() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Configuration::clear_has_distancecostcoef() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Configuration::clear_distancecostcoef() {
  distancecostcoef_ = 1;
  clear_has_distancecostcoef();
}
inline float Configuration::distancecostcoef() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.distanceCostCoef)
  return distancecostcoef_;
}
inline void Configuration::set_distancecostcoef(float value) {
  set_has_distancecostcoef();
  distancecostcoef_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.distanceCostCoef)
}

// required float intraTerritoryBalance = 6 [default = 1];
inline bool Configuration::has_intraterritorybalance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Configuration::set_has_intraterritorybalance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Configuration::clear_has_intraterritorybalance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Configuration::clear_intraterritorybalance() {
  intraterritorybalance_ = 1;
  clear_has_intraterritorybalance();
}
inline float Configuration::intraterritorybalance() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.intraTerritoryBalance)
  return intraterritorybalance_;
}
inline void Configuration::set_intraterritorybalance(float value) {
  set_has_intraterritorybalance();
  intraterritorybalance_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.intraTerritoryBalance)
}

// required float interTerritoryBalance = 7 [default = 1];
inline bool Configuration::has_interterritorybalance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Configuration::set_has_interterritorybalance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Configuration::clear_has_interterritorybalance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Configuration::clear_interterritorybalance() {
  interterritorybalance_ = 1;
  clear_has_interterritorybalance();
}
inline float Configuration::interterritorybalance() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.interTerritoryBalance)
  return interterritorybalance_;
}
inline void Configuration::set_interterritorybalance(float value) {
  set_has_interterritorybalance();
  interterritorybalance_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.interTerritoryBalance)
}

// required int32 weekLength = 8;
inline bool Configuration::has_weeklength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration::set_has_weeklength() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration::clear_has_weeklength() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration::clear_weeklength() {
  weeklength_ = 0;
  clear_has_weeklength();
}
inline ::google::protobuf::int32 Configuration::weeklength() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.weekLength)
  return weeklength_;
}
inline void Configuration::set_weeklength(::google::protobuf::int32 value) {
  set_has_weeklength();
  weeklength_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.weekLength)
}

// required int32 periodLength = 9;
inline bool Configuration::has_periodlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Configuration::set_has_periodlength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Configuration::clear_has_periodlength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Configuration::clear_periodlength() {
  periodlength_ = 0;
  clear_has_periodlength();
}
inline ::google::protobuf::int32 Configuration::periodlength() const {
  // @@protoc_insertion_point(field_get:NVD.Configuration.periodLength)
  return periodlength_;
}
inline void Configuration::set_periodlength(::google::protobuf::int32 value) {
  set_has_periodlength();
  periodlength_ = value;
  // @@protoc_insertion_point(field_set:NVD.Configuration.periodLength)
}

// -------------------------------------------------------------------

// Geocode

// required float longitude = 1;
inline bool Geocode::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geocode::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geocode::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geocode::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float Geocode::longitude() const {
  // @@protoc_insertion_point(field_get:NVD.Geocode.longitude)
  return longitude_;
}
inline void Geocode::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:NVD.Geocode.longitude)
}

// required float latitude = 2;
inline bool Geocode::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geocode::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geocode::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geocode::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float Geocode::latitude() const {
  // @@protoc_insertion_point(field_get:NVD.Geocode.latitude)
  return latitude_;
}
inline void Geocode::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:NVD.Geocode.latitude)
}

// -------------------------------------------------------------------

// Profile_customCycle

// repeated bool visitProfile = 2;
inline int Profile_customCycle::visitprofile_size() const {
  return visitprofile_.size();
}
inline void Profile_customCycle::clear_visitprofile() {
  visitprofile_.Clear();
}
inline bool Profile_customCycle::visitprofile(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Profile.customCycle.visitProfile)
  return visitprofile_.Get(index);
}
inline void Profile_customCycle::set_visitprofile(int index, bool value) {
  visitprofile_.Set(index, value);
  // @@protoc_insertion_point(field_set:NVD.Profile.customCycle.visitProfile)
}
inline void Profile_customCycle::add_visitprofile(bool value) {
  visitprofile_.Add(value);
  // @@protoc_insertion_point(field_add:NVD.Profile.customCycle.visitProfile)
}
inline const ::google::protobuf::RepeatedField< bool >&
Profile_customCycle::visitprofile() const {
  // @@protoc_insertion_point(field_list:NVD.Profile.customCycle.visitProfile)
  return visitprofile_;
}
inline ::google::protobuf::RepeatedField< bool >*
Profile_customCycle::mutable_visitprofile() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Profile.customCycle.visitProfile)
  return &visitprofile_;
}

// -------------------------------------------------------------------

// Profile

// required .NVD.Profile.eFrequency frequencyType = 1;
inline bool Profile::has_frequencytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile::set_has_frequencytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile::clear_has_frequencytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile::clear_frequencytype() {
  frequencytype_ = 0;
  clear_has_frequencytype();
}
inline ::NVD::Profile_eFrequency Profile::frequencytype() const {
  // @@protoc_insertion_point(field_get:NVD.Profile.frequencyType)
  return static_cast< ::NVD::Profile_eFrequency >(frequencytype_);
}
inline void Profile::set_frequencytype(::NVD::Profile_eFrequency value) {
  assert(::NVD::Profile_eFrequency_IsValid(value));
  set_has_frequencytype();
  frequencytype_ = value;
  // @@protoc_insertion_point(field_set:NVD.Profile.frequencyType)
}

// repeated .NVD.Profile.customCycle allowableCycles = 2;
inline int Profile::allowablecycles_size() const {
  return allowablecycles_.size();
}
inline void Profile::clear_allowablecycles() {
  allowablecycles_.Clear();
}
inline ::NVD::Profile_customCycle* Profile::mutable_allowablecycles(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.Profile.allowableCycles)
  return allowablecycles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::Profile_customCycle >*
Profile::mutable_allowablecycles() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Profile.allowableCycles)
  return &allowablecycles_;
}
inline const ::NVD::Profile_customCycle& Profile::allowablecycles(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Profile.allowableCycles)
  return allowablecycles_.Get(index);
}
inline ::NVD::Profile_customCycle* Profile::add_allowablecycles() {
  // @@protoc_insertion_point(field_add:NVD.Profile.allowableCycles)
  return allowablecycles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::Profile_customCycle >&
Profile::allowablecycles() const {
  // @@protoc_insertion_point(field_list:NVD.Profile.allowableCycles)
  return allowablecycles_;
}

// optional int32 numVisits = 3;
inline bool Profile::has_numvisits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile::set_has_numvisits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile::clear_has_numvisits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile::clear_numvisits() {
  numvisits_ = 0;
  clear_has_numvisits();
}
inline ::google::protobuf::int32 Profile::numvisits() const {
  // @@protoc_insertion_point(field_get:NVD.Profile.numVisits)
  return numvisits_;
}
inline void Profile::set_numvisits(::google::protobuf::int32 value) {
  set_has_numvisits();
  numvisits_ = value;
  // @@protoc_insertion_point(field_set:NVD.Profile.numVisits)
}

// -------------------------------------------------------------------

// Visit_TerritoryRelation

// required .NVD.Visit.TerritoryRelation.Type type = 1;
inline bool Visit_TerritoryRelation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Visit_TerritoryRelation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Visit_TerritoryRelation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Visit_TerritoryRelation::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NVD::Visit_TerritoryRelation_Type Visit_TerritoryRelation::type() const {
  // @@protoc_insertion_point(field_get:NVD.Visit.TerritoryRelation.type)
  return static_cast< ::NVD::Visit_TerritoryRelation_Type >(type_);
}
inline void Visit_TerritoryRelation::set_type(::NVD::Visit_TerritoryRelation_Type value) {
  assert(::NVD::Visit_TerritoryRelation_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:NVD.Visit.TerritoryRelation.type)
}

// repeated string territoryIds = 2;
inline int Visit_TerritoryRelation::territoryids_size() const {
  return territoryids_.size();
}
inline void Visit_TerritoryRelation::clear_territoryids() {
  territoryids_.Clear();
}
inline const ::std::string& Visit_TerritoryRelation::territoryids(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Visit.TerritoryRelation.territoryIds)
  return territoryids_.Get(index);
}
inline ::std::string* Visit_TerritoryRelation::mutable_territoryids(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.Visit.TerritoryRelation.territoryIds)
  return territoryids_.Mutable(index);
}
inline void Visit_TerritoryRelation::set_territoryids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVD.Visit.TerritoryRelation.territoryIds)
  territoryids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Visit_TerritoryRelation::set_territoryids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NVD.Visit.TerritoryRelation.territoryIds)
  territoryids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Visit_TerritoryRelation::set_territoryids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  territoryids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVD.Visit.TerritoryRelation.territoryIds)
}
inline void Visit_TerritoryRelation::set_territoryids(int index, const char* value, size_t size) {
  territoryids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVD.Visit.TerritoryRelation.territoryIds)
}
inline ::std::string* Visit_TerritoryRelation::add_territoryids() {
  // @@protoc_insertion_point(field_add_mutable:NVD.Visit.TerritoryRelation.territoryIds)
  return territoryids_.Add();
}
inline void Visit_TerritoryRelation::add_territoryids(const ::std::string& value) {
  territoryids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVD.Visit.TerritoryRelation.territoryIds)
}
#if LANG_CXX11
inline void Visit_TerritoryRelation::add_territoryids(::std::string&& value) {
  territoryids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NVD.Visit.TerritoryRelation.territoryIds)
}
#endif
inline void Visit_TerritoryRelation::add_territoryids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  territoryids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVD.Visit.TerritoryRelation.territoryIds)
}
inline void Visit_TerritoryRelation::add_territoryids(const char* value, size_t size) {
  territoryids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVD.Visit.TerritoryRelation.territoryIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Visit_TerritoryRelation::territoryids() const {
  // @@protoc_insertion_point(field_list:NVD.Visit.TerritoryRelation.territoryIds)
  return territoryids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Visit_TerritoryRelation::mutable_territoryids() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Visit.TerritoryRelation.territoryIds)
  return &territoryids_;
}

// -------------------------------------------------------------------

// Visit

// required string id = 1;
inline bool Visit::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Visit::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Visit::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Visit::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Visit::id() const {
  // @@protoc_insertion_point(field_get:NVD.Visit.id)
  return id_.GetNoArena();
}
inline void Visit::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.Visit.id)
}
#if LANG_CXX11
inline void Visit::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.Visit.id)
}
#endif
inline void Visit::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.Visit.id)
}
inline void Visit::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.Visit.id)
}
inline ::std::string* Visit::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:NVD.Visit.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Visit::release_id() {
  // @@protoc_insertion_point(field_release:NVD.Visit.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Visit::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NVD.Visit.id)
}

// required .NVD.Geocode location = 2;
inline bool Visit::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Visit::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Visit::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Visit::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
inline const ::NVD::Geocode& Visit::_internal_location() const {
  return *location_;
}
inline const ::NVD::Geocode& Visit::location() const {
  const ::NVD::Geocode* p = location_;
  // @@protoc_insertion_point(field_get:NVD.Visit.location)
  return p != NULL ? *p : *reinterpret_cast<const ::NVD::Geocode*>(
      &::NVD::_Geocode_default_instance_);
}
inline ::NVD::Geocode* Visit::release_location() {
  // @@protoc_insertion_point(field_release:NVD.Visit.location)
  clear_has_location();
  ::NVD::Geocode* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::NVD::Geocode* Visit::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::NVD::Geocode>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVD.Visit.location)
  return location_;
}
inline void Visit::set_allocated_location(::NVD::Geocode* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:NVD.Visit.location)
}

// required float visitTime = 3 [default = 0];
inline bool Visit::has_visittime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Visit::set_has_visittime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Visit::clear_has_visittime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Visit::clear_visittime() {
  visittime_ = 0;
  clear_has_visittime();
}
inline float Visit::visittime() const {
  // @@protoc_insertion_point(field_get:NVD.Visit.visitTime)
  return visittime_;
}
inline void Visit::set_visittime(float value) {
  set_has_visittime();
  visittime_ = value;
  // @@protoc_insertion_point(field_set:NVD.Visit.visitTime)
}

// required .NVD.Profile profile = 4;
inline bool Visit::has_profile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Visit::set_has_profile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Visit::clear_has_profile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Visit::clear_profile() {
  if (profile_ != NULL) profile_->Clear();
  clear_has_profile();
}
inline const ::NVD::Profile& Visit::_internal_profile() const {
  return *profile_;
}
inline const ::NVD::Profile& Visit::profile() const {
  const ::NVD::Profile* p = profile_;
  // @@protoc_insertion_point(field_get:NVD.Visit.profile)
  return p != NULL ? *p : *reinterpret_cast<const ::NVD::Profile*>(
      &::NVD::_Profile_default_instance_);
}
inline ::NVD::Profile* Visit::release_profile() {
  // @@protoc_insertion_point(field_release:NVD.Visit.profile)
  clear_has_profile();
  ::NVD::Profile* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline ::NVD::Profile* Visit::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) {
    auto* p = CreateMaybeMessage<::NVD::Profile>(GetArenaNoVirtual());
    profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVD.Visit.profile)
  return profile_;
}
inline void Visit::set_allocated_profile(::NVD::Profile* profile) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete profile_;
  }
  if (profile) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      profile = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    set_has_profile();
  } else {
    clear_has_profile();
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:NVD.Visit.profile)
}

// optional .NVD.Visit.TerritoryRelation territoryRelations = 5;
inline bool Visit::has_territoryrelations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Visit::set_has_territoryrelations() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Visit::clear_has_territoryrelations() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Visit::clear_territoryrelations() {
  if (territoryrelations_ != NULL) territoryrelations_->Clear();
  clear_has_territoryrelations();
}
inline const ::NVD::Visit_TerritoryRelation& Visit::_internal_territoryrelations() const {
  return *territoryrelations_;
}
inline const ::NVD::Visit_TerritoryRelation& Visit::territoryrelations() const {
  const ::NVD::Visit_TerritoryRelation* p = territoryrelations_;
  // @@protoc_insertion_point(field_get:NVD.Visit.territoryRelations)
  return p != NULL ? *p : *reinterpret_cast<const ::NVD::Visit_TerritoryRelation*>(
      &::NVD::_Visit_TerritoryRelation_default_instance_);
}
inline ::NVD::Visit_TerritoryRelation* Visit::release_territoryrelations() {
  // @@protoc_insertion_point(field_release:NVD.Visit.territoryRelations)
  clear_has_territoryrelations();
  ::NVD::Visit_TerritoryRelation* temp = territoryrelations_;
  territoryrelations_ = NULL;
  return temp;
}
inline ::NVD::Visit_TerritoryRelation* Visit::mutable_territoryrelations() {
  set_has_territoryrelations();
  if (territoryrelations_ == NULL) {
    auto* p = CreateMaybeMessage<::NVD::Visit_TerritoryRelation>(GetArenaNoVirtual());
    territoryrelations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVD.Visit.territoryRelations)
  return territoryrelations_;
}
inline void Visit::set_allocated_territoryrelations(::NVD::Visit_TerritoryRelation* territoryrelations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete territoryrelations_;
  }
  if (territoryrelations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      territoryrelations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, territoryrelations, submessage_arena);
    }
    set_has_territoryrelations();
  } else {
    clear_has_territoryrelations();
  }
  territoryrelations_ = territoryrelations;
  // @@protoc_insertion_point(field_set_allocated:NVD.Visit.territoryRelations)
}

// -------------------------------------------------------------------

// Territory

// required string id = 1;
inline bool Territory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Territory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Territory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Territory::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Territory::id() const {
  // @@protoc_insertion_point(field_get:NVD.Territory.id)
  return id_.GetNoArena();
}
inline void Territory::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.Territory.id)
}
#if LANG_CXX11
inline void Territory::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.Territory.id)
}
#endif
inline void Territory::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.Territory.id)
}
inline void Territory::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.Territory.id)
}
inline ::std::string* Territory::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:NVD.Territory.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Territory::release_id() {
  // @@protoc_insertion_point(field_release:NVD.Territory.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Territory::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NVD.Territory.id)
}

// repeated float dailyStartTime = 2;
inline int Territory::dailystarttime_size() const {
  return dailystarttime_.size();
}
inline void Territory::clear_dailystarttime() {
  dailystarttime_.Clear();
}
inline float Territory::dailystarttime(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Territory.dailyStartTime)
  return dailystarttime_.Get(index);
}
inline void Territory::set_dailystarttime(int index, float value) {
  dailystarttime_.Set(index, value);
  // @@protoc_insertion_point(field_set:NVD.Territory.dailyStartTime)
}
inline void Territory::add_dailystarttime(float value) {
  dailystarttime_.Add(value);
  // @@protoc_insertion_point(field_add:NVD.Territory.dailyStartTime)
}
inline const ::google::protobuf::RepeatedField< float >&
Territory::dailystarttime() const {
  // @@protoc_insertion_point(field_list:NVD.Territory.dailyStartTime)
  return dailystarttime_;
}
inline ::google::protobuf::RepeatedField< float >*
Territory::mutable_dailystarttime() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Territory.dailyStartTime)
  return &dailystarttime_;
}

// repeated float dailyEndTime = 3;
inline int Territory::dailyendtime_size() const {
  return dailyendtime_.size();
}
inline void Territory::clear_dailyendtime() {
  dailyendtime_.Clear();
}
inline float Territory::dailyendtime(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Territory.dailyEndTime)
  return dailyendtime_.Get(index);
}
inline void Territory::set_dailyendtime(int index, float value) {
  dailyendtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:NVD.Territory.dailyEndTime)
}
inline void Territory::add_dailyendtime(float value) {
  dailyendtime_.Add(value);
  // @@protoc_insertion_point(field_add:NVD.Territory.dailyEndTime)
}
inline const ::google::protobuf::RepeatedField< float >&
Territory::dailyendtime() const {
  // @@protoc_insertion_point(field_list:NVD.Territory.dailyEndTime)
  return dailyendtime_;
}
inline ::google::protobuf::RepeatedField< float >*
Territory::mutable_dailyendtime() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Territory.dailyEndTime)
  return &dailyendtime_;
}

// required .NVD.Geocode location = 4;
inline bool Territory::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Territory::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Territory::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Territory::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
inline const ::NVD::Geocode& Territory::_internal_location() const {
  return *location_;
}
inline const ::NVD::Geocode& Territory::location() const {
  const ::NVD::Geocode* p = location_;
  // @@protoc_insertion_point(field_get:NVD.Territory.location)
  return p != NULL ? *p : *reinterpret_cast<const ::NVD::Geocode*>(
      &::NVD::_Geocode_default_instance_);
}
inline ::NVD::Geocode* Territory::release_location() {
  // @@protoc_insertion_point(field_release:NVD.Territory.location)
  clear_has_location();
  ::NVD::Geocode* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::NVD::Geocode* Territory::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::NVD::Geocode>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVD.Territory.location)
  return location_;
}
inline void Territory::set_allocated_location(::NVD::Geocode* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:NVD.Territory.location)
}

// -------------------------------------------------------------------

// VisitSequence

// required string territoryId = 1;
inline bool VisitSequence::has_territoryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisitSequence::set_has_territoryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisitSequence::clear_has_territoryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisitSequence::clear_territoryid() {
  territoryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_territoryid();
}
inline const ::std::string& VisitSequence::territoryid() const {
  // @@protoc_insertion_point(field_get:NVD.VisitSequence.territoryId)
  return territoryid_.GetNoArena();
}
inline void VisitSequence::set_territoryid(const ::std::string& value) {
  set_has_territoryid();
  territoryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.VisitSequence.territoryId)
}
#if LANG_CXX11
inline void VisitSequence::set_territoryid(::std::string&& value) {
  set_has_territoryid();
  territoryid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.VisitSequence.territoryId)
}
#endif
inline void VisitSequence::set_territoryid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_territoryid();
  territoryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.VisitSequence.territoryId)
}
inline void VisitSequence::set_territoryid(const char* value, size_t size) {
  set_has_territoryid();
  territoryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.VisitSequence.territoryId)
}
inline ::std::string* VisitSequence::mutable_territoryid() {
  set_has_territoryid();
  // @@protoc_insertion_point(field_mutable:NVD.VisitSequence.territoryId)
  return territoryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisitSequence::release_territoryid() {
  // @@protoc_insertion_point(field_release:NVD.VisitSequence.territoryId)
  if (!has_territoryid()) {
    return NULL;
  }
  clear_has_territoryid();
  return territoryid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisitSequence::set_allocated_territoryid(::std::string* territoryid) {
  if (territoryid != NULL) {
    set_has_territoryid();
  } else {
    clear_has_territoryid();
  }
  territoryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), territoryid);
  // @@protoc_insertion_point(field_set_allocated:NVD.VisitSequence.territoryId)
}

// required int32 dayIndex = 2;
inline bool VisitSequence::has_dayindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisitSequence::set_has_dayindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisitSequence::clear_has_dayindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisitSequence::clear_dayindex() {
  dayindex_ = 0;
  clear_has_dayindex();
}
inline ::google::protobuf::int32 VisitSequence::dayindex() const {
  // @@protoc_insertion_point(field_get:NVD.VisitSequence.dayIndex)
  return dayindex_;
}
inline void VisitSequence::set_dayindex(::google::protobuf::int32 value) {
  set_has_dayindex();
  dayindex_ = value;
  // @@protoc_insertion_point(field_set:NVD.VisitSequence.dayIndex)
}

// repeated string visitId = 3;
inline int VisitSequence::visitid_size() const {
  return visitid_.size();
}
inline void VisitSequence::clear_visitid() {
  visitid_.Clear();
}
inline const ::std::string& VisitSequence::visitid(int index) const {
  // @@protoc_insertion_point(field_get:NVD.VisitSequence.visitId)
  return visitid_.Get(index);
}
inline ::std::string* VisitSequence::mutable_visitid(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.VisitSequence.visitId)
  return visitid_.Mutable(index);
}
inline void VisitSequence::set_visitid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVD.VisitSequence.visitId)
  visitid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VisitSequence::set_visitid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NVD.VisitSequence.visitId)
  visitid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VisitSequence::set_visitid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  visitid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVD.VisitSequence.visitId)
}
inline void VisitSequence::set_visitid(int index, const char* value, size_t size) {
  visitid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVD.VisitSequence.visitId)
}
inline ::std::string* VisitSequence::add_visitid() {
  // @@protoc_insertion_point(field_add_mutable:NVD.VisitSequence.visitId)
  return visitid_.Add();
}
inline void VisitSequence::add_visitid(const ::std::string& value) {
  visitid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVD.VisitSequence.visitId)
}
#if LANG_CXX11
inline void VisitSequence::add_visitid(::std::string&& value) {
  visitid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NVD.VisitSequence.visitId)
}
#endif
inline void VisitSequence::add_visitid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  visitid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVD.VisitSequence.visitId)
}
inline void VisitSequence::add_visitid(const char* value, size_t size) {
  visitid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVD.VisitSequence.visitId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VisitSequence::visitid() const {
  // @@protoc_insertion_point(field_list:NVD.VisitSequence.visitId)
  return visitid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VisitSequence::mutable_visitid() {
  // @@protoc_insertion_point(field_mutable_list:NVD.VisitSequence.visitId)
  return &visitid_;
}

// -------------------------------------------------------------------

// Model

// required .NVD.Configuration configuration = 1;
inline bool Model::has_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Model::set_has_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Model::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Model::clear_configuration() {
  if (configuration_ != NULL) configuration_->Clear();
  clear_has_configuration();
}
inline const ::NVD::Configuration& Model::_internal_configuration() const {
  return *configuration_;
}
inline const ::NVD::Configuration& Model::configuration() const {
  const ::NVD::Configuration* p = configuration_;
  // @@protoc_insertion_point(field_get:NVD.Model.configuration)
  return p != NULL ? *p : *reinterpret_cast<const ::NVD::Configuration*>(
      &::NVD::_Configuration_default_instance_);
}
inline ::NVD::Configuration* Model::release_configuration() {
  // @@protoc_insertion_point(field_release:NVD.Model.configuration)
  clear_has_configuration();
  ::NVD::Configuration* temp = configuration_;
  configuration_ = NULL;
  return temp;
}
inline ::NVD::Configuration* Model::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == NULL) {
    auto* p = CreateMaybeMessage<::NVD::Configuration>(GetArenaNoVirtual());
    configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVD.Model.configuration)
  return configuration_;
}
inline void Model::set_allocated_configuration(::NVD::Configuration* configuration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete configuration_;
  }
  if (configuration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      configuration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    set_has_configuration();
  } else {
    clear_has_configuration();
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:NVD.Model.configuration)
}

// repeated .NVD.Visit visits = 2;
inline int Model::visits_size() const {
  return visits_.size();
}
inline void Model::clear_visits() {
  visits_.Clear();
}
inline ::NVD::Visit* Model::mutable_visits(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.Model.visits)
  return visits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::Visit >*
Model::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Model.visits)
  return &visits_;
}
inline const ::NVD::Visit& Model::visits(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Model.visits)
  return visits_.Get(index);
}
inline ::NVD::Visit* Model::add_visits() {
  // @@protoc_insertion_point(field_add:NVD.Model.visits)
  return visits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::Visit >&
Model::visits() const {
  // @@protoc_insertion_point(field_list:NVD.Model.visits)
  return visits_;
}

// repeated .NVD.Territory territories = 3;
inline int Model::territories_size() const {
  return territories_.size();
}
inline void Model::clear_territories() {
  territories_.Clear();
}
inline ::NVD::Territory* Model::mutable_territories(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.Model.territories)
  return territories_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::Territory >*
Model::mutable_territories() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Model.territories)
  return &territories_;
}
inline const ::NVD::Territory& Model::territories(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Model.territories)
  return territories_.Get(index);
}
inline ::NVD::Territory* Model::add_territories() {
  // @@protoc_insertion_point(field_add:NVD.Model.territories)
  return territories_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::Territory >&
Model::territories() const {
  // @@protoc_insertion_point(field_list:NVD.Model.territories)
  return territories_;
}

// repeated .NVD.VisitSequence visitSequence = 4;
inline int Model::visitsequence_size() const {
  return visitsequence_.size();
}
inline void Model::clear_visitsequence() {
  visitsequence_.Clear();
}
inline ::NVD::VisitSequence* Model::mutable_visitsequence(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.Model.visitSequence)
  return visitsequence_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >*
Model::mutable_visitsequence() {
  // @@protoc_insertion_point(field_mutable_list:NVD.Model.visitSequence)
  return &visitsequence_;
}
inline const ::NVD::VisitSequence& Model::visitsequence(int index) const {
  // @@protoc_insertion_point(field_get:NVD.Model.visitSequence)
  return visitsequence_.Get(index);
}
inline ::NVD::VisitSequence* Model::add_visitsequence() {
  // @@protoc_insertion_point(field_add:NVD.Model.visitSequence)
  return visitsequence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >&
Model::visitsequence() const {
  // @@protoc_insertion_point(field_list:NVD.Model.visitSequence)
  return visitsequence_;
}

// -------------------------------------------------------------------

// SolveRequest

// optional .NVD.Model model = 1;
inline bool SolveRequest::has_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolveRequest::set_has_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolveRequest::clear_has_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolveRequest::clear_model() {
  if (model_ != NULL) model_->Clear();
  clear_has_model();
}
inline const ::NVD::Model& SolveRequest::_internal_model() const {
  return *model_;
}
inline const ::NVD::Model& SolveRequest::model() const {
  const ::NVD::Model* p = model_;
  // @@protoc_insertion_point(field_get:NVD.SolveRequest.model)
  return p != NULL ? *p : *reinterpret_cast<const ::NVD::Model*>(
      &::NVD::_Model_default_instance_);
}
inline ::NVD::Model* SolveRequest::release_model() {
  // @@protoc_insertion_point(field_release:NVD.SolveRequest.model)
  clear_has_model();
  ::NVD::Model* temp = model_;
  model_ = NULL;
  return temp;
}
inline ::NVD::Model* SolveRequest::mutable_model() {
  set_has_model();
  if (model_ == NULL) {
    auto* p = CreateMaybeMessage<::NVD::Model>(GetArenaNoVirtual());
    model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVD.SolveRequest.model)
  return model_;
}
inline void SolveRequest::set_allocated_model(::NVD::Model* model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_;
  }
  if (model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    set_has_model();
  } else {
    clear_has_model();
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:NVD.SolveRequest.model)
}

// optional string modelID = 2;
inline bool SolveRequest::has_modelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolveRequest::set_has_modelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolveRequest::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolveRequest::clear_modelid() {
  modelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modelid();
}
inline const ::std::string& SolveRequest::modelid() const {
  // @@protoc_insertion_point(field_get:NVD.SolveRequest.modelID)
  return modelid_.GetNoArena();
}
inline void SolveRequest::set_modelid(const ::std::string& value) {
  set_has_modelid();
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolveRequest.modelID)
}
#if LANG_CXX11
inline void SolveRequest::set_modelid(::std::string&& value) {
  set_has_modelid();
  modelid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolveRequest.modelID)
}
#endif
inline void SolveRequest::set_modelid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_modelid();
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolveRequest.modelID)
}
inline void SolveRequest::set_modelid(const char* value, size_t size) {
  set_has_modelid();
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolveRequest.modelID)
}
inline ::std::string* SolveRequest::mutable_modelid() {
  set_has_modelid();
  // @@protoc_insertion_point(field_mutable:NVD.SolveRequest.modelID)
  return modelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolveRequest::release_modelid() {
  // @@protoc_insertion_point(field_release:NVD.SolveRequest.modelID)
  if (!has_modelid()) {
    return NULL;
  }
  clear_has_modelid();
  return modelid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolveRequest::set_allocated_modelid(::std::string* modelid) {
  if (modelid != NULL) {
    set_has_modelid();
  } else {
    clear_has_modelid();
  }
  modelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolveRequest.modelID)
}

// repeated .NVD.VisitSequence routes = 3;
inline int SolveRequest::routes_size() const {
  return routes_.size();
}
inline void SolveRequest::clear_routes() {
  routes_.Clear();
}
inline ::NVD::VisitSequence* SolveRequest::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolveRequest.routes)
  return routes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >*
SolveRequest::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolveRequest.routes)
  return &routes_;
}
inline const ::NVD::VisitSequence& SolveRequest::routes(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolveRequest.routes)
  return routes_.Get(index);
}
inline ::NVD::VisitSequence* SolveRequest::add_routes() {
  // @@protoc_insertion_point(field_add:NVD.SolveRequest.routes)
  return routes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >&
SolveRequest::routes() const {
  // @@protoc_insertion_point(field_list:NVD.SolveRequest.routes)
  return routes_;
}

// optional .NVD.SolveRequest.SolveType solveType = 4 [default = Optimise];
inline bool SolveRequest::has_solvetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolveRequest::set_has_solvetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolveRequest::clear_has_solvetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolveRequest::clear_solvetype() {
  solvetype_ = 0;
  clear_has_solvetype();
}
inline ::NVD::SolveRequest_SolveType SolveRequest::solvetype() const {
  // @@protoc_insertion_point(field_get:NVD.SolveRequest.solveType)
  return static_cast< ::NVD::SolveRequest_SolveType >(solvetype_);
}
inline void SolveRequest::set_solvetype(::NVD::SolveRequest_SolveType value) {
  assert(::NVD::SolveRequest_SolveType_IsValid(value));
  set_has_solvetype();
  solvetype_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolveRequest.solveType)
}

// -------------------------------------------------------------------

// SolutionResponse_StopAttribute

// required string dimId = 1;
inline bool SolutionResponse_StopAttribute::has_dimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_dimid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_StopAttribute::clear_has_dimid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_StopAttribute::clear_dimid() {
  dimid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dimid();
}
inline const ::std::string& SolutionResponse_StopAttribute::dimid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.dimId)
  return dimid_.GetNoArena();
}
inline void SolutionResponse_StopAttribute::set_dimid(const ::std::string& value) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.dimId)
}
#if LANG_CXX11
inline void SolutionResponse_StopAttribute::set_dimid(::std::string&& value) {
  set_has_dimid();
  dimid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.StopAttribute.dimId)
}
#endif
inline void SolutionResponse_StopAttribute::set_dimid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.StopAttribute.dimId)
}
inline void SolutionResponse_StopAttribute::set_dimid(const char* value, size_t size) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.StopAttribute.dimId)
}
inline ::std::string* SolutionResponse_StopAttribute::mutable_dimid() {
  set_has_dimid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.StopAttribute.dimId)
  return dimid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_StopAttribute::release_dimid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.StopAttribute.dimId)
  if (!has_dimid()) {
    return NULL;
  }
  clear_has_dimid();
  return dimid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_StopAttribute::set_allocated_dimid(::std::string* dimid) {
  if (dimid != NULL) {
    set_has_dimid();
  } else {
    clear_has_dimid();
  }
  dimid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.StopAttribute.dimId)
}

// required float startValue = 2;
inline bool SolutionResponse_StopAttribute::has_startvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_startvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolutionResponse_StopAttribute::clear_has_startvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolutionResponse_StopAttribute::clear_startvalue() {
  startvalue_ = 0;
  clear_has_startvalue();
}
inline float SolutionResponse_StopAttribute::startvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.startValue)
  return startvalue_;
}
inline void SolutionResponse_StopAttribute::set_startvalue(float value) {
  set_has_startvalue();
  startvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.startValue)
}

// required float endValue = 3;
inline bool SolutionResponse_StopAttribute::has_endvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_endvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolutionResponse_StopAttribute::clear_has_endvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolutionResponse_StopAttribute::clear_endvalue() {
  endvalue_ = 0;
  clear_has_endvalue();
}
inline float SolutionResponse_StopAttribute::endvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.endValue)
  return endvalue_;
}
inline void SolutionResponse_StopAttribute::set_endvalue(float value) {
  set_has_endvalue();
  endvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.endValue)
}

// required float cost = 4;
inline bool SolutionResponse_StopAttribute::has_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolutionResponse_StopAttribute::clear_has_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolutionResponse_StopAttribute::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline float SolutionResponse_StopAttribute::cost() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.cost)
  return cost_;
}
inline void SolutionResponse_StopAttribute::set_cost(float value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.cost)
}

// required float slackValue = 5;
inline bool SolutionResponse_StopAttribute::has_slackvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_slackvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolutionResponse_StopAttribute::clear_has_slackvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolutionResponse_StopAttribute::clear_slackvalue() {
  slackvalue_ = 0;
  clear_has_slackvalue();
}
inline float SolutionResponse_StopAttribute::slackvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.slackValue)
  return slackvalue_;
}
inline void SolutionResponse_StopAttribute::set_slackvalue(float value) {
  set_has_slackvalue();
  slackvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.slackValue)
}

// required float slackCost = 6;
inline bool SolutionResponse_StopAttribute::has_slackcost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_slackcost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolutionResponse_StopAttribute::clear_has_slackcost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolutionResponse_StopAttribute::clear_slackcost() {
  slackcost_ = 0;
  clear_has_slackcost();
}
inline float SolutionResponse_StopAttribute::slackcost() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.slackCost)
  return slackcost_;
}
inline void SolutionResponse_StopAttribute::set_slackcost(float value) {
  set_has_slackcost();
  slackcost_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.slackCost)
}

// required float tardyValue = 7;
inline bool SolutionResponse_StopAttribute::has_tardyvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_tardyvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolutionResponse_StopAttribute::clear_has_tardyvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolutionResponse_StopAttribute::clear_tardyvalue() {
  tardyvalue_ = 0;
  clear_has_tardyvalue();
}
inline float SolutionResponse_StopAttribute::tardyvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.tardyValue)
  return tardyvalue_;
}
inline void SolutionResponse_StopAttribute::set_tardyvalue(float value) {
  set_has_tardyvalue();
  tardyvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.tardyValue)
}

// required float tardyCost = 8;
inline bool SolutionResponse_StopAttribute::has_tardycost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolutionResponse_StopAttribute::set_has_tardycost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolutionResponse_StopAttribute::clear_has_tardycost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolutionResponse_StopAttribute::clear_tardycost() {
  tardycost_ = 0;
  clear_has_tardycost();
}
inline float SolutionResponse_StopAttribute::tardycost() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.StopAttribute.tardyCost)
  return tardycost_;
}
inline void SolutionResponse_StopAttribute::set_tardycost(float value) {
  set_has_tardycost();
  tardycost_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.StopAttribute.tardyCost)
}

// -------------------------------------------------------------------

// SolutionResponse_InterStopAttribute

// required string dimId = 1;
inline bool SolutionResponse_InterStopAttribute::has_dimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_InterStopAttribute::set_has_dimid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_InterStopAttribute::clear_has_dimid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_InterStopAttribute::clear_dimid() {
  dimid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dimid();
}
inline const ::std::string& SolutionResponse_InterStopAttribute::dimid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStopAttribute.dimId)
  return dimid_.GetNoArena();
}
inline void SolutionResponse_InterStopAttribute::set_dimid(const ::std::string& value) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.InterStopAttribute.dimId)
}
#if LANG_CXX11
inline void SolutionResponse_InterStopAttribute::set_dimid(::std::string&& value) {
  set_has_dimid();
  dimid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.InterStopAttribute.dimId)
}
#endif
inline void SolutionResponse_InterStopAttribute::set_dimid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.InterStopAttribute.dimId)
}
inline void SolutionResponse_InterStopAttribute::set_dimid(const char* value, size_t size) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.InterStopAttribute.dimId)
}
inline ::std::string* SolutionResponse_InterStopAttribute::mutable_dimid() {
  set_has_dimid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.InterStopAttribute.dimId)
  return dimid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_InterStopAttribute::release_dimid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.InterStopAttribute.dimId)
  if (!has_dimid()) {
    return NULL;
  }
  clear_has_dimid();
  return dimid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_InterStopAttribute::set_allocated_dimid(::std::string* dimid) {
  if (dimid != NULL) {
    set_has_dimid();
  } else {
    clear_has_dimid();
  }
  dimid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.InterStopAttribute.dimId)
}

// required float startValue = 2;
inline bool SolutionResponse_InterStopAttribute::has_startvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolutionResponse_InterStopAttribute::set_has_startvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolutionResponse_InterStopAttribute::clear_has_startvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolutionResponse_InterStopAttribute::clear_startvalue() {
  startvalue_ = 0;
  clear_has_startvalue();
}
inline float SolutionResponse_InterStopAttribute::startvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStopAttribute.startValue)
  return startvalue_;
}
inline void SolutionResponse_InterStopAttribute::set_startvalue(float value) {
  set_has_startvalue();
  startvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.InterStopAttribute.startValue)
}

// required float endValue = 3;
inline bool SolutionResponse_InterStopAttribute::has_endvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolutionResponse_InterStopAttribute::set_has_endvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolutionResponse_InterStopAttribute::clear_has_endvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolutionResponse_InterStopAttribute::clear_endvalue() {
  endvalue_ = 0;
  clear_has_endvalue();
}
inline float SolutionResponse_InterStopAttribute::endvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStopAttribute.endValue)
  return endvalue_;
}
inline void SolutionResponse_InterStopAttribute::set_endvalue(float value) {
  set_has_endvalue();
  endvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.InterStopAttribute.endValue)
}

// required float cost = 4;
inline bool SolutionResponse_InterStopAttribute::has_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolutionResponse_InterStopAttribute::set_has_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolutionResponse_InterStopAttribute::clear_has_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolutionResponse_InterStopAttribute::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline float SolutionResponse_InterStopAttribute::cost() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStopAttribute.cost)
  return cost_;
}
inline void SolutionResponse_InterStopAttribute::set_cost(float value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.InterStopAttribute.cost)
}

// -------------------------------------------------------------------

// SolutionResponse_Stop

// required int32 id = 1;
inline bool SolutionResponse_Stop::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolutionResponse_Stop::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolutionResponse_Stop::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolutionResponse_Stop::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SolutionResponse_Stop::id() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Stop.id)
  return id_;
}
inline void SolutionResponse_Stop::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Stop.id)
}

// required int32 sequence = 2;
inline bool SolutionResponse_Stop::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolutionResponse_Stop::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolutionResponse_Stop::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolutionResponse_Stop::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 SolutionResponse_Stop::sequence() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Stop.sequence)
  return sequence_;
}
inline void SolutionResponse_Stop::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Stop.sequence)
}

// required string locationId = 3;
inline bool SolutionResponse_Stop::has_locationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_Stop::set_has_locationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_Stop::clear_has_locationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_Stop::clear_locationid() {
  locationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locationid();
}
inline const ::std::string& SolutionResponse_Stop::locationid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Stop.locationId)
  return locationid_.GetNoArena();
}
inline void SolutionResponse_Stop::set_locationid(const ::std::string& value) {
  set_has_locationid();
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Stop.locationId)
}
#if LANG_CXX11
inline void SolutionResponse_Stop::set_locationid(::std::string&& value) {
  set_has_locationid();
  locationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.Stop.locationId)
}
#endif
inline void SolutionResponse_Stop::set_locationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_locationid();
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.Stop.locationId)
}
inline void SolutionResponse_Stop::set_locationid(const char* value, size_t size) {
  set_has_locationid();
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.Stop.locationId)
}
inline ::std::string* SolutionResponse_Stop::mutable_locationid() {
  set_has_locationid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Stop.locationId)
  return locationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_Stop::release_locationid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.Stop.locationId)
  if (!has_locationid()) {
    return NULL;
  }
  clear_has_locationid();
  return locationid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_Stop::set_allocated_locationid(::std::string* locationid) {
  if (locationid != NULL) {
    set_has_locationid();
  } else {
    clear_has_locationid();
  }
  locationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locationid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.Stop.locationId)
}

// required string visitId = 4;
inline bool SolutionResponse_Stop::has_visitid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolutionResponse_Stop::set_has_visitid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolutionResponse_Stop::clear_has_visitid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolutionResponse_Stop::clear_visitid() {
  visitid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_visitid();
}
inline const ::std::string& SolutionResponse_Stop::visitid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Stop.visitId)
  return visitid_.GetNoArena();
}
inline void SolutionResponse_Stop::set_visitid(const ::std::string& value) {
  set_has_visitid();
  visitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Stop.visitId)
}
#if LANG_CXX11
inline void SolutionResponse_Stop::set_visitid(::std::string&& value) {
  set_has_visitid();
  visitid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.Stop.visitId)
}
#endif
inline void SolutionResponse_Stop::set_visitid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_visitid();
  visitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.Stop.visitId)
}
inline void SolutionResponse_Stop::set_visitid(const char* value, size_t size) {
  set_has_visitid();
  visitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.Stop.visitId)
}
inline ::std::string* SolutionResponse_Stop::mutable_visitid() {
  set_has_visitid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Stop.visitId)
  return visitid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_Stop::release_visitid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.Stop.visitId)
  if (!has_visitid()) {
    return NULL;
  }
  clear_has_visitid();
  return visitid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_Stop::set_allocated_visitid(::std::string* visitid) {
  if (visitid != NULL) {
    set_has_visitid();
  } else {
    clear_has_visitid();
  }
  visitid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visitid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.Stop.visitId)
}

// repeated .NVD.SolutionResponse.StopAttribute attributes = 5;
inline int SolutionResponse_Stop::attributes_size() const {
  return attributes_.size();
}
inline void SolutionResponse_Stop::clear_attributes() {
  attributes_.Clear();
}
inline ::NVD::SolutionResponse_StopAttribute* SolutionResponse_Stop::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Stop.attributes)
  return attributes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_StopAttribute >*
SolutionResponse_Stop::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.Stop.attributes)
  return &attributes_;
}
inline const ::NVD::SolutionResponse_StopAttribute& SolutionResponse_Stop::attributes(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Stop.attributes)
  return attributes_.Get(index);
}
inline ::NVD::SolutionResponse_StopAttribute* SolutionResponse_Stop::add_attributes() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Stop.attributes)
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_StopAttribute >&
SolutionResponse_Stop::attributes() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.Stop.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// SolutionResponse_InterStop

// required int32 fromStopId = 1;
inline bool SolutionResponse_InterStop::has_fromstopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_InterStop::set_has_fromstopid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_InterStop::clear_has_fromstopid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_InterStop::clear_fromstopid() {
  fromstopid_ = 0;
  clear_has_fromstopid();
}
inline ::google::protobuf::int32 SolutionResponse_InterStop::fromstopid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStop.fromStopId)
  return fromstopid_;
}
inline void SolutionResponse_InterStop::set_fromstopid(::google::protobuf::int32 value) {
  set_has_fromstopid();
  fromstopid_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.InterStop.fromStopId)
}

// required int32 toStopId = 2;
inline bool SolutionResponse_InterStop::has_tostopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolutionResponse_InterStop::set_has_tostopid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolutionResponse_InterStop::clear_has_tostopid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolutionResponse_InterStop::clear_tostopid() {
  tostopid_ = 0;
  clear_has_tostopid();
}
inline ::google::protobuf::int32 SolutionResponse_InterStop::tostopid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStop.toStopId)
  return tostopid_;
}
inline void SolutionResponse_InterStop::set_tostopid(::google::protobuf::int32 value) {
  set_has_tostopid();
  tostopid_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.InterStop.toStopId)
}

// repeated .NVD.SolutionResponse.InterStopAttribute attributes = 3;
inline int SolutionResponse_InterStop::attributes_size() const {
  return attributes_.size();
}
inline void SolutionResponse_InterStop::clear_attributes() {
  attributes_.Clear();
}
inline ::NVD::SolutionResponse_InterStopAttribute* SolutionResponse_InterStop::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.InterStop.attributes)
  return attributes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStopAttribute >*
SolutionResponse_InterStop::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.InterStop.attributes)
  return &attributes_;
}
inline const ::NVD::SolutionResponse_InterStopAttribute& SolutionResponse_InterStop::attributes(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStop.attributes)
  return attributes_.Get(index);
}
inline ::NVD::SolutionResponse_InterStopAttribute* SolutionResponse_InterStop::add_attributes() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.InterStop.attributes)
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStopAttribute >&
SolutionResponse_InterStop::attributes() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.InterStop.attributes)
  return attributes_;
}

// repeated .NVD.Geocode routeSegments = 4;
inline int SolutionResponse_InterStop::routesegments_size() const {
  return routesegments_.size();
}
inline void SolutionResponse_InterStop::clear_routesegments() {
  routesegments_.Clear();
}
inline ::NVD::Geocode* SolutionResponse_InterStop::mutable_routesegments(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.InterStop.routeSegments)
  return routesegments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::Geocode >*
SolutionResponse_InterStop::mutable_routesegments() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.InterStop.routeSegments)
  return &routesegments_;
}
inline const ::NVD::Geocode& SolutionResponse_InterStop::routesegments(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.InterStop.routeSegments)
  return routesegments_.Get(index);
}
inline ::NVD::Geocode* SolutionResponse_InterStop::add_routesegments() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.InterStop.routeSegments)
  return routesegments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::Geocode >&
SolutionResponse_InterStop::routesegments() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.InterStop.routeSegments)
  return routesegments_;
}

// -------------------------------------------------------------------

// SolutionResponse_TransitRuleAttribute

// required string ruleId = 1;
inline bool SolutionResponse_TransitRuleAttribute::has_ruleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_TransitRuleAttribute::set_has_ruleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_ruleid() {
  ruleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ruleid();
}
inline const ::std::string& SolutionResponse_TransitRuleAttribute::ruleid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
  return ruleid_.GetNoArena();
}
inline void SolutionResponse_TransitRuleAttribute::set_ruleid(const ::std::string& value) {
  set_has_ruleid();
  ruleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
}
#if LANG_CXX11
inline void SolutionResponse_TransitRuleAttribute::set_ruleid(::std::string&& value) {
  set_has_ruleid();
  ruleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
}
#endif
inline void SolutionResponse_TransitRuleAttribute::set_ruleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ruleid();
  ruleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
}
inline void SolutionResponse_TransitRuleAttribute::set_ruleid(const char* value, size_t size) {
  set_has_ruleid();
  ruleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
}
inline ::std::string* SolutionResponse_TransitRuleAttribute::mutable_ruleid() {
  set_has_ruleid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
  return ruleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_TransitRuleAttribute::release_ruleid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
  if (!has_ruleid()) {
    return NULL;
  }
  clear_has_ruleid();
  return ruleid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_TransitRuleAttribute::set_allocated_ruleid(::std::string* ruleid) {
  if (ruleid != NULL) {
    set_has_ruleid();
  } else {
    clear_has_ruleid();
  }
  ruleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ruleid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.TransitRuleAttribute.ruleId)
}

// required string dimId = 2;
inline bool SolutionResponse_TransitRuleAttribute::has_dimid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolutionResponse_TransitRuleAttribute::set_has_dimid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_has_dimid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_dimid() {
  dimid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dimid();
}
inline const ::std::string& SolutionResponse_TransitRuleAttribute::dimid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.TransitRuleAttribute.dimId)
  return dimid_.GetNoArena();
}
inline void SolutionResponse_TransitRuleAttribute::set_dimid(const ::std::string& value) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.TransitRuleAttribute.dimId)
}
#if LANG_CXX11
inline void SolutionResponse_TransitRuleAttribute::set_dimid(::std::string&& value) {
  set_has_dimid();
  dimid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.TransitRuleAttribute.dimId)
}
#endif
inline void SolutionResponse_TransitRuleAttribute::set_dimid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.TransitRuleAttribute.dimId)
}
inline void SolutionResponse_TransitRuleAttribute::set_dimid(const char* value, size_t size) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.TransitRuleAttribute.dimId)
}
inline ::std::string* SolutionResponse_TransitRuleAttribute::mutable_dimid() {
  set_has_dimid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.TransitRuleAttribute.dimId)
  return dimid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_TransitRuleAttribute::release_dimid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.TransitRuleAttribute.dimId)
  if (!has_dimid()) {
    return NULL;
  }
  clear_has_dimid();
  return dimid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_TransitRuleAttribute::set_allocated_dimid(::std::string* dimid) {
  if (dimid != NULL) {
    set_has_dimid();
  } else {
    clear_has_dimid();
  }
  dimid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.TransitRuleAttribute.dimId)
}

// required int32 fromStopId = 3;
inline bool SolutionResponse_TransitRuleAttribute::has_fromstopid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolutionResponse_TransitRuleAttribute::set_has_fromstopid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_has_fromstopid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_fromstopid() {
  fromstopid_ = 0;
  clear_has_fromstopid();
}
inline ::google::protobuf::int32 SolutionResponse_TransitRuleAttribute::fromstopid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.TransitRuleAttribute.fromStopId)
  return fromstopid_;
}
inline void SolutionResponse_TransitRuleAttribute::set_fromstopid(::google::protobuf::int32 value) {
  set_has_fromstopid();
  fromstopid_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.TransitRuleAttribute.fromStopId)
}

// required int32 toStopId = 4;
inline bool SolutionResponse_TransitRuleAttribute::has_tostopid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolutionResponse_TransitRuleAttribute::set_has_tostopid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_has_tostopid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_tostopid() {
  tostopid_ = 0;
  clear_has_tostopid();
}
inline ::google::protobuf::int32 SolutionResponse_TransitRuleAttribute::tostopid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.TransitRuleAttribute.toStopId)
  return tostopid_;
}
inline void SolutionResponse_TransitRuleAttribute::set_tostopid(::google::protobuf::int32 value) {
  set_has_tostopid();
  tostopid_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.TransitRuleAttribute.toStopId)
}

// required float startValue = 5;
inline bool SolutionResponse_TransitRuleAttribute::has_startvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolutionResponse_TransitRuleAttribute::set_has_startvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_has_startvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_startvalue() {
  startvalue_ = 0;
  clear_has_startvalue();
}
inline float SolutionResponse_TransitRuleAttribute::startvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.TransitRuleAttribute.startValue)
  return startvalue_;
}
inline void SolutionResponse_TransitRuleAttribute::set_startvalue(float value) {
  set_has_startvalue();
  startvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.TransitRuleAttribute.startValue)
}

// required float endValue = 6;
inline bool SolutionResponse_TransitRuleAttribute::has_endvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolutionResponse_TransitRuleAttribute::set_has_endvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_has_endvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_endvalue() {
  endvalue_ = 0;
  clear_has_endvalue();
}
inline float SolutionResponse_TransitRuleAttribute::endvalue() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.TransitRuleAttribute.endValue)
  return endvalue_;
}
inline void SolutionResponse_TransitRuleAttribute::set_endvalue(float value) {
  set_has_endvalue();
  endvalue_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.TransitRuleAttribute.endValue)
}

// required float cost = 7;
inline bool SolutionResponse_TransitRuleAttribute::has_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolutionResponse_TransitRuleAttribute::set_has_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_has_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolutionResponse_TransitRuleAttribute::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline float SolutionResponse_TransitRuleAttribute::cost() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.TransitRuleAttribute.cost)
  return cost_;
}
inline void SolutionResponse_TransitRuleAttribute::set_cost(float value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.TransitRuleAttribute.cost)
}

// -------------------------------------------------------------------

// SolutionResponse_Route

// required string vehicleId = 1;
inline bool SolutionResponse_Route::has_vehicleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_Route::set_has_vehicleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_Route::clear_has_vehicleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_Route::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicleid();
}
inline const ::std::string& SolutionResponse_Route::vehicleid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Route.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void SolutionResponse_Route::set_vehicleid(const ::std::string& value) {
  set_has_vehicleid();
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Route.vehicleId)
}
#if LANG_CXX11
inline void SolutionResponse_Route::set_vehicleid(::std::string&& value) {
  set_has_vehicleid();
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.Route.vehicleId)
}
#endif
inline void SolutionResponse_Route::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicleid();
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.Route.vehicleId)
}
inline void SolutionResponse_Route::set_vehicleid(const char* value, size_t size) {
  set_has_vehicleid();
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.Route.vehicleId)
}
inline ::std::string* SolutionResponse_Route::mutable_vehicleid() {
  set_has_vehicleid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Route.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_Route::release_vehicleid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.Route.vehicleId)
  if (!has_vehicleid()) {
    return NULL;
  }
  clear_has_vehicleid();
  return vehicleid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_Route::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    set_has_vehicleid();
  } else {
    clear_has_vehicleid();
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.Route.vehicleId)
}

// repeated .NVD.SolutionResponse.Stop stops = 2;
inline int SolutionResponse_Route::stops_size() const {
  return stops_.size();
}
inline void SolutionResponse_Route::clear_stops() {
  stops_.Clear();
}
inline ::NVD::SolutionResponse_Stop* SolutionResponse_Route::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Route.stops)
  return stops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Stop >*
SolutionResponse_Route::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.Route.stops)
  return &stops_;
}
inline const ::NVD::SolutionResponse_Stop& SolutionResponse_Route::stops(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Route.stops)
  return stops_.Get(index);
}
inline ::NVD::SolutionResponse_Stop* SolutionResponse_Route::add_stops() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Route.stops)
  return stops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Stop >&
SolutionResponse_Route::stops() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.Route.stops)
  return stops_;
}

// repeated .NVD.SolutionResponse.InterStop interStops = 3;
inline int SolutionResponse_Route::interstops_size() const {
  return interstops_.size();
}
inline void SolutionResponse_Route::clear_interstops() {
  interstops_.Clear();
}
inline ::NVD::SolutionResponse_InterStop* SolutionResponse_Route::mutable_interstops(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Route.interStops)
  return interstops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStop >*
SolutionResponse_Route::mutable_interstops() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.Route.interStops)
  return &interstops_;
}
inline const ::NVD::SolutionResponse_InterStop& SolutionResponse_Route::interstops(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Route.interStops)
  return interstops_.Get(index);
}
inline ::NVD::SolutionResponse_InterStop* SolutionResponse_Route::add_interstops() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Route.interStops)
  return interstops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_InterStop >&
SolutionResponse_Route::interstops() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.Route.interStops)
  return interstops_;
}

// repeated float fixedCost = 4;
inline int SolutionResponse_Route::fixedcost_size() const {
  return fixedcost_.size();
}
inline void SolutionResponse_Route::clear_fixedcost() {
  fixedcost_.Clear();
}
inline float SolutionResponse_Route::fixedcost(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Route.fixedCost)
  return fixedcost_.Get(index);
}
inline void SolutionResponse_Route::set_fixedcost(int index, float value) {
  fixedcost_.Set(index, value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Route.fixedCost)
}
inline void SolutionResponse_Route::add_fixedcost(float value) {
  fixedcost_.Add(value);
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Route.fixedCost)
}
inline const ::google::protobuf::RepeatedField< float >&
SolutionResponse_Route::fixedcost() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.Route.fixedCost)
  return fixedcost_;
}
inline ::google::protobuf::RepeatedField< float >*
SolutionResponse_Route::mutable_fixedcost() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.Route.fixedCost)
  return &fixedcost_;
}

// repeated .NVD.SolutionResponse.TransitRuleAttribute transitRuleAttributes = 5;
inline int SolutionResponse_Route::transitruleattributes_size() const {
  return transitruleattributes_.size();
}
inline void SolutionResponse_Route::clear_transitruleattributes() {
  transitruleattributes_.Clear();
}
inline ::NVD::SolutionResponse_TransitRuleAttribute* SolutionResponse_Route::mutable_transitruleattributes(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Route.transitRuleAttributes)
  return transitruleattributes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_TransitRuleAttribute >*
SolutionResponse_Route::mutable_transitruleattributes() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.Route.transitRuleAttributes)
  return &transitruleattributes_;
}
inline const ::NVD::SolutionResponse_TransitRuleAttribute& SolutionResponse_Route::transitruleattributes(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Route.transitRuleAttributes)
  return transitruleattributes_.Get(index);
}
inline ::NVD::SolutionResponse_TransitRuleAttribute* SolutionResponse_Route::add_transitruleattributes() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Route.transitRuleAttributes)
  return transitruleattributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_TransitRuleAttribute >&
SolutionResponse_Route::transitruleattributes() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.Route.transitRuleAttributes)
  return transitruleattributes_;
}

// required int32 day = 6;
inline bool SolutionResponse_Route::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolutionResponse_Route::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolutionResponse_Route::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolutionResponse_Route::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 SolutionResponse_Route::day() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Route.day)
  return day_;
}
inline void SolutionResponse_Route::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Route.day)
}

// -------------------------------------------------------------------

// SolutionResponse_Infeasibility_Info

// required string message = 1;
inline bool SolutionResponse_Infeasibility_Info::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_Infeasibility_Info::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_Infeasibility_Info::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_Infeasibility_Info::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& SolutionResponse_Infeasibility_Info::message() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.Info.message)
  return message_.GetNoArena();
}
inline void SolutionResponse_Infeasibility_Info::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.Info.message)
}
#if LANG_CXX11
inline void SolutionResponse_Infeasibility_Info::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.Infeasibility.Info.message)
}
#endif
inline void SolutionResponse_Infeasibility_Info::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.Infeasibility.Info.message)
}
inline void SolutionResponse_Infeasibility_Info::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.Infeasibility.Info.message)
}
inline ::std::string* SolutionResponse_Infeasibility_Info::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Infeasibility.Info.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_Infeasibility_Info::release_message() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.Infeasibility.Info.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_Infeasibility_Info::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.Infeasibility.Info.message)
}

// optional string dimId = 2;
inline bool SolutionResponse_Infeasibility_Info::has_dimid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolutionResponse_Infeasibility_Info::set_has_dimid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolutionResponse_Infeasibility_Info::clear_has_dimid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolutionResponse_Infeasibility_Info::clear_dimid() {
  dimid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dimid();
}
inline const ::std::string& SolutionResponse_Infeasibility_Info::dimid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.Info.dimId)
  return dimid_.GetNoArena();
}
inline void SolutionResponse_Infeasibility_Info::set_dimid(const ::std::string& value) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.Info.dimId)
}
#if LANG_CXX11
inline void SolutionResponse_Infeasibility_Info::set_dimid(::std::string&& value) {
  set_has_dimid();
  dimid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.Infeasibility.Info.dimId)
}
#endif
inline void SolutionResponse_Infeasibility_Info::set_dimid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.Infeasibility.Info.dimId)
}
inline void SolutionResponse_Infeasibility_Info::set_dimid(const char* value, size_t size) {
  set_has_dimid();
  dimid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.Infeasibility.Info.dimId)
}
inline ::std::string* SolutionResponse_Infeasibility_Info::mutable_dimid() {
  set_has_dimid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Infeasibility.Info.dimId)
  return dimid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_Infeasibility_Info::release_dimid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.Infeasibility.Info.dimId)
  if (!has_dimid()) {
    return NULL;
  }
  clear_has_dimid();
  return dimid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_Infeasibility_Info::set_allocated_dimid(::std::string* dimid) {
  if (dimid != NULL) {
    set_has_dimid();
  } else {
    clear_has_dimid();
  }
  dimid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.Infeasibility.Info.dimId)
}

// optional float limit = 3;
inline bool SolutionResponse_Infeasibility_Info::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolutionResponse_Infeasibility_Info::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolutionResponse_Infeasibility_Info::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolutionResponse_Infeasibility_Info::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline float SolutionResponse_Infeasibility_Info::limit() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.Info.limit)
  return limit_;
}
inline void SolutionResponse_Infeasibility_Info::set_limit(float value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.Info.limit)
}

// optional float value = 4;
inline bool SolutionResponse_Infeasibility_Info::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolutionResponse_Infeasibility_Info::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolutionResponse_Infeasibility_Info::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolutionResponse_Infeasibility_Info::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float SolutionResponse_Infeasibility_Info::value() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.Info.value)
  return value_;
}
inline void SolutionResponse_Infeasibility_Info::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.Info.value)
}

// optional int64 count = 5;
inline bool SolutionResponse_Infeasibility_Info::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolutionResponse_Infeasibility_Info::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolutionResponse_Infeasibility_Info::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolutionResponse_Infeasibility_Info::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 SolutionResponse_Infeasibility_Info::count() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.Info.count)
  return count_;
}
inline void SolutionResponse_Infeasibility_Info::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.Info.count)
}

// repeated string constrainingTaskIds = 6;
inline int SolutionResponse_Infeasibility_Info::constrainingtaskids_size() const {
  return constrainingtaskids_.size();
}
inline void SolutionResponse_Infeasibility_Info::clear_constrainingtaskids() {
  constrainingtaskids_.Clear();
}
inline const ::std::string& SolutionResponse_Infeasibility_Info::constrainingtaskids(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
  return constrainingtaskids_.Get(index);
}
inline ::std::string* SolutionResponse_Infeasibility_Info::mutable_constrainingtaskids(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
  return constrainingtaskids_.Mutable(index);
}
inline void SolutionResponse_Infeasibility_Info::set_constrainingtaskids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
  constrainingtaskids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SolutionResponse_Infeasibility_Info::set_constrainingtaskids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
  constrainingtaskids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SolutionResponse_Infeasibility_Info::set_constrainingtaskids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  constrainingtaskids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
}
inline void SolutionResponse_Infeasibility_Info::set_constrainingtaskids(int index, const char* value, size_t size) {
  constrainingtaskids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
}
inline ::std::string* SolutionResponse_Infeasibility_Info::add_constrainingtaskids() {
  // @@protoc_insertion_point(field_add_mutable:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
  return constrainingtaskids_.Add();
}
inline void SolutionResponse_Infeasibility_Info::add_constrainingtaskids(const ::std::string& value) {
  constrainingtaskids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
}
#if LANG_CXX11
inline void SolutionResponse_Infeasibility_Info::add_constrainingtaskids(::std::string&& value) {
  constrainingtaskids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
}
#endif
inline void SolutionResponse_Infeasibility_Info::add_constrainingtaskids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  constrainingtaskids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
}
inline void SolutionResponse_Infeasibility_Info::add_constrainingtaskids(const char* value, size_t size) {
  constrainingtaskids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolutionResponse_Infeasibility_Info::constrainingtaskids() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
  return constrainingtaskids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolutionResponse_Infeasibility_Info::mutable_constrainingtaskids() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.Infeasibility.Info.constrainingTaskIds)
  return &constrainingtaskids_;
}

// -------------------------------------------------------------------

// SolutionResponse_Infeasibility

// required string taskId = 1;
inline bool SolutionResponse_Infeasibility::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse_Infeasibility::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse_Infeasibility::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse_Infeasibility::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskid();
}
inline const ::std::string& SolutionResponse_Infeasibility::taskid() const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.taskId)
  return taskid_.GetNoArena();
}
inline void SolutionResponse_Infeasibility::set_taskid(const ::std::string& value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.Infeasibility.taskId)
}
#if LANG_CXX11
inline void SolutionResponse_Infeasibility::set_taskid(::std::string&& value) {
  set_has_taskid();
  taskid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVD.SolutionResponse.Infeasibility.taskId)
}
#endif
inline void SolutionResponse_Infeasibility::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.Infeasibility.taskId)
}
inline void SolutionResponse_Infeasibility::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.Infeasibility.taskId)
}
inline ::std::string* SolutionResponse_Infeasibility::mutable_taskid() {
  set_has_taskid();
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Infeasibility.taskId)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolutionResponse_Infeasibility::release_taskid() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.Infeasibility.taskId)
  if (!has_taskid()) {
    return NULL;
  }
  clear_has_taskid();
  return taskid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolutionResponse_Infeasibility::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    set_has_taskid();
  } else {
    clear_has_taskid();
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.Infeasibility.taskId)
}

// repeated .NVD.SolutionResponse.Infeasibility.Info infeasibilityInfo = 2;
inline int SolutionResponse_Infeasibility::infeasibilityinfo_size() const {
  return infeasibilityinfo_.size();
}
inline void SolutionResponse_Infeasibility::clear_infeasibilityinfo() {
  infeasibilityinfo_.Clear();
}
inline ::NVD::SolutionResponse_Infeasibility_Info* SolutionResponse_Infeasibility::mutable_infeasibilityinfo(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.Infeasibility.infeasibilityInfo)
  return infeasibilityinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility_Info >*
SolutionResponse_Infeasibility::mutable_infeasibilityinfo() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.Infeasibility.infeasibilityInfo)
  return &infeasibilityinfo_;
}
inline const ::NVD::SolutionResponse_Infeasibility_Info& SolutionResponse_Infeasibility::infeasibilityinfo(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.Infeasibility.infeasibilityInfo)
  return infeasibilityinfo_.Get(index);
}
inline ::NVD::SolutionResponse_Infeasibility_Info* SolutionResponse_Infeasibility::add_infeasibilityinfo() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.Infeasibility.infeasibilityInfo)
  return infeasibilityinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility_Info >&
SolutionResponse_Infeasibility::infeasibilityinfo() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.Infeasibility.infeasibilityInfo)
  return infeasibilityinfo_;
}

// -------------------------------------------------------------------

// SolutionResponse_CompactSolution

// repeated .NVD.VisitSequence visitSequence = 1;
inline int SolutionResponse_CompactSolution::visitsequence_size() const {
  return visitsequence_.size();
}
inline void SolutionResponse_CompactSolution::clear_visitsequence() {
  visitsequence_.Clear();
}
inline ::NVD::VisitSequence* SolutionResponse_CompactSolution::mutable_visitsequence(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.CompactSolution.visitSequence)
  return visitsequence_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >*
SolutionResponse_CompactSolution::mutable_visitsequence() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.CompactSolution.visitSequence)
  return &visitsequence_;
}
inline const ::NVD::VisitSequence& SolutionResponse_CompactSolution::visitsequence(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.CompactSolution.visitSequence)
  return visitsequence_.Get(index);
}
inline ::NVD::VisitSequence* SolutionResponse_CompactSolution::add_visitsequence() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.CompactSolution.visitSequence)
  return visitsequence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::VisitSequence >&
SolutionResponse_CompactSolution::visitsequence() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.CompactSolution.visitSequence)
  return visitsequence_;
}

// repeated float objectives = 2;
inline int SolutionResponse_CompactSolution::objectives_size() const {
  return objectives_.size();
}
inline void SolutionResponse_CompactSolution::clear_objectives() {
  objectives_.Clear();
}
inline float SolutionResponse_CompactSolution::objectives(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.CompactSolution.objectives)
  return objectives_.Get(index);
}
inline void SolutionResponse_CompactSolution::set_objectives(int index, float value) {
  objectives_.Set(index, value);
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.CompactSolution.objectives)
}
inline void SolutionResponse_CompactSolution::add_objectives(float value) {
  objectives_.Add(value);
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.CompactSolution.objectives)
}
inline const ::google::protobuf::RepeatedField< float >&
SolutionResponse_CompactSolution::objectives() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.CompactSolution.objectives)
  return objectives_;
}
inline ::google::protobuf::RepeatedField< float >*
SolutionResponse_CompactSolution::mutable_objectives() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.CompactSolution.objectives)
  return &objectives_;
}

// repeated string objectiveNames = 3;
inline int SolutionResponse_CompactSolution::objectivenames_size() const {
  return objectivenames_.size();
}
inline void SolutionResponse_CompactSolution::clear_objectivenames() {
  objectivenames_.Clear();
}
inline const ::std::string& SolutionResponse_CompactSolution::objectivenames(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.CompactSolution.objectiveNames)
  return objectivenames_.Get(index);
}
inline ::std::string* SolutionResponse_CompactSolution::mutable_objectivenames(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.CompactSolution.objectiveNames)
  return objectivenames_.Mutable(index);
}
inline void SolutionResponse_CompactSolution::set_objectivenames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.CompactSolution.objectiveNames)
  objectivenames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SolutionResponse_CompactSolution::set_objectivenames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NVD.SolutionResponse.CompactSolution.objectiveNames)
  objectivenames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SolutionResponse_CompactSolution::set_objectivenames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  objectivenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVD.SolutionResponse.CompactSolution.objectiveNames)
}
inline void SolutionResponse_CompactSolution::set_objectivenames(int index, const char* value, size_t size) {
  objectivenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVD.SolutionResponse.CompactSolution.objectiveNames)
}
inline ::std::string* SolutionResponse_CompactSolution::add_objectivenames() {
  // @@protoc_insertion_point(field_add_mutable:NVD.SolutionResponse.CompactSolution.objectiveNames)
  return objectivenames_.Add();
}
inline void SolutionResponse_CompactSolution::add_objectivenames(const ::std::string& value) {
  objectivenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.CompactSolution.objectiveNames)
}
#if LANG_CXX11
inline void SolutionResponse_CompactSolution::add_objectivenames(::std::string&& value) {
  objectivenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.CompactSolution.objectiveNames)
}
#endif
inline void SolutionResponse_CompactSolution::add_objectivenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  objectivenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVD.SolutionResponse.CompactSolution.objectiveNames)
}
inline void SolutionResponse_CompactSolution::add_objectivenames(const char* value, size_t size) {
  objectivenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVD.SolutionResponse.CompactSolution.objectiveNames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolutionResponse_CompactSolution::objectivenames() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.CompactSolution.objectiveNames)
  return objectivenames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolutionResponse_CompactSolution::mutable_objectivenames() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.CompactSolution.objectiveNames)
  return &objectivenames_;
}

// -------------------------------------------------------------------

// SolutionResponse_SolutionInstance

// repeated .NVD.SolutionResponse.Route routes = 1;
inline int SolutionResponse_SolutionInstance::routes_size() const {
  return routes_.size();
}
inline void SolutionResponse_SolutionInstance::clear_routes() {
  routes_.Clear();
}
inline ::NVD::SolutionResponse_Route* SolutionResponse_SolutionInstance::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.SolutionInstance.routes)
  return routes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Route >*
SolutionResponse_SolutionInstance::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.SolutionInstance.routes)
  return &routes_;
}
inline const ::NVD::SolutionResponse_Route& SolutionResponse_SolutionInstance::routes(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.SolutionInstance.routes)
  return routes_.Get(index);
}
inline ::NVD::SolutionResponse_Route* SolutionResponse_SolutionInstance::add_routes() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.SolutionInstance.routes)
  return routes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Route >&
SolutionResponse_SolutionInstance::routes() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.SolutionInstance.routes)
  return routes_;
}

// repeated .NVD.SolutionResponse.Infeasibility infeasibilities = 2;
inline int SolutionResponse_SolutionInstance::infeasibilities_size() const {
  return infeasibilities_.size();
}
inline void SolutionResponse_SolutionInstance::clear_infeasibilities() {
  infeasibilities_.Clear();
}
inline ::NVD::SolutionResponse_Infeasibility* SolutionResponse_SolutionInstance::mutable_infeasibilities(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.SolutionInstance.infeasibilities)
  return infeasibilities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility >*
SolutionResponse_SolutionInstance::mutable_infeasibilities() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.SolutionInstance.infeasibilities)
  return &infeasibilities_;
}
inline const ::NVD::SolutionResponse_Infeasibility& SolutionResponse_SolutionInstance::infeasibilities(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.SolutionInstance.infeasibilities)
  return infeasibilities_.Get(index);
}
inline ::NVD::SolutionResponse_Infeasibility* SolutionResponse_SolutionInstance::add_infeasibilities() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.SolutionInstance.infeasibilities)
  return infeasibilities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_Infeasibility >&
SolutionResponse_SolutionInstance::infeasibilities() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.SolutionInstance.infeasibilities)
  return infeasibilities_;
}

// -------------------------------------------------------------------

// SolutionResponse

// repeated .NVD.SolutionResponse.CompactSolution frontier = 1;
inline int SolutionResponse::frontier_size() const {
  return frontier_.size();
}
inline void SolutionResponse::clear_frontier() {
  frontier_.Clear();
}
inline ::NVD::SolutionResponse_CompactSolution* SolutionResponse::mutable_frontier(int index) {
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.frontier)
  return frontier_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_CompactSolution >*
SolutionResponse::mutable_frontier() {
  // @@protoc_insertion_point(field_mutable_list:NVD.SolutionResponse.frontier)
  return &frontier_;
}
inline const ::NVD::SolutionResponse_CompactSolution& SolutionResponse::frontier(int index) const {
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.frontier)
  return frontier_.Get(index);
}
inline ::NVD::SolutionResponse_CompactSolution* SolutionResponse::add_frontier() {
  // @@protoc_insertion_point(field_add:NVD.SolutionResponse.frontier)
  return frontier_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NVD::SolutionResponse_CompactSolution >&
SolutionResponse::frontier() const {
  // @@protoc_insertion_point(field_list:NVD.SolutionResponse.frontier)
  return frontier_;
}

// optional .NVD.SolutionResponse.SolutionInstance instance = 2;
inline bool SolutionResponse::has_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolutionResponse::set_has_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolutionResponse::clear_has_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolutionResponse::clear_instance() {
  if (instance_ != NULL) instance_->Clear();
  clear_has_instance();
}
inline const ::NVD::SolutionResponse_SolutionInstance& SolutionResponse::_internal_instance() const {
  return *instance_;
}
inline const ::NVD::SolutionResponse_SolutionInstance& SolutionResponse::instance() const {
  const ::NVD::SolutionResponse_SolutionInstance* p = instance_;
  // @@protoc_insertion_point(field_get:NVD.SolutionResponse.instance)
  return p != NULL ? *p : *reinterpret_cast<const ::NVD::SolutionResponse_SolutionInstance*>(
      &::NVD::_SolutionResponse_SolutionInstance_default_instance_);
}
inline ::NVD::SolutionResponse_SolutionInstance* SolutionResponse::release_instance() {
  // @@protoc_insertion_point(field_release:NVD.SolutionResponse.instance)
  clear_has_instance();
  ::NVD::SolutionResponse_SolutionInstance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::NVD::SolutionResponse_SolutionInstance* SolutionResponse::mutable_instance() {
  set_has_instance();
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::NVD::SolutionResponse_SolutionInstance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NVD.SolutionResponse.instance)
  return instance_;
}
inline void SolutionResponse::set_allocated_instance(::NVD::SolutionResponse_SolutionInstance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    set_has_instance();
  } else {
    clear_has_instance();
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:NVD.SolutionResponse.instance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NVD

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NVD::Configuration_eMeasurementUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NVD::Configuration_eMeasurementUnit>() {
  return ::NVD::Configuration_eMeasurementUnit_descriptor();
}
template <> struct is_proto_enum< ::NVD::Profile_eFrequency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NVD::Profile_eFrequency>() {
  return ::NVD::Profile_eFrequency_descriptor();
}
template <> struct is_proto_enum< ::NVD::Visit_TerritoryRelation_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NVD::Visit_TerritoryRelation_Type>() {
  return ::NVD::Visit_TerritoryRelation_Type_descriptor();
}
template <> struct is_proto_enum< ::NVD::SolveRequest_SolveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NVD::SolveRequest_SolveType>() {
  return ::NVD::SolveRequest_SolveType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nvd_2dhap0j2y4zlm1_2eproto
