// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: problem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_problem_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_problem_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_problem_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_problem_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_problem_2eproto;
namespace problem {
class ProblemEnvelope;
struct ProblemEnvelopeDefaultTypeInternal;
extern ProblemEnvelopeDefaultTypeInternal _ProblemEnvelope_default_instance_;
class SolverInfo;
struct SolverInfoDefaultTypeInternal;
extern SolverInfoDefaultTypeInternal _SolverInfo_default_instance_;
class SolverResponse;
struct SolverResponseDefaultTypeInternal;
extern SolverResponseDefaultTypeInternal _SolverResponse_default_instance_;
}  // namespace problem
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace problem {
enum ProblemEnvelope_SubType : int {
  ProblemEnvelope_SubType_INPUT = 0,
  ProblemEnvelope_SubType_OUTPUT = 1,
};

bool ProblemEnvelope_SubType_IsValid(int value);
constexpr ProblemEnvelope_SubType ProblemEnvelope_SubType_SubType_MIN = static_cast<ProblemEnvelope_SubType>(0);
constexpr ProblemEnvelope_SubType ProblemEnvelope_SubType_SubType_MAX = static_cast<ProblemEnvelope_SubType>(1);
constexpr int ProblemEnvelope_SubType_SubType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ProblemEnvelope_SubType_descriptor();
template <typename T>
const std::string& ProblemEnvelope_SubType_Name(T value) {
  static_assert(std::is_same<T, ProblemEnvelope_SubType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SubType_Name().");
  return ProblemEnvelope_SubType_Name(static_cast<ProblemEnvelope_SubType>(value));
}
template <>
inline const std::string& ProblemEnvelope_SubType_Name(ProblemEnvelope_SubType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProblemEnvelope_SubType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ProblemEnvelope_SubType_Parse(absl::string_view name, ProblemEnvelope_SubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProblemEnvelope_SubType>(
      ProblemEnvelope_SubType_descriptor(), name, value);
}
enum SolverInfo_SolverMessageType : int {
  SolverInfo_SolverMessageType_INFO = 0,
  SolverInfo_SolverMessageType_WARNING = 1,
  SolverInfo_SolverMessageType_ERROR = 2,
};

bool SolverInfo_SolverMessageType_IsValid(int value);
constexpr SolverInfo_SolverMessageType SolverInfo_SolverMessageType_SolverMessageType_MIN = static_cast<SolverInfo_SolverMessageType>(0);
constexpr SolverInfo_SolverMessageType SolverInfo_SolverMessageType_SolverMessageType_MAX = static_cast<SolverInfo_SolverMessageType>(2);
constexpr int SolverInfo_SolverMessageType_SolverMessageType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SolverInfo_SolverMessageType_descriptor();
template <typename T>
const std::string& SolverInfo_SolverMessageType_Name(T value) {
  static_assert(std::is_same<T, SolverInfo_SolverMessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SolverMessageType_Name().");
  return SolverInfo_SolverMessageType_Name(static_cast<SolverInfo_SolverMessageType>(value));
}
template <>
inline const std::string& SolverInfo_SolverMessageType_Name(SolverInfo_SolverMessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SolverInfo_SolverMessageType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SolverInfo_SolverMessageType_Parse(absl::string_view name, SolverInfo_SolverMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverInfo_SolverMessageType>(
      SolverInfo_SolverMessageType_descriptor(), name, value);
}
enum SolverResponse_SolveState : int {
  SolverResponse_SolveState_WIP = 0,
  SolverResponse_SolveState_COMPLETED = 1,
  SolverResponse_SolveState_FAILED = 2,
};

bool SolverResponse_SolveState_IsValid(int value);
constexpr SolverResponse_SolveState SolverResponse_SolveState_SolveState_MIN = static_cast<SolverResponse_SolveState>(0);
constexpr SolverResponse_SolveState SolverResponse_SolveState_SolveState_MAX = static_cast<SolverResponse_SolveState>(2);
constexpr int SolverResponse_SolveState_SolveState_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SolverResponse_SolveState_descriptor();
template <typename T>
const std::string& SolverResponse_SolveState_Name(T value) {
  static_assert(std::is_same<T, SolverResponse_SolveState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SolveState_Name().");
  return SolverResponse_SolveState_Name(static_cast<SolverResponse_SolveState>(value));
}
template <>
inline const std::string& SolverResponse_SolveState_Name(SolverResponse_SolveState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SolverResponse_SolveState_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SolverResponse_SolveState_Parse(absl::string_view name, SolverResponse_SolveState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverResponse_SolveState>(
      SolverResponse_SolveState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ProblemEnvelope final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:problem.ProblemEnvelope) */ {
 public:
  inline ProblemEnvelope() : ProblemEnvelope(nullptr) {}
  ~ProblemEnvelope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProblemEnvelope(::google::protobuf::internal::ConstantInitialized);

  ProblemEnvelope(const ProblemEnvelope& from);
  ProblemEnvelope(ProblemEnvelope&& from) noexcept
    : ProblemEnvelope() {
    *this = ::std::move(from);
  }

  inline ProblemEnvelope& operator=(const ProblemEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProblemEnvelope& operator=(ProblemEnvelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProblemEnvelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProblemEnvelope* internal_default_instance() {
    return reinterpret_cast<const ProblemEnvelope*>(
               &_ProblemEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProblemEnvelope& a, ProblemEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(ProblemEnvelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProblemEnvelope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProblemEnvelope* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProblemEnvelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProblemEnvelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProblemEnvelope& from) {
    ProblemEnvelope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProblemEnvelope* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "problem.ProblemEnvelope";
  }
  protected:
  explicit ProblemEnvelope(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SubType = ProblemEnvelope_SubType;
  static constexpr SubType INPUT = ProblemEnvelope_SubType_INPUT;
  static constexpr SubType OUTPUT = ProblemEnvelope_SubType_OUTPUT;
  static inline bool SubType_IsValid(int value) {
    return ProblemEnvelope_SubType_IsValid(value);
  }
  static constexpr SubType SubType_MIN = ProblemEnvelope_SubType_SubType_MIN;
  static constexpr SubType SubType_MAX = ProblemEnvelope_SubType_SubType_MAX;
  static constexpr int SubType_ARRAYSIZE = ProblemEnvelope_SubType_SubType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SubType_descriptor() {
    return ProblemEnvelope_SubType_descriptor();
  }
  template <typename T>
  static inline const std::string& SubType_Name(T value) {
    return ProblemEnvelope_SubType_Name(value);
  }
  static inline bool SubType_Parse(absl::string_view name, SubType* value) {
    return ProblemEnvelope_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kContentFieldNumber = 3,
    kSubTypeFieldNumber = 2,
  };
  // required string type = 1;
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional bytes content = 3;
  bool has_content() const;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // required .problem.ProblemEnvelope.SubType subType = 2 [default = INPUT];
  bool has_subtype() const;
  void clear_subtype() ;
  ::problem::ProblemEnvelope_SubType subtype() const;
  void set_subtype(::problem::ProblemEnvelope_SubType value);

  private:
  ::problem::ProblemEnvelope_SubType _internal_subtype() const;
  void _internal_set_subtype(::problem::ProblemEnvelope_SubType value);

  public:
  // @@protoc_insertion_point(class_scope:problem.ProblemEnvelope)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 36, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    int subtype_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_problem_2eproto;
};// -------------------------------------------------------------------

class SolverInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:problem.SolverInfo) */ {
 public:
  inline SolverInfo() : SolverInfo(nullptr) {}
  ~SolverInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SolverInfo(::google::protobuf::internal::ConstantInitialized);

  SolverInfo(const SolverInfo& from);
  SolverInfo(SolverInfo&& from) noexcept
    : SolverInfo() {
    *this = ::std::move(from);
  }

  inline SolverInfo& operator=(const SolverInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverInfo& operator=(SolverInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolverInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolverInfo* internal_default_instance() {
    return reinterpret_cast<const SolverInfo*>(
               &_SolverInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SolverInfo& a, SolverInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolverInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolverInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolverInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SolverInfo& from) {
    SolverInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "problem.SolverInfo";
  }
  protected:
  explicit SolverInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SolverMessageType = SolverInfo_SolverMessageType;
  static constexpr SolverMessageType INFO = SolverInfo_SolverMessageType_INFO;
  static constexpr SolverMessageType WARNING = SolverInfo_SolverMessageType_WARNING;
  static constexpr SolverMessageType ERROR = SolverInfo_SolverMessageType_ERROR;
  static inline bool SolverMessageType_IsValid(int value) {
    return SolverInfo_SolverMessageType_IsValid(value);
  }
  static constexpr SolverMessageType SolverMessageType_MIN = SolverInfo_SolverMessageType_SolverMessageType_MIN;
  static constexpr SolverMessageType SolverMessageType_MAX = SolverInfo_SolverMessageType_SolverMessageType_MAX;
  static constexpr int SolverMessageType_ARRAYSIZE = SolverInfo_SolverMessageType_SolverMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SolverMessageType_descriptor() {
    return SolverInfo_SolverMessageType_descriptor();
  }
  template <typename T>
  static inline const std::string& SolverMessageType_Name(T value) {
    return SolverInfo_SolverMessageType_Name(value);
  }
  static inline bool SolverMessageType_Parse(absl::string_view name, SolverMessageType* value) {
    return SolverInfo_SolverMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoMessageFieldNumber = 2,
    kUnixDateTimeFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // required string infoMessage = 2;
  bool has_infomessage() const;
  void clear_infomessage() ;
  const std::string& infomessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_infomessage(Arg_&& arg, Args_... args);
  std::string* mutable_infomessage();
  PROTOBUF_NODISCARD std::string* release_infomessage();
  void set_allocated_infomessage(std::string* ptr);

  private:
  const std::string& _internal_infomessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_infomessage(
      const std::string& value);
  std::string* _internal_mutable_infomessage();

  public:
  // required int64 unixDateTime = 1;
  bool has_unixdatetime() const;
  void clear_unixdatetime() ;
  ::int64_t unixdatetime() const;
  void set_unixdatetime(::int64_t value);

  private:
  ::int64_t _internal_unixdatetime() const;
  void _internal_set_unixdatetime(::int64_t value);

  public:
  // required .problem.SolverInfo.SolverMessageType type = 3;
  bool has_type() const;
  void clear_type() ;
  ::problem::SolverInfo_SolverMessageType type() const;
  void set_type(::problem::SolverInfo_SolverMessageType value);

  private:
  ::problem::SolverInfo_SolverMessageType _internal_type() const;
  void _internal_set_type(::problem::SolverInfo_SolverMessageType value);

  public:
  // @@protoc_insertion_point(class_scope:problem.SolverInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 38, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr infomessage_;
    ::int64_t unixdatetime_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_problem_2eproto;
};// -------------------------------------------------------------------

class SolverResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:problem.SolverResponse) */ {
 public:
  inline SolverResponse() : SolverResponse(nullptr) {}
  ~SolverResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SolverResponse(::google::protobuf::internal::ConstantInitialized);

  SolverResponse(const SolverResponse& from);
  SolverResponse(SolverResponse&& from) noexcept
    : SolverResponse() {
    *this = ::std::move(from);
  }

  inline SolverResponse& operator=(const SolverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverResponse& operator=(SolverResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolverResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolverResponse* internal_default_instance() {
    return reinterpret_cast<const SolverResponse*>(
               &_SolverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SolverResponse& a, SolverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolverResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolverResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolverResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SolverResponse& from) {
    SolverResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "problem.SolverResponse";
  }
  protected:
  explicit SolverResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SolveState = SolverResponse_SolveState;
  static constexpr SolveState WIP = SolverResponse_SolveState_WIP;
  static constexpr SolveState COMPLETED = SolverResponse_SolveState_COMPLETED;
  static constexpr SolveState FAILED = SolverResponse_SolveState_FAILED;
  static inline bool SolveState_IsValid(int value) {
    return SolverResponse_SolveState_IsValid(value);
  }
  static constexpr SolveState SolveState_MIN = SolverResponse_SolveState_SolveState_MIN;
  static constexpr SolveState SolveState_MAX = SolverResponse_SolveState_SolveState_MAX;
  static constexpr int SolveState_ARRAYSIZE = SolverResponse_SolveState_SolveState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SolveState_descriptor() {
    return SolverResponse_SolveState_descriptor();
  }
  template <typename T>
  static inline const std::string& SolveState_Name(T value) {
    return SolverResponse_SolveState_Name(value);
  }
  static inline bool SolveState_Parse(absl::string_view name, SolveState* value) {
    return SolverResponse_SolveState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
    kSolutionFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // repeated .problem.SolverInfo logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;

  public:
  void clear_logs() ;
  ::problem::SolverInfo* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField< ::problem::SolverInfo >*
      mutable_logs();
  private:
  const ::google::protobuf::RepeatedPtrField<::problem::SolverInfo>& _internal_logs() const;
  ::google::protobuf::RepeatedPtrField<::problem::SolverInfo>* _internal_mutable_logs();
  public:
  const ::problem::SolverInfo& logs(int index) const;
  ::problem::SolverInfo* add_logs();
  const ::google::protobuf::RepeatedPtrField< ::problem::SolverInfo >&
      logs() const;
  // optional bytes solution = 3;
  bool has_solution() const;
  void clear_solution() ;
  const std::string& solution() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_solution(Arg_&& arg, Args_... args);
  std::string* mutable_solution();
  PROTOBUF_NODISCARD std::string* release_solution();
  void set_allocated_solution(std::string* ptr);

  private:
  const std::string& _internal_solution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_solution(
      const std::string& value);
  std::string* _internal_mutable_solution();

  public:
  // required .problem.SolverResponse.SolveState state = 2;
  bool has_state() const;
  void clear_state() ;
  ::problem::SolverResponse_SolveState state() const;
  void set_state(::problem::SolverResponse_SolveState value);

  private:
  ::problem::SolverResponse_SolveState _internal_state() const;
  void _internal_set_state(::problem::SolverResponse_SolveState value);

  public:
  // @@protoc_insertion_point(class_scope:problem.SolverResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::problem::SolverInfo > logs_;
    ::google::protobuf::internal::ArenaStringPtr solution_;
    int state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_problem_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProblemEnvelope

// required string type = 1;
inline bool ProblemEnvelope::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProblemEnvelope::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProblemEnvelope::type() const {
  // @@protoc_insertion_point(field_get:problem.ProblemEnvelope.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProblemEnvelope::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:problem.ProblemEnvelope.type)
}
inline std::string* ProblemEnvelope::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:problem.ProblemEnvelope.type)
  return _s;
}
inline const std::string& ProblemEnvelope::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void ProblemEnvelope::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ProblemEnvelope::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* ProblemEnvelope::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:problem.ProblemEnvelope.type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ProblemEnvelope::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:problem.ProblemEnvelope.type)
}

// required .problem.ProblemEnvelope.SubType subType = 2 [default = INPUT];
inline bool ProblemEnvelope::has_subtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProblemEnvelope::clear_subtype() {
  _impl_.subtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::problem::ProblemEnvelope_SubType ProblemEnvelope::subtype() const {
  // @@protoc_insertion_point(field_get:problem.ProblemEnvelope.subType)
  return _internal_subtype();
}
inline void ProblemEnvelope::set_subtype(::problem::ProblemEnvelope_SubType value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:problem.ProblemEnvelope.subType)
}
inline ::problem::ProblemEnvelope_SubType ProblemEnvelope::_internal_subtype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::problem::ProblemEnvelope_SubType>(_impl_.subtype_);
}
inline void ProblemEnvelope::_internal_set_subtype(::problem::ProblemEnvelope_SubType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::problem::ProblemEnvelope_SubType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.subtype_ = value;
}

// optional bytes content = 3;
inline bool ProblemEnvelope::has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProblemEnvelope::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProblemEnvelope::content() const {
  // @@protoc_insertion_point(field_get:problem.ProblemEnvelope.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProblemEnvelope::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:problem.ProblemEnvelope.content)
}
inline std::string* ProblemEnvelope::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:problem.ProblemEnvelope.content)
  return _s;
}
inline const std::string& ProblemEnvelope::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void ProblemEnvelope::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ProblemEnvelope::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* ProblemEnvelope::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:problem.ProblemEnvelope.content)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.content_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ProblemEnvelope::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:problem.ProblemEnvelope.content)
}

// -------------------------------------------------------------------

// SolverInfo

// required int64 unixDateTime = 1;
inline bool SolverInfo::has_unixdatetime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SolverInfo::clear_unixdatetime() {
  _impl_.unixdatetime_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t SolverInfo::unixdatetime() const {
  // @@protoc_insertion_point(field_get:problem.SolverInfo.unixDateTime)
  return _internal_unixdatetime();
}
inline void SolverInfo::set_unixdatetime(::int64_t value) {
  _internal_set_unixdatetime(value);
  // @@protoc_insertion_point(field_set:problem.SolverInfo.unixDateTime)
}
inline ::int64_t SolverInfo::_internal_unixdatetime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unixdatetime_;
}
inline void SolverInfo::_internal_set_unixdatetime(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unixdatetime_ = value;
}

// required string infoMessage = 2;
inline bool SolverInfo::has_infomessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SolverInfo::clear_infomessage() {
  _impl_.infomessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverInfo::infomessage() const {
  // @@protoc_insertion_point(field_get:problem.SolverInfo.infoMessage)
  return _internal_infomessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverInfo::set_infomessage(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.infomessage_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:problem.SolverInfo.infoMessage)
}
inline std::string* SolverInfo::mutable_infomessage() {
  std::string* _s = _internal_mutable_infomessage();
  // @@protoc_insertion_point(field_mutable:problem.SolverInfo.infoMessage)
  return _s;
}
inline const std::string& SolverInfo::_internal_infomessage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.infomessage_.Get();
}
inline void SolverInfo::_internal_set_infomessage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.infomessage_.Set(value, GetArenaForAllocation());
}
inline std::string* SolverInfo::_internal_mutable_infomessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.infomessage_.Mutable( GetArenaForAllocation());
}
inline std::string* SolverInfo::release_infomessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:problem.SolverInfo.infoMessage)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.infomessage_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.infomessage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolverInfo::set_allocated_infomessage(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.infomessage_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.infomessage_.IsDefault()) {
          _impl_.infomessage_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:problem.SolverInfo.infoMessage)
}

// required .problem.SolverInfo.SolverMessageType type = 3;
inline bool SolverInfo::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SolverInfo::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::problem::SolverInfo_SolverMessageType SolverInfo::type() const {
  // @@protoc_insertion_point(field_get:problem.SolverInfo.type)
  return _internal_type();
}
inline void SolverInfo::set_type(::problem::SolverInfo_SolverMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:problem.SolverInfo.type)
}
inline ::problem::SolverInfo_SolverMessageType SolverInfo::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::problem::SolverInfo_SolverMessageType>(_impl_.type_);
}
inline void SolverInfo::_internal_set_type(::problem::SolverInfo_SolverMessageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::problem::SolverInfo_SolverMessageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// SolverResponse

// repeated .problem.SolverInfo logs = 1;
inline int SolverResponse::_internal_logs_size() const {
  return _internal_logs().size();
}
inline int SolverResponse::logs_size() const {
  return _internal_logs_size();
}
inline void SolverResponse::clear_logs() {
  _internal_mutable_logs()->Clear();
}
inline ::problem::SolverInfo* SolverResponse::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:problem.SolverResponse.logs)
  return _internal_mutable_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::problem::SolverInfo >*
SolverResponse::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:problem.SolverResponse.logs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_logs();
}
inline const ::problem::SolverInfo& SolverResponse::logs(int index) const {
  // @@protoc_insertion_point(field_get:problem.SolverResponse.logs)
    return _internal_logs().Get(index);
}
inline ::problem::SolverInfo* SolverResponse::add_logs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::problem::SolverInfo* _add = _internal_mutable_logs()->Add();
  // @@protoc_insertion_point(field_add:problem.SolverResponse.logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::problem::SolverInfo >&
SolverResponse::logs() const {
  // @@protoc_insertion_point(field_list:problem.SolverResponse.logs)
  return _internal_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::problem::SolverInfo>&
SolverResponse::_internal_logs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.logs_;
}
inline ::google::protobuf::RepeatedPtrField<::problem::SolverInfo>*
SolverResponse::_internal_mutable_logs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.logs_;
}

// required .problem.SolverResponse.SolveState state = 2;
inline bool SolverResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SolverResponse::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::problem::SolverResponse_SolveState SolverResponse::state() const {
  // @@protoc_insertion_point(field_get:problem.SolverResponse.state)
  return _internal_state();
}
inline void SolverResponse::set_state(::problem::SolverResponse_SolveState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:problem.SolverResponse.state)
}
inline ::problem::SolverResponse_SolveState SolverResponse::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::problem::SolverResponse_SolveState>(_impl_.state_);
}
inline void SolverResponse::_internal_set_state(::problem::SolverResponse_SolveState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::problem::SolverResponse_SolveState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

// optional bytes solution = 3;
inline bool SolverResponse::has_solution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SolverResponse::clear_solution() {
  _impl_.solution_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverResponse::solution() const {
  // @@protoc_insertion_point(field_get:problem.SolverResponse.solution)
  return _internal_solution();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverResponse::set_solution(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.solution_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:problem.SolverResponse.solution)
}
inline std::string* SolverResponse::mutable_solution() {
  std::string* _s = _internal_mutable_solution();
  // @@protoc_insertion_point(field_mutable:problem.SolverResponse.solution)
  return _s;
}
inline const std::string& SolverResponse::_internal_solution() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solution_.Get();
}
inline void SolverResponse::_internal_set_solution(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.solution_.Set(value, GetArenaForAllocation());
}
inline std::string* SolverResponse::_internal_mutable_solution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.solution_.Mutable( GetArenaForAllocation());
}
inline std::string* SolverResponse::release_solution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:problem.SolverResponse.solution)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.solution_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.solution_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolverResponse::set_allocated_solution(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.solution_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.solution_.IsDefault()) {
          _impl_.solution_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:problem.SolverResponse.solution)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace problem


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::problem::ProblemEnvelope_SubType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::problem::ProblemEnvelope_SubType>() {
  return ::problem::ProblemEnvelope_SubType_descriptor();
}
template <>
struct is_proto_enum<::problem::SolverInfo_SolverMessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::problem::SolverInfo_SolverMessageType>() {
  return ::problem::SolverInfo_SolverMessageType_descriptor();
}
template <>
struct is_proto_enum<::problem::SolverResponse_SolveState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::problem::SolverResponse_SolveState>() {
  return ::problem::SolverResponse_SolveState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_problem_2eproto_2epb_2eh
