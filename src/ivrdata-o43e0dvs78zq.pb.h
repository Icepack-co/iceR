// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ivrdata-o43e0dvs78zq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ivrdata_2do43e0dvs78zq_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ivrdata_2do43e0dvs78zq_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ivrdata_2do43e0dvs78zq_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ivrdata_2do43e0dvs78zq_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ivrdata_2do43e0dvs78zq_2eproto;
namespace IVRData {
class CachedModel;
struct CachedModelDefaultTypeInternal;
extern CachedModelDefaultTypeInternal _CachedModel_default_instance_;
class CachedTransitSet;
struct CachedTransitSetDefaultTypeInternal;
extern CachedTransitSetDefaultTypeInternal _CachedTransitSet_default_instance_;
class TransitSet;
struct TransitSetDefaultTypeInternal;
extern TransitSetDefaultTypeInternal _TransitSet_default_instance_;
class TransitSet_TransitValue;
struct TransitSet_TransitValueDefaultTypeInternal;
extern TransitSet_TransitValueDefaultTypeInternal _TransitSet_TransitValue_default_instance_;
}  // namespace IVRData
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace IVRData {

// ===================================================================


// -------------------------------------------------------------------

class TransitSet_TransitValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IVRData.TransitSet.TransitValue) */ {
 public:
  inline TransitSet_TransitValue() : TransitSet_TransitValue(nullptr) {}
  ~TransitSet_TransitValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransitSet_TransitValue(::google::protobuf::internal::ConstantInitialized);

  TransitSet_TransitValue(const TransitSet_TransitValue& from);
  TransitSet_TransitValue(TransitSet_TransitValue&& from) noexcept
    : TransitSet_TransitValue() {
    *this = ::std::move(from);
  }

  inline TransitSet_TransitValue& operator=(const TransitSet_TransitValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitSet_TransitValue& operator=(TransitSet_TransitValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitSet_TransitValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitSet_TransitValue* internal_default_instance() {
    return reinterpret_cast<const TransitSet_TransitValue*>(
               &_TransitSet_TransitValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransitSet_TransitValue& a, TransitSet_TransitValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitSet_TransitValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitSet_TransitValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitSet_TransitValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitSet_TransitValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransitSet_TransitValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransitSet_TransitValue& from) {
    TransitSet_TransitValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitSet_TransitValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IVRData.TransitSet.TransitValue";
  }
  protected:
  explicit TransitSet_TransitValue(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // required string fromId = 1;
  bool has_fromid() const;
  void clear_fromid() ;
  const std::string& fromid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fromid(Arg_&& arg, Args_... args);
  std::string* mutable_fromid();
  PROTOBUF_NODISCARD std::string* release_fromid();
  void set_allocated_fromid(std::string* ptr);

  private:
  const std::string& _internal_fromid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fromid(
      const std::string& value);
  std::string* _internal_mutable_fromid();

  public:
  // required string toId = 2;
  bool has_toid() const;
  void clear_toid() ;
  const std::string& toid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_toid(Arg_&& arg, Args_... args);
  std::string* mutable_toid();
  PROTOBUF_NODISCARD std::string* release_toid();
  void set_allocated_toid(std::string* ptr);

  private:
  const std::string& _internal_toid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_toid(
      const std::string& value);
  std::string* _internal_mutable_toid();

  public:
  // required float value = 3;
  bool has_value() const;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:IVRData.TransitSet.TransitValue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 50, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr fromid_;
    ::google::protobuf::internal::ArenaStringPtr toid_;
    float value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivrdata_2do43e0dvs78zq_2eproto;
};// -------------------------------------------------------------------

class TransitSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IVRData.TransitSet) */ {
 public:
  inline TransitSet() : TransitSet(nullptr) {}
  ~TransitSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransitSet(::google::protobuf::internal::ConstantInitialized);

  TransitSet(const TransitSet& from);
  TransitSet(TransitSet&& from) noexcept
    : TransitSet() {
    *this = ::std::move(from);
  }

  inline TransitSet& operator=(const TransitSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitSet& operator=(TransitSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransitSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransitSet* internal_default_instance() {
    return reinterpret_cast<const TransitSet*>(
               &_TransitSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransitSet& a, TransitSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransitSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransitSet& from) {
    TransitSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IVRData.TransitSet";
  }
  protected:
  explicit TransitSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransitSet_TransitValue TransitValue;

  // accessors -------------------------------------------------------

  enum : int {
    kTransitsFieldNumber = 1,
  };
  // repeated .IVRData.TransitSet.TransitValue transits = 1;
  int transits_size() const;
  private:
  int _internal_transits_size() const;

  public:
  void clear_transits() ;
  ::IVRData::TransitSet_TransitValue* mutable_transits(int index);
  ::google::protobuf::RepeatedPtrField< ::IVRData::TransitSet_TransitValue >*
      mutable_transits();
  private:
  const ::google::protobuf::RepeatedPtrField<::IVRData::TransitSet_TransitValue>& _internal_transits() const;
  ::google::protobuf::RepeatedPtrField<::IVRData::TransitSet_TransitValue>* _internal_mutable_transits();
  public:
  const ::IVRData::TransitSet_TransitValue& transits(int index) const;
  ::IVRData::TransitSet_TransitValue* add_transits();
  const ::google::protobuf::RepeatedPtrField< ::IVRData::TransitSet_TransitValue >&
      transits() const;
  // @@protoc_insertion_point(class_scope:IVRData.TransitSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::IVRData::TransitSet_TransitValue > transits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivrdata_2do43e0dvs78zq_2eproto;
};// -------------------------------------------------------------------

class CachedTransitSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IVRData.CachedTransitSet) */ {
 public:
  inline CachedTransitSet() : CachedTransitSet(nullptr) {}
  ~CachedTransitSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CachedTransitSet(::google::protobuf::internal::ConstantInitialized);

  CachedTransitSet(const CachedTransitSet& from);
  CachedTransitSet(CachedTransitSet&& from) noexcept
    : CachedTransitSet() {
    *this = ::std::move(from);
  }

  inline CachedTransitSet& operator=(const CachedTransitSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedTransitSet& operator=(CachedTransitSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedTransitSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CachedTransitSet* internal_default_instance() {
    return reinterpret_cast<const CachedTransitSet*>(
               &_CachedTransitSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CachedTransitSet& a, CachedTransitSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedTransitSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedTransitSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedTransitSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CachedTransitSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CachedTransitSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CachedTransitSet& from) {
    CachedTransitSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachedTransitSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IVRData.CachedTransitSet";
  }
  protected:
  explicit CachedTransitSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransitSetFieldNumber = 1,
  };
  // required .IVRData.TransitSet transitSet = 1;
  bool has_transitset() const;
  void clear_transitset() ;
  const ::IVRData::TransitSet& transitset() const;
  PROTOBUF_NODISCARD ::IVRData::TransitSet* release_transitset();
  ::IVRData::TransitSet* mutable_transitset();
  void set_allocated_transitset(::IVRData::TransitSet* value);
  void unsafe_arena_set_allocated_transitset(::IVRData::TransitSet* value);
  ::IVRData::TransitSet* unsafe_arena_release_transitset();

  private:
  const ::IVRData::TransitSet& _internal_transitset() const;
  ::IVRData::TransitSet* _internal_mutable_transitset();

  public:
  // @@protoc_insertion_point(class_scope:IVRData.CachedTransitSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::IVRData::TransitSet* transitset_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivrdata_2do43e0dvs78zq_2eproto;
};// -------------------------------------------------------------------

class CachedModel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IVRData.CachedModel) */ {
 public:
  inline CachedModel() : CachedModel(nullptr) {}
  ~CachedModel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CachedModel(::google::protobuf::internal::ConstantInitialized);

  CachedModel(const CachedModel& from);
  CachedModel(CachedModel&& from) noexcept
    : CachedModel() {
    *this = ::std::move(from);
  }

  inline CachedModel& operator=(const CachedModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedModel& operator=(CachedModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CachedModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CachedModel* internal_default_instance() {
    return reinterpret_cast<const CachedModel*>(
               &_CachedModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CachedModel& a, CachedModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedModel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedModel* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CachedModel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CachedModel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CachedModel& from) {
    CachedModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CachedModel* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IVRData.CachedModel";
  }
  protected:
  explicit CachedModel(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // required bytes model = 1;
  bool has_model() const;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* ptr);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // @@protoc_insertion_point(class_scope:IVRData.CachedModel)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivrdata_2do43e0dvs78zq_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TransitSet_TransitValue

// required string fromId = 1;
inline bool TransitSet_TransitValue::has_fromid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TransitSet_TransitValue::clear_fromid() {
  _impl_.fromid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransitSet_TransitValue::fromid() const {
  // @@protoc_insertion_point(field_get:IVRData.TransitSet.TransitValue.fromId)
  return _internal_fromid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransitSet_TransitValue::set_fromid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fromid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IVRData.TransitSet.TransitValue.fromId)
}
inline std::string* TransitSet_TransitValue::mutable_fromid() {
  std::string* _s = _internal_mutable_fromid();
  // @@protoc_insertion_point(field_mutable:IVRData.TransitSet.TransitValue.fromId)
  return _s;
}
inline const std::string& TransitSet_TransitValue::_internal_fromid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fromid_.Get();
}
inline void TransitSet_TransitValue::_internal_set_fromid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fromid_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitSet_TransitValue::_internal_mutable_fromid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.fromid_.Mutable( GetArenaForAllocation());
}
inline std::string* TransitSet_TransitValue::release_fromid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IVRData.TransitSet.TransitValue.fromId)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.fromid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fromid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransitSet_TransitValue::set_allocated_fromid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fromid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fromid_.IsDefault()) {
          _impl_.fromid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IVRData.TransitSet.TransitValue.fromId)
}

// required string toId = 2;
inline bool TransitSet_TransitValue::has_toid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TransitSet_TransitValue::clear_toid() {
  _impl_.toid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransitSet_TransitValue::toid() const {
  // @@protoc_insertion_point(field_get:IVRData.TransitSet.TransitValue.toId)
  return _internal_toid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransitSet_TransitValue::set_toid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.toid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IVRData.TransitSet.TransitValue.toId)
}
inline std::string* TransitSet_TransitValue::mutable_toid() {
  std::string* _s = _internal_mutable_toid();
  // @@protoc_insertion_point(field_mutable:IVRData.TransitSet.TransitValue.toId)
  return _s;
}
inline const std::string& TransitSet_TransitValue::_internal_toid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.toid_.Get();
}
inline void TransitSet_TransitValue::_internal_set_toid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.toid_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitSet_TransitValue::_internal_mutable_toid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.toid_.Mutable( GetArenaForAllocation());
}
inline std::string* TransitSet_TransitValue::release_toid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IVRData.TransitSet.TransitValue.toId)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.toid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.toid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransitSet_TransitValue::set_allocated_toid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.toid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.toid_.IsDefault()) {
          _impl_.toid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IVRData.TransitSet.TransitValue.toId)
}

// required float value = 3;
inline bool TransitSet_TransitValue::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TransitSet_TransitValue::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float TransitSet_TransitValue::value() const {
  // @@protoc_insertion_point(field_get:IVRData.TransitSet.TransitValue.value)
  return _internal_value();
}
inline void TransitSet_TransitValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:IVRData.TransitSet.TransitValue.value)
}
inline float TransitSet_TransitValue::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void TransitSet_TransitValue::_internal_set_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// TransitSet

// repeated .IVRData.TransitSet.TransitValue transits = 1;
inline int TransitSet::_internal_transits_size() const {
  return _internal_transits().size();
}
inline int TransitSet::transits_size() const {
  return _internal_transits_size();
}
inline void TransitSet::clear_transits() {
  _internal_mutable_transits()->Clear();
}
inline ::IVRData::TransitSet_TransitValue* TransitSet::mutable_transits(int index) {
  // @@protoc_insertion_point(field_mutable:IVRData.TransitSet.transits)
  return _internal_mutable_transits()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::IVRData::TransitSet_TransitValue >*
TransitSet::mutable_transits() {
  // @@protoc_insertion_point(field_mutable_list:IVRData.TransitSet.transits)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_transits();
}
inline const ::IVRData::TransitSet_TransitValue& TransitSet::transits(int index) const {
  // @@protoc_insertion_point(field_get:IVRData.TransitSet.transits)
    return _internal_transits().Get(index);
}
inline ::IVRData::TransitSet_TransitValue* TransitSet::add_transits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::IVRData::TransitSet_TransitValue* _add = _internal_mutable_transits()->Add();
  // @@protoc_insertion_point(field_add:IVRData.TransitSet.transits)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::IVRData::TransitSet_TransitValue >&
TransitSet::transits() const {
  // @@protoc_insertion_point(field_list:IVRData.TransitSet.transits)
  return _internal_transits();
}
inline const ::google::protobuf::RepeatedPtrField<::IVRData::TransitSet_TransitValue>&
TransitSet::_internal_transits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transits_;
}
inline ::google::protobuf::RepeatedPtrField<::IVRData::TransitSet_TransitValue>*
TransitSet::_internal_mutable_transits() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.transits_;
}

// -------------------------------------------------------------------

// CachedTransitSet

// required .IVRData.TransitSet transitSet = 1;
inline bool CachedTransitSet::has_transitset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transitset_ != nullptr);
  return value;
}
inline void CachedTransitSet::clear_transitset() {
  if (_impl_.transitset_ != nullptr) _impl_.transitset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::IVRData::TransitSet& CachedTransitSet::_internal_transitset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IVRData::TransitSet* p = _impl_.transitset_;
  return p != nullptr ? *p : reinterpret_cast<const ::IVRData::TransitSet&>(::IVRData::_TransitSet_default_instance_);
}
inline const ::IVRData::TransitSet& CachedTransitSet::transitset() const {
  // @@protoc_insertion_point(field_get:IVRData.CachedTransitSet.transitSet)
  return _internal_transitset();
}
inline void CachedTransitSet::unsafe_arena_set_allocated_transitset(::IVRData::TransitSet* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transitset_);
  }
  _impl_.transitset_ = reinterpret_cast<::IVRData::TransitSet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IVRData.CachedTransitSet.transitSet)
}
inline ::IVRData::TransitSet* CachedTransitSet::release_transitset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IVRData::TransitSet* released = _impl_.transitset_;
  _impl_.transitset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IVRData::TransitSet* CachedTransitSet::unsafe_arena_release_transitset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IVRData.CachedTransitSet.transitSet)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IVRData::TransitSet* temp = _impl_.transitset_;
  _impl_.transitset_ = nullptr;
  return temp;
}
inline ::IVRData::TransitSet* CachedTransitSet::_internal_mutable_transitset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transitset_ == nullptr) {
    auto* p = CreateMaybeMessage<::IVRData::TransitSet>(GetArenaForAllocation());
    _impl_.transitset_ = reinterpret_cast<::IVRData::TransitSet*>(p);
  }
  return _impl_.transitset_;
}
inline ::IVRData::TransitSet* CachedTransitSet::mutable_transitset() {
  ::IVRData::TransitSet* _msg = _internal_mutable_transitset();
  // @@protoc_insertion_point(field_mutable:IVRData.CachedTransitSet.transitSet)
  return _msg;
}
inline void CachedTransitSet::set_allocated_transitset(::IVRData::TransitSet* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IVRData::TransitSet*>(_impl_.transitset_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IVRData::TransitSet*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transitset_ = reinterpret_cast<::IVRData::TransitSet*>(value);
  // @@protoc_insertion_point(field_set_allocated:IVRData.CachedTransitSet.transitSet)
}

// -------------------------------------------------------------------

// CachedModel

// required bytes model = 1;
inline bool CachedModel::has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CachedModel::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CachedModel::model() const {
  // @@protoc_insertion_point(field_get:IVRData.CachedModel.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CachedModel::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IVRData.CachedModel.model)
}
inline std::string* CachedModel::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:IVRData.CachedModel.model)
  return _s;
}
inline const std::string& CachedModel::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void CachedModel::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* CachedModel::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable( GetArenaForAllocation());
}
inline std::string* CachedModel::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IVRData.CachedModel.model)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CachedModel::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IVRData.CachedModel.model)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IVRData


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ivrdata_2do43e0dvs78zq_2eproto_2epb_2eh
