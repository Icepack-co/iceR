syntax = "proto2";
option java_package = "icepackai.TSPTW";
// This package deals with Travelling Salesman Problems with Time Windows
// Using either straight line, Haversine, or Roadnetwork distances
// The objective is to minimise the cost of the tour through all the points keeping 
// within the time windows.
// 
// It's worth noting that the first point provided in the sequence is considered 
// the start point of the TSP and will be used to zero the time when the tour returns 
// to that point.

package TSPTW;

// -- INPUT DEFINITIONS -- // 
// https://docs.icepack.ai/tsp/tsptw/#input
message Geocode {
    required string id = 1;
    required float x = 2; //longitude for earth-routing
    required float y = 3; //latitude for earth-routing
    // note: 
    // 1. for road network times, the unit of measurement is decimal minutes.
    // 2. for straightline/haversign distances, the distance is assumed to be the time.
    // the use of the eDistanceType should be taken consideration of when populating windows
    optional float windowStart = 4;
    optional float windowEnd = 5;
}

message TSP {
    enum eDistanceType {
        RoadNetwork = 1;
        Euclidean = 2;
        Haversine = 3;
    };
    repeated Geocode points = 1;
    optional eDistanceType distancetype = 2 [default = RoadNetwork];
}

message SolveRequest {
  enum SolveType {
    Optimise =
        0;  // Ignores provided routes, Solves using internal seed mechanisms
    Evaluate =
        1;  // Evaluates the provided route sequence. Single solution response.
    ReOptimise =
        2;  // Uses routes as starting solution and continues to optimise.
  }
  optional TSP model = 1;       // either model(1) or modelID(2) should be specified
  optional string modelID = 2;  // the model ID from a previously optimised
                                // request (for use with evaluate solve type)
  repeated string visitSequence = 3;  // for solveType = [Evaluate, ReOptimise].
  optional SolveType solveType = 4 [default = Optimise];
}

// -- OUTPUT DEFINITIONS -- // 
// https://docs.icepack.ai/tsp/tsptw/#output
message Edge {
    message Geometry{
        required float x = 1;
        required float y = 2;
    }
    required string from = 1;
    required string to = 2;
    optional float distance = 3;
    optional float time = 4;
    // geometry is populated for road-network pathing.
    repeated Geometry geometry = 5;
}

message SolutionResponse {
    //this is the tour produced by the solver.
    repeated string tour = 1;
    repeated Edge edges = 2;
    repeated float arrivalTimes = 3;
}
